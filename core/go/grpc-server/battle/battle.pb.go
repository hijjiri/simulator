// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: battle.proto

package battle

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BGMId int32

const (
	BGMId_NONE_BGM BGMId = 0
)

// Enum value maps for BGMId.
var (
	BGMId_name = map[int32]string{
		0: "NONE_BGM",
	}
	BGMId_value = map[string]int32{
		"NONE_BGM": 0,
	}
)

func (x BGMId) Enum() *BGMId {
	p := new(BGMId)
	*p = x
	return p
}

func (x BGMId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BGMId) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[0].Descriptor()
}

func (BGMId) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[0]
}

func (x BGMId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BGMId.Descriptor instead.
func (BGMId) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{0}
}

type BackgroundId int32

const (
	BackgroundId_NONE BackgroundId = 0
)

// Enum value maps for BackgroundId.
var (
	BackgroundId_name = map[int32]string{
		0: "NONE",
	}
	BackgroundId_value = map[string]int32{
		"NONE": 0,
	}
)

func (x BackgroundId) Enum() *BackgroundId {
	p := new(BackgroundId)
	*p = x
	return p
}

func (x BackgroundId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackgroundId) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[1].Descriptor()
}

func (BackgroundId) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[1]
}

func (x BackgroundId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackgroundId.Descriptor instead.
func (BackgroundId) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{1}
}

type BattleType int32

const (
	BattleType_UNDEFINED_BATTLE        BattleType = 0
	BattleType_NODE_BATTLE             BattleType = 1
	BattleType_CUP_BATTLE              BattleType = 2
	BattleType_RAID_BATTLE             BattleType = 3
	BattleType_LAND_NODE_BATTLE        BattleType = 4
	BattleType_KNIGHT_BATTLE           BattleType = 5
	BattleType_ARENA_BATTLE            BattleType = 6
	BattleType_SIMULATION              BattleType = 7
	BattleType_NINE_BATTLE             BattleType = 8
	BattleType_ARENA_NINE_BATTLE       BattleType = 9
	BattleType_COLOSSEUM_BATTLE        BattleType = 10
	BattleType_DEEP_NODE_BATTLE        BattleType = 11
	BattleType_ARENA_JIN_NINE_BATTLE   BattleType = 12
	BattleType_DEEP_NODE_BOSS_BATTLE   BattleType = 13
	BattleType_LANDWAR_BATTLE          BattleType = 14
	BattleType_CUP_JIN_NINE_BATTLE     BattleType = 15
	BattleType_ARENA_JIN_THREE_BATTLE  BattleType = 16
	BattleType_JIN_SIMULATION          BattleType = 17
	BattleType_GYM_BATTLE              BattleType = 18
	BattleType_SOUL_NODE               BattleType = 19
	BattleType_SOUL_BATTLE             BattleType = 20
	BattleType_THREE_ON_THREE_ON_THREE BattleType = 21
)

// Enum value maps for BattleType.
var (
	BattleType_name = map[int32]string{
		0:  "UNDEFINED_BATTLE",
		1:  "NODE_BATTLE",
		2:  "CUP_BATTLE",
		3:  "RAID_BATTLE",
		4:  "LAND_NODE_BATTLE",
		5:  "KNIGHT_BATTLE",
		6:  "ARENA_BATTLE",
		7:  "SIMULATION",
		8:  "NINE_BATTLE",
		9:  "ARENA_NINE_BATTLE",
		10: "COLOSSEUM_BATTLE",
		11: "DEEP_NODE_BATTLE",
		12: "ARENA_JIN_NINE_BATTLE",
		13: "DEEP_NODE_BOSS_BATTLE",
		14: "LANDWAR_BATTLE",
		15: "CUP_JIN_NINE_BATTLE",
		16: "ARENA_JIN_THREE_BATTLE",
		17: "JIN_SIMULATION",
		18: "GYM_BATTLE",
		19: "SOUL_NODE",
		20: "SOUL_BATTLE",
		21: "THREE_ON_THREE_ON_THREE",
	}
	BattleType_value = map[string]int32{
		"UNDEFINED_BATTLE":        0,
		"NODE_BATTLE":             1,
		"CUP_BATTLE":              2,
		"RAID_BATTLE":             3,
		"LAND_NODE_BATTLE":        4,
		"KNIGHT_BATTLE":           5,
		"ARENA_BATTLE":            6,
		"SIMULATION":              7,
		"NINE_BATTLE":             8,
		"ARENA_NINE_BATTLE":       9,
		"COLOSSEUM_BATTLE":        10,
		"DEEP_NODE_BATTLE":        11,
		"ARENA_JIN_NINE_BATTLE":   12,
		"DEEP_NODE_BOSS_BATTLE":   13,
		"LANDWAR_BATTLE":          14,
		"CUP_JIN_NINE_BATTLE":     15,
		"ARENA_JIN_THREE_BATTLE":  16,
		"JIN_SIMULATION":          17,
		"GYM_BATTLE":              18,
		"SOUL_NODE":               19,
		"SOUL_BATTLE":             20,
		"THREE_ON_THREE_ON_THREE": 21,
	}
)

func (x BattleType) Enum() *BattleType {
	p := new(BattleType)
	*p = x
	return p
}

func (x BattleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BattleType) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[2].Descriptor()
}

func (BattleType) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[2]
}

func (x BattleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BattleType.Descriptor instead.
func (BattleType) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{2}
}

type Rule int32

const (
	Rule_RULE_NONE                         Rule = 0
	Rule_HP_RECOVERY_CHANGE_PARAM_RECOVERY Rule = 1
	Rule_INT_DAMAGE_CHANGE_INT_DEBUFF      Rule = 2
	Rule_LIMIT_BUFF_100                    Rule = 3
	Rule_LIMIT_DEBUFF_50                   Rule = 4
	Rule_LIMIT_HEAL_100                    Rule = 5
)

// Enum value maps for Rule.
var (
	Rule_name = map[int32]string{
		0: "RULE_NONE",
		1: "HP_RECOVERY_CHANGE_PARAM_RECOVERY",
		2: "INT_DAMAGE_CHANGE_INT_DEBUFF",
		3: "LIMIT_BUFF_100",
		4: "LIMIT_DEBUFF_50",
		5: "LIMIT_HEAL_100",
	}
	Rule_value = map[string]int32{
		"RULE_NONE":                         0,
		"HP_RECOVERY_CHANGE_PARAM_RECOVERY": 1,
		"INT_DAMAGE_CHANGE_INT_DEBUFF":      2,
		"LIMIT_BUFF_100":                    3,
		"LIMIT_DEBUFF_50":                   4,
		"LIMIT_HEAL_100":                    5,
	}
)

func (x Rule) Enum() *Rule {
	p := new(Rule)
	*p = x
	return p
}

func (x Rule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rule) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[3].Descriptor()
}

func (Rule) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[3]
}

func (x Rule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rule.Descriptor instead.
func (Rule) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{3}
}

type Battle_Result int32

const (
	Battle_PROGRESS Battle_Result = 0
	Battle_WIN      Battle_Result = 1
	Battle_LOSE     Battle_Result = 2
	Battle_TIME_UP  Battle_Result = 3
	Battle_DRAW     Battle_Result = 4
)

// Enum value maps for Battle_Result.
var (
	Battle_Result_name = map[int32]string{
		0: "PROGRESS",
		1: "WIN",
		2: "LOSE",
		3: "TIME_UP",
		4: "DRAW",
	}
	Battle_Result_value = map[string]int32{
		"PROGRESS": 0,
		"WIN":      1,
		"LOSE":     2,
		"TIME_UP":  3,
		"DRAW":     4,
	}
)

func (x Battle_Result) Enum() *Battle_Result {
	p := new(Battle_Result)
	*p = x
	return p
}

func (x Battle_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Battle_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[4].Descriptor()
}

func (Battle_Result) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[4]
}

func (x Battle_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Battle_Result.Descriptor instead.
func (Battle_Result) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{1, 0}
}

type Battle_State int32

const (
	Battle_ACTIVE         Battle_State = 0
	Battle_FIRST_PASSIVE  Battle_State = 1
	Battle_SECOND_PASSIVE Battle_State = 2
	Battle_OPENING        Battle_State = 3
)

// Enum value maps for Battle_State.
var (
	Battle_State_name = map[int32]string{
		0: "ACTIVE",
		1: "FIRST_PASSIVE",
		2: "SECOND_PASSIVE",
		3: "OPENING",
	}
	Battle_State_value = map[string]int32{
		"ACTIVE":         0,
		"FIRST_PASSIVE":  1,
		"SECOND_PASSIVE": 2,
		"OPENING":        3,
	}
)

func (x Battle_State) Enum() *Battle_State {
	p := new(Battle_State)
	*p = x
	return p
}

func (x Battle_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Battle_State) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[5].Descriptor()
}

func (Battle_State) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[5]
}

func (x Battle_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Battle_State.Descriptor instead.
func (Battle_State) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{1, 1}
}

type Battle_AuraState int32

const (
	Battle_FIRST_ACTIVE_AURA     Battle_AuraState = 0
	Battle_SECOND_ACTIVE_AURA    Battle_AuraState = 1
	Battle_ACTIVE_AURA_ADDITION  Battle_AuraState = 2
	Battle_FIRST_PASSIVE_AURA    Battle_AuraState = 3
	Battle_SECOND_PASSIVE_AURA   Battle_AuraState = 4
	Battle_PASSIVE_AURA_ADDITION Battle_AuraState = 5
)

// Enum value maps for Battle_AuraState.
var (
	Battle_AuraState_name = map[int32]string{
		0: "FIRST_ACTIVE_AURA",
		1: "SECOND_ACTIVE_AURA",
		2: "ACTIVE_AURA_ADDITION",
		3: "FIRST_PASSIVE_AURA",
		4: "SECOND_PASSIVE_AURA",
		5: "PASSIVE_AURA_ADDITION",
	}
	Battle_AuraState_value = map[string]int32{
		"FIRST_ACTIVE_AURA":     0,
		"SECOND_ACTIVE_AURA":    1,
		"ACTIVE_AURA_ADDITION":  2,
		"FIRST_PASSIVE_AURA":    3,
		"SECOND_PASSIVE_AURA":   4,
		"PASSIVE_AURA_ADDITION": 5,
	}
)

func (x Battle_AuraState) Enum() *Battle_AuraState {
	p := new(Battle_AuraState)
	*p = x
	return p
}

func (x Battle_AuraState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Battle_AuraState) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[6].Descriptor()
}

func (Battle_AuraState) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[6]
}

func (x Battle_AuraState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Battle_AuraState.Descriptor instead.
func (Battle_AuraState) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{1, 2}
}

type BaseUnit_Result int32

const (
	BaseUnit_NONE                    BaseUnit_Result = 0
	BaseUnit_POISON                  BaseUnit_Result = 1
	BaseUnit_SLEEP                   BaseUnit_Result = 2
	BaseUnit_CONFUSION               BaseUnit_Result = 3
	BaseUnit_RECOVERY                BaseUnit_Result = 4
	BaseUnit_MY_DAMAGE               BaseUnit_Result = 5
	BaseUnit_YOUR_PHY_DAMAGE         BaseUnit_Result = 7
	BaseUnit_YOUR_INT_DAMAGE         BaseUnit_Result = 8
	BaseUnit_FEAR                    BaseUnit_Result = 9
	BaseUnit_BARRIER                 BaseUnit_Result = 10
	BaseUnit_BLEED                   BaseUnit_Result = 11
	BaseUnit_STUN                    BaseUnit_Result = 12
	BaseUnit_DAMAGE_CUT              BaseUnit_Result = 13
	BaseUnit_AGI_CHARGE              BaseUnit_Result = 14
	BaseUnit_PROSTRATION             BaseUnit_Result = 15
	BaseUnit_DECOY                   BaseUnit_Result = 16
	BaseUnit_CURSE                   BaseUnit_Result = 17
	BaseUnit_CHARM                   BaseUnit_Result = 18
	BaseUnit_AURA_ADD_PHY_DAMAGE     BaseUnit_Result = 19
	BaseUnit_AURA_ADD_INT_DAMAGE     BaseUnit_Result = 20
	BaseUnit_AURA_RECEIVE_PHY_DAMAGE BaseUnit_Result = 21
	BaseUnit_AURA_RECEIVE_INT_DAMAGE BaseUnit_Result = 22
)

// Enum value maps for BaseUnit_Result.
var (
	BaseUnit_Result_name = map[int32]string{
		0:  "NONE",
		1:  "POISON",
		2:  "SLEEP",
		3:  "CONFUSION",
		4:  "RECOVERY",
		5:  "MY_DAMAGE",
		7:  "YOUR_PHY_DAMAGE",
		8:  "YOUR_INT_DAMAGE",
		9:  "FEAR",
		10: "BARRIER",
		11: "BLEED",
		12: "STUN",
		13: "DAMAGE_CUT",
		14: "AGI_CHARGE",
		15: "PROSTRATION",
		16: "DECOY",
		17: "CURSE",
		18: "CHARM",
		19: "AURA_ADD_PHY_DAMAGE",
		20: "AURA_ADD_INT_DAMAGE",
		21: "AURA_RECEIVE_PHY_DAMAGE",
		22: "AURA_RECEIVE_INT_DAMAGE",
	}
	BaseUnit_Result_value = map[string]int32{
		"NONE":                    0,
		"POISON":                  1,
		"SLEEP":                   2,
		"CONFUSION":               3,
		"RECOVERY":                4,
		"MY_DAMAGE":               5,
		"YOUR_PHY_DAMAGE":         7,
		"YOUR_INT_DAMAGE":         8,
		"FEAR":                    9,
		"BARRIER":                 10,
		"BLEED":                   11,
		"STUN":                    12,
		"DAMAGE_CUT":              13,
		"AGI_CHARGE":              14,
		"PROSTRATION":             15,
		"DECOY":                   16,
		"CURSE":                   17,
		"CHARM":                   18,
		"AURA_ADD_PHY_DAMAGE":     19,
		"AURA_ADD_INT_DAMAGE":     20,
		"AURA_RECEIVE_PHY_DAMAGE": 21,
		"AURA_RECEIVE_INT_DAMAGE": 22,
	}
)

func (x BaseUnit_Result) Enum() *BaseUnit_Result {
	p := new(BaseUnit_Result)
	*p = x
	return p
}

func (x BaseUnit_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BaseUnit_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[7].Descriptor()
}

func (BaseUnit_Result) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[7]
}

func (x BaseUnit_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BaseUnit_Result.Descriptor instead.
func (BaseUnit_Result) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{4, 0}
}

type CurrentUnit_State int32

const (
	CurrentUnit_NORMAL      CurrentUnit_State = 0
	CurrentUnit_POISON      CurrentUnit_State = 1
	CurrentUnit_SLEEP       CurrentUnit_State = 2
	CurrentUnit_CONFUSION   CurrentUnit_State = 3
	CurrentUnit_FEAR        CurrentUnit_State = 4
	CurrentUnit_BARRIER     CurrentUnit_State = 5
	CurrentUnit_BLEED       CurrentUnit_State = 6
	CurrentUnit_STUN        CurrentUnit_State = 7
	CurrentUnit_PROSTRATION CurrentUnit_State = 8
	CurrentUnit_CURSE       CurrentUnit_State = 9
	CurrentUnit_CHARM       CurrentUnit_State = 10
)

// Enum value maps for CurrentUnit_State.
var (
	CurrentUnit_State_name = map[int32]string{
		0:  "NORMAL",
		1:  "POISON",
		2:  "SLEEP",
		3:  "CONFUSION",
		4:  "FEAR",
		5:  "BARRIER",
		6:  "BLEED",
		7:  "STUN",
		8:  "PROSTRATION",
		9:  "CURSE",
		10: "CHARM",
	}
	CurrentUnit_State_value = map[string]int32{
		"NORMAL":      0,
		"POISON":      1,
		"SLEEP":       2,
		"CONFUSION":   3,
		"FEAR":        4,
		"BARRIER":     5,
		"BLEED":       6,
		"STUN":        7,
		"PROSTRATION": 8,
		"CURSE":       9,
		"CHARM":       10,
	}
)

func (x CurrentUnit_State) Enum() *CurrentUnit_State {
	p := new(CurrentUnit_State)
	*p = x
	return p
}

func (x CurrentUnit_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrentUnit_State) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[8].Descriptor()
}

func (CurrentUnit_State) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[8]
}

func (x CurrentUnit_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrentUnit_State.Descriptor instead.
func (CurrentUnit_State) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{5, 0}
}

type Skill_Condition int32

const (
	Skill_NONE                Skill_Condition = 0
	Skill_ACTIVE              Skill_Condition = 1
	Skill_OPENING             Skill_Condition = 2
	Skill_COUNTER             Skill_Condition = 3
	Skill_SELF_HP             Skill_Condition = 4
	Skill_ALLY_HP             Skill_Condition = 5
	Skill_DEATH               Skill_Condition = 6
	Skill_EVERY               Skill_Condition = 7
	Skill_ALLY                Skill_Condition = 8
	Skill_ENEMY               Skill_Condition = 9
	Skill_ALLY_FRONT          Skill_Condition = 10
	Skill_ALLY_MIDDLE         Skill_Condition = 11
	Skill_ALLY_BACK           Skill_Condition = 12
	Skill_ENEMY_FRONT         Skill_Condition = 13
	Skill_ENEMY_MIDDLE        Skill_Condition = 14
	Skill_ENEMY_BACK          Skill_Condition = 15
	Skill_ENEMY_FIRST         Skill_Condition = 16
	Skill_ENEMY_LAST          Skill_Condition = 17
	Skill_SELF_PARAM_UNDER    Skill_Condition = 18
	Skill_SELF_PARAM_OVER     Skill_Condition = 19
	Skill_ENEMY_PARAM_UNDER   Skill_Condition = 20
	Skill_ENEMY_PARAM_OVER    Skill_Condition = 21
	Skill_ENEMY_HP            Skill_Condition = 22
	Skill_ACTIVE_SELF_HP      Skill_Condition = 23
	Skill_ACTIVE_ENEMY_STATUS Skill_Condition = 24
)

// Enum value maps for Skill_Condition.
var (
	Skill_Condition_name = map[int32]string{
		0:  "NONE",
		1:  "ACTIVE",
		2:  "OPENING",
		3:  "COUNTER",
		4:  "SELF_HP",
		5:  "ALLY_HP",
		6:  "DEATH",
		7:  "EVERY",
		8:  "ALLY",
		9:  "ENEMY",
		10: "ALLY_FRONT",
		11: "ALLY_MIDDLE",
		12: "ALLY_BACK",
		13: "ENEMY_FRONT",
		14: "ENEMY_MIDDLE",
		15: "ENEMY_BACK",
		16: "ENEMY_FIRST",
		17: "ENEMY_LAST",
		18: "SELF_PARAM_UNDER",
		19: "SELF_PARAM_OVER",
		20: "ENEMY_PARAM_UNDER",
		21: "ENEMY_PARAM_OVER",
		22: "ENEMY_HP",
		23: "ACTIVE_SELF_HP",
		24: "ACTIVE_ENEMY_STATUS",
	}
	Skill_Condition_value = map[string]int32{
		"NONE":                0,
		"ACTIVE":              1,
		"OPENING":             2,
		"COUNTER":             3,
		"SELF_HP":             4,
		"ALLY_HP":             5,
		"DEATH":               6,
		"EVERY":               7,
		"ALLY":                8,
		"ENEMY":               9,
		"ALLY_FRONT":          10,
		"ALLY_MIDDLE":         11,
		"ALLY_BACK":           12,
		"ENEMY_FRONT":         13,
		"ENEMY_MIDDLE":        14,
		"ENEMY_BACK":          15,
		"ENEMY_FIRST":         16,
		"ENEMY_LAST":          17,
		"SELF_PARAM_UNDER":    18,
		"SELF_PARAM_OVER":     19,
		"ENEMY_PARAM_UNDER":   20,
		"ENEMY_PARAM_OVER":    21,
		"ENEMY_HP":            22,
		"ACTIVE_SELF_HP":      23,
		"ACTIVE_ENEMY_STATUS": 24,
	}
)

func (x Skill_Condition) Enum() *Skill_Condition {
	p := new(Skill_Condition)
	*p = x
	return p
}

func (x Skill_Condition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Skill_Condition) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[9].Descriptor()
}

func (Skill_Condition) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[9]
}

func (x Skill_Condition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Skill_Condition.Descriptor instead.
func (Skill_Condition) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{10, 0}
}

type Skill_Effect_Target int32

const (
	Skill_Effect_SELF                  Skill_Effect_Target = 0
	Skill_Effect_ENEMY_FIRST           Skill_Effect_Target = 1
	Skill_Effect_ENEMY_ALL             Skill_Effect_Target = 2
	Skill_Effect_ALLY_FIRST            Skill_Effect_Target = 3
	Skill_Effect_ALLY_ALL              Skill_Effect_Target = 4
	Skill_Effect_ALLY_LOWEST_HP        Skill_Effect_Target = 5
	Skill_Effect_RANDOM                Skill_Effect_Target = 6
	Skill_Effect_ENEMY_HIGHEST_HP      Skill_Effect_Target = 7
	Skill_Effect_ENEMY_LOWEST_HP       Skill_Effect_Target = 8
	Skill_Effect_ENEMY_HIGHEST_PHY     Skill_Effect_Target = 9
	Skill_Effect_ENEMY_LOWEST_PHY      Skill_Effect_Target = 10
	Skill_Effect_ENEMY_HIGHEST_INT     Skill_Effect_Target = 11
	Skill_Effect_ENEMY_LOWEST_INT      Skill_Effect_Target = 12
	Skill_Effect_ENEMY_HIGHEST_AGI     Skill_Effect_Target = 13
	Skill_Effect_ENEMY_LOWEST_AGI      Skill_Effect_Target = 14
	Skill_Effect_ENEMY_LAST            Skill_Effect_Target = 15
	Skill_Effect_ENEMY_FRONT           Skill_Effect_Target = 16
	Skill_Effect_ENEMY_MIDDLE          Skill_Effect_Target = 17
	Skill_Effect_ENEMY_BACK            Skill_Effect_Target = 18
	Skill_Effect_ALLY_HIGHEST_HP       Skill_Effect_Target = 19
	Skill_Effect_ALLY_HIGHEST_PHY      Skill_Effect_Target = 20
	Skill_Effect_ALLY_LOWEST_PHY       Skill_Effect_Target = 21
	Skill_Effect_ALLY_HIGHEST_INT      Skill_Effect_Target = 22
	Skill_Effect_ALLY_LOWEST_INT       Skill_Effect_Target = 23
	Skill_Effect_ALLY_HIGHEST_AGI      Skill_Effect_Target = 24
	Skill_Effect_ALLY_LOWEST_AGI       Skill_Effect_Target = 25
	Skill_Effect_ALLY_LAST             Skill_Effect_Target = 26
	Skill_Effect_ALLY_HIGHEST_BASE_HP  Skill_Effect_Target = 27
	Skill_Effect_ALLY_LOWEST_BASE_HP   Skill_Effect_Target = 28
	Skill_Effect_ENEMY_HIGHEST_BASE_HP Skill_Effect_Target = 29
	Skill_Effect_ENEMY_LOWEST_BASE_HP  Skill_Effect_Target = 30
	Skill_Effect_ALLY_MIDDLE           Skill_Effect_Target = 31
	Skill_Effect_ALLY_FRONT            Skill_Effect_Target = 32
	Skill_Effect_ALLY_BACK             Skill_Effect_Target = 33
	Skill_Effect_NO_TARGET             Skill_Effect_Target = 34
)

// Enum value maps for Skill_Effect_Target.
var (
	Skill_Effect_Target_name = map[int32]string{
		0:  "SELF",
		1:  "ENEMY_FIRST",
		2:  "ENEMY_ALL",
		3:  "ALLY_FIRST",
		4:  "ALLY_ALL",
		5:  "ALLY_LOWEST_HP",
		6:  "RANDOM",
		7:  "ENEMY_HIGHEST_HP",
		8:  "ENEMY_LOWEST_HP",
		9:  "ENEMY_HIGHEST_PHY",
		10: "ENEMY_LOWEST_PHY",
		11: "ENEMY_HIGHEST_INT",
		12: "ENEMY_LOWEST_INT",
		13: "ENEMY_HIGHEST_AGI",
		14: "ENEMY_LOWEST_AGI",
		15: "ENEMY_LAST",
		16: "ENEMY_FRONT",
		17: "ENEMY_MIDDLE",
		18: "ENEMY_BACK",
		19: "ALLY_HIGHEST_HP",
		20: "ALLY_HIGHEST_PHY",
		21: "ALLY_LOWEST_PHY",
		22: "ALLY_HIGHEST_INT",
		23: "ALLY_LOWEST_INT",
		24: "ALLY_HIGHEST_AGI",
		25: "ALLY_LOWEST_AGI",
		26: "ALLY_LAST",
		27: "ALLY_HIGHEST_BASE_HP",
		28: "ALLY_LOWEST_BASE_HP",
		29: "ENEMY_HIGHEST_BASE_HP",
		30: "ENEMY_LOWEST_BASE_HP",
		31: "ALLY_MIDDLE",
		32: "ALLY_FRONT",
		33: "ALLY_BACK",
		34: "NO_TARGET",
	}
	Skill_Effect_Target_value = map[string]int32{
		"SELF":                  0,
		"ENEMY_FIRST":           1,
		"ENEMY_ALL":             2,
		"ALLY_FIRST":            3,
		"ALLY_ALL":              4,
		"ALLY_LOWEST_HP":        5,
		"RANDOM":                6,
		"ENEMY_HIGHEST_HP":      7,
		"ENEMY_LOWEST_HP":       8,
		"ENEMY_HIGHEST_PHY":     9,
		"ENEMY_LOWEST_PHY":      10,
		"ENEMY_HIGHEST_INT":     11,
		"ENEMY_LOWEST_INT":      12,
		"ENEMY_HIGHEST_AGI":     13,
		"ENEMY_LOWEST_AGI":      14,
		"ENEMY_LAST":            15,
		"ENEMY_FRONT":           16,
		"ENEMY_MIDDLE":          17,
		"ENEMY_BACK":            18,
		"ALLY_HIGHEST_HP":       19,
		"ALLY_HIGHEST_PHY":      20,
		"ALLY_LOWEST_PHY":       21,
		"ALLY_HIGHEST_INT":      22,
		"ALLY_LOWEST_INT":       23,
		"ALLY_HIGHEST_AGI":      24,
		"ALLY_LOWEST_AGI":       25,
		"ALLY_LAST":             26,
		"ALLY_HIGHEST_BASE_HP":  27,
		"ALLY_LOWEST_BASE_HP":   28,
		"ENEMY_HIGHEST_BASE_HP": 29,
		"ENEMY_LOWEST_BASE_HP":  30,
		"ALLY_MIDDLE":           31,
		"ALLY_FRONT":            32,
		"ALLY_BACK":             33,
		"NO_TARGET":             34,
	}
)

func (x Skill_Effect_Target) Enum() *Skill_Effect_Target {
	p := new(Skill_Effect_Target)
	*p = x
	return p
}

func (x Skill_Effect_Target) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Skill_Effect_Target) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[10].Descriptor()
}

func (Skill_Effect_Target) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[10]
}

func (x Skill_Effect_Target) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Skill_Effect_Target.Descriptor instead.
func (Skill_Effect_Target) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{10, 0, 0}
}

type Skill_Effect_Param int32

const (
	Skill_Effect_NONE                Skill_Effect_Param = 0
	Skill_Effect_HP                  Skill_Effect_Param = 1
	Skill_Effect_PHY                 Skill_Effect_Param = 2
	Skill_Effect_INT                 Skill_Effect_Param = 3
	Skill_Effect_AGI                 Skill_Effect_Param = 4
	Skill_Effect_POISON              Skill_Effect_Param = 5
	Skill_Effect_SLEEP               Skill_Effect_Param = 6
	Skill_Effect_CONFUSION           Skill_Effect_Param = 7
	Skill_Effect_FEAR                Skill_Effect_Param = 8
	Skill_Effect_BARRIER             Skill_Effect_Param = 9
	Skill_Effect_BLEED               Skill_Effect_Param = 10
	Skill_Effect_CANCEL_CONFUSION    Skill_Effect_Param = 11
	Skill_Effect_CANCEL_FEAR         Skill_Effect_Param = 12
	Skill_Effect_STUN                Skill_Effect_Param = 13
	Skill_Effect_PHY_INT_HIGHER      Skill_Effect_Param = 14
	Skill_Effect_PHY_INT_LOWER       Skill_Effect_Param = 15
	Skill_Effect_PHY_INT_AGI_HIGHEST Skill_Effect_Param = 16
	Skill_Effect_PHY_INT_AGI_LOWEST  Skill_Effect_Param = 17
	Skill_Effect_PROSTRATION         Skill_Effect_Param = 18
	Skill_Effect_DECOY               Skill_Effect_Param = 19
	Skill_Effect_CANCEL_BLEED        Skill_Effect_Param = 20
	Skill_Effect_CHARGE              Skill_Effect_Param = 21
	Skill_Effect_STATIC_HP           Skill_Effect_Param = 22
	Skill_Effect_STATIC_PHY          Skill_Effect_Param = 23
	Skill_Effect_STATIC_INT          Skill_Effect_Param = 24
	Skill_Effect_STATIC_AGI          Skill_Effect_Param = 25
	Skill_Effect_STATIC_CHARGE       Skill_Effect_Param = 26
	Skill_Effect_CURSE               Skill_Effect_Param = 27
	Skill_Effect_SHIELD              Skill_Effect_Param = 28
	Skill_Effect_CHARM               Skill_Effect_Param = 29
	Skill_Effect_CANCEL_STATUS       Skill_Effect_Param = 30
)

// Enum value maps for Skill_Effect_Param.
var (
	Skill_Effect_Param_name = map[int32]string{
		0:  "NONE",
		1:  "HP",
		2:  "PHY",
		3:  "INT",
		4:  "AGI",
		5:  "POISON",
		6:  "SLEEP",
		7:  "CONFUSION",
		8:  "FEAR",
		9:  "BARRIER",
		10: "BLEED",
		11: "CANCEL_CONFUSION",
		12: "CANCEL_FEAR",
		13: "STUN",
		14: "PHY_INT_HIGHER",
		15: "PHY_INT_LOWER",
		16: "PHY_INT_AGI_HIGHEST",
		17: "PHY_INT_AGI_LOWEST",
		18: "PROSTRATION",
		19: "DECOY",
		20: "CANCEL_BLEED",
		21: "CHARGE",
		22: "STATIC_HP",
		23: "STATIC_PHY",
		24: "STATIC_INT",
		25: "STATIC_AGI",
		26: "STATIC_CHARGE",
		27: "CURSE",
		28: "SHIELD",
		29: "CHARM",
		30: "CANCEL_STATUS",
	}
	Skill_Effect_Param_value = map[string]int32{
		"NONE":                0,
		"HP":                  1,
		"PHY":                 2,
		"INT":                 3,
		"AGI":                 4,
		"POISON":              5,
		"SLEEP":               6,
		"CONFUSION":           7,
		"FEAR":                8,
		"BARRIER":             9,
		"BLEED":               10,
		"CANCEL_CONFUSION":    11,
		"CANCEL_FEAR":         12,
		"STUN":                13,
		"PHY_INT_HIGHER":      14,
		"PHY_INT_LOWER":       15,
		"PHY_INT_AGI_HIGHEST": 16,
		"PHY_INT_AGI_LOWEST":  17,
		"PROSTRATION":         18,
		"DECOY":               19,
		"CANCEL_BLEED":        20,
		"CHARGE":              21,
		"STATIC_HP":           22,
		"STATIC_PHY":          23,
		"STATIC_INT":          24,
		"STATIC_AGI":          25,
		"STATIC_CHARGE":       26,
		"CURSE":               27,
		"SHIELD":              28,
		"CHARM":               29,
		"CANCEL_STATUS":       30,
	}
)

func (x Skill_Effect_Param) Enum() *Skill_Effect_Param {
	p := new(Skill_Effect_Param)
	*p = x
	return p
}

func (x Skill_Effect_Param) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Skill_Effect_Param) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[11].Descriptor()
}

func (Skill_Effect_Param) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[11]
}

func (x Skill_Effect_Param) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Skill_Effect_Param.Descriptor instead.
func (Skill_Effect_Param) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{10, 0, 1}
}

type Skill_Effect_Calc int32

const (
	Skill_Effect_MY_PHY                 Skill_Effect_Calc = 0
	Skill_Effect_MY_INT                 Skill_Effect_Calc = 1
	Skill_Effect_MY_AGI                 Skill_Effect_Calc = 2
	Skill_Effect_MY_INT_YOUR_PHY        Skill_Effect_Calc = 3 // 回復係数
	Skill_Effect_MY_DAMAGED_IN_ACTION   Skill_Effect_Calc = 4
	Skill_Effect_MY_MAX_HP              Skill_Effect_Calc = 5
	Skill_Effect_MY_DAMAGE              Skill_Effect_Calc = 6
	Skill_Effect_YOUR_PHY               Skill_Effect_Calc = 7
	Skill_Effect_YOUR_INT               Skill_Effect_Calc = 8
	Skill_Effect_YOUR_AGI               Skill_Effect_Calc = 9
	Skill_Effect_YOUR_PHY_BUFF          Skill_Effect_Calc = 10
	Skill_Effect_YOUR_INT_BUFF          Skill_Effect_Calc = 11
	Skill_Effect_YOUR_AGI_BUFF          Skill_Effect_Calc = 12
	Skill_Effect_YOUR_PHY_DEBUFF        Skill_Effect_Calc = 13
	Skill_Effect_YOUR_INT_DEBUFF        Skill_Effect_Calc = 14
	Skill_Effect_YOUR_AGI_DEBUFF        Skill_Effect_Calc = 15
	Skill_Effect_MY_PHY_BUFF            Skill_Effect_Calc = 16
	Skill_Effect_MY_INT_BUFF            Skill_Effect_Calc = 17
	Skill_Effect_MY_AGI_BUFF            Skill_Effect_Calc = 18
	Skill_Effect_MY_PHY_DEBUFF          Skill_Effect_Calc = 19
	Skill_Effect_MY_INT_DEBUFF          Skill_Effect_Calc = 20
	Skill_Effect_MY_AGI_DEBUFF          Skill_Effect_Calc = 21
	Skill_Effect_MY_TOTAL_BUFF          Skill_Effect_Calc = 22
	Skill_Effect_MY_TOTAL_DEBUFF        Skill_Effect_Calc = 23
	Skill_Effect_ALLY_TOTAL_BUFF        Skill_Effect_Calc = 24
	Skill_Effect_ALLY_TOTAL_DEBUFF      Skill_Effect_Calc = 25
	Skill_Effect_YOUR_TOTAL_BUFF        Skill_Effect_Calc = 26
	Skill_Effect_YOUR_TOTAL_DEBUFF      Skill_Effect_Calc = 27
	Skill_Effect_ENEMY_TOTAL_BUFF       Skill_Effect_Calc = 28
	Skill_Effect_ENEMY_TOTAL_DEBUFF     Skill_Effect_Calc = 29
	Skill_Effect_MY_PHY_YOUR_INT        Skill_Effect_Calc = 30
	Skill_Effect_ALLY_TOTAL_PHY_BUFF    Skill_Effect_Calc = 31
	Skill_Effect_ALLY_TOTAL_PHY_DEBUFF  Skill_Effect_Calc = 32
	Skill_Effect_ALLY_TOTAL_INT_BUFF    Skill_Effect_Calc = 33
	Skill_Effect_ALLY_TOTAL_INT_DEBUFF  Skill_Effect_Calc = 34
	Skill_Effect_ALLY_TOTAL_AGI_BUFF    Skill_Effect_Calc = 35
	Skill_Effect_ALLY_TOTAL_AGI_DEBUFF  Skill_Effect_Calc = 36
	Skill_Effect_ENEMY_TOTAL_PHY_BUFF   Skill_Effect_Calc = 37
	Skill_Effect_ENEMY_TOTAL_PHY_DEBUFF Skill_Effect_Calc = 38
	Skill_Effect_ENEMY_TOTAL_INT_BUFF   Skill_Effect_Calc = 39
	Skill_Effect_ENEMY_TOTAL_INT_DEBUFF Skill_Effect_Calc = 40
	Skill_Effect_ENEMY_TOTAL_AGI_BUFF   Skill_Effect_Calc = 41
	Skill_Effect_ENEMY_TOTAL_AGI_DEBUFF Skill_Effect_Calc = 42
	Skill_Effect_MY_SLEEP_PHY           Skill_Effect_Calc = 43
	Skill_Effect_MY_POISON_PHY          Skill_Effect_Calc = 44
	Skill_Effect_MY_BLEED_INT           Skill_Effect_Calc = 45
	Skill_Effect_MY_BARRIER_INT         Skill_Effect_Calc = 46
	Skill_Effect_MY_BLEED_INT_YOUR_PHY  Skill_Effect_Calc = 47 // 出血時回復係数
	Skill_Effect_YOUR_MAX_HP            Skill_Effect_Calc = 48
	Skill_Effect_MY_DECREASED_HP        Skill_Effect_Calc = 49
	Skill_Effect_YOUR_DECREASED_HP      Skill_Effect_Calc = 50
	Skill_Effect_MY_CHARGE              Skill_Effect_Calc = 51
	Skill_Effect_YOUR_CHARGE            Skill_Effect_Calc = 52
	Skill_Effect_STATIC                 Skill_Effect_Calc = 53
	Skill_Effect_MY_POISON_INT          Skill_Effect_Calc = 54
	Skill_Effect_MY_FEAR_INT            Skill_Effect_Calc = 55
	Skill_Effect_MY_FEAR_AGI            Skill_Effect_Calc = 56
	Skill_Effect_ALLY_LAST_HP           Skill_Effect_Calc = 57
	Skill_Effect_ALLY_LAST_PHY          Skill_Effect_Calc = 58
	Skill_Effect_ALLY_LAST_INT          Skill_Effect_Calc = 59
	Skill_Effect_ALLY_LAST_AGI          Skill_Effect_Calc = 60
	Skill_Effect_ALLY_FIRST_HP          Skill_Effect_Calc = 61
	Skill_Effect_ALLY_FIRST_PHY         Skill_Effect_Calc = 62
	Skill_Effect_ALLY_FIRST_INT         Skill_Effect_Calc = 63
	Skill_Effect_ALLY_FIRST_AGI         Skill_Effect_Calc = 64
	Skill_Effect_ALLY_MIDDLE_HP         Skill_Effect_Calc = 65
	Skill_Effect_ALLY_MIDDLE_PHY        Skill_Effect_Calc = 66
	Skill_Effect_ALLY_MIDDLE_INT        Skill_Effect_Calc = 67
	Skill_Effect_ALLY_MIDDLE_AGI        Skill_Effect_Calc = 68
	Skill_Effect_ALLY_TOTAL_HP          Skill_Effect_Calc = 69
	Skill_Effect_ALLY_TOTAL_PHY         Skill_Effect_Calc = 70
	Skill_Effect_ALLY_TOTAL_INT         Skill_Effect_Calc = 71
	Skill_Effect_ALLY_TOTAL_AGI         Skill_Effect_Calc = 72
	Skill_Effect_ENEMY_LAST_HP          Skill_Effect_Calc = 73
	Skill_Effect_ENEMY_LAST_PHY         Skill_Effect_Calc = 74
	Skill_Effect_ENEMY_LAST_INT         Skill_Effect_Calc = 75
	Skill_Effect_ENEMY_LAST_AGI         Skill_Effect_Calc = 76
	Skill_Effect_ENEMY_FIRST_HP         Skill_Effect_Calc = 77
	Skill_Effect_ENEMY_FIRST_PHY        Skill_Effect_Calc = 78
	Skill_Effect_ENEMY_FIRST_INT        Skill_Effect_Calc = 79
	Skill_Effect_ENEMY_FIRST_AGI        Skill_Effect_Calc = 80
	Skill_Effect_ENEMY_MIDDLE_HP        Skill_Effect_Calc = 81
	Skill_Effect_ENEMY_MIDDLE_PHY       Skill_Effect_Calc = 82
	Skill_Effect_ENEMY_MIDDLE_INT       Skill_Effect_Calc = 83
	Skill_Effect_ENEMY_MIDDLE_AGI       Skill_Effect_Calc = 84
	Skill_Effect_ENEMY_TOTAL_HP         Skill_Effect_Calc = 85
	Skill_Effect_ENEMY_TOTAL_PHY        Skill_Effect_Calc = 86
	Skill_Effect_ENEMY_TOTAL_INT        Skill_Effect_Calc = 87
	Skill_Effect_ENEMY_TOTAL_AGI        Skill_Effect_Calc = 88
	Skill_Effect_MY_RECOVERED_IN_ACTION Skill_Effect_Calc = 89
)

// Enum value maps for Skill_Effect_Calc.
var (
	Skill_Effect_Calc_name = map[int32]string{
		0:  "MY_PHY",
		1:  "MY_INT",
		2:  "MY_AGI",
		3:  "MY_INT_YOUR_PHY",
		4:  "MY_DAMAGED_IN_ACTION",
		5:  "MY_MAX_HP",
		6:  "MY_DAMAGE",
		7:  "YOUR_PHY",
		8:  "YOUR_INT",
		9:  "YOUR_AGI",
		10: "YOUR_PHY_BUFF",
		11: "YOUR_INT_BUFF",
		12: "YOUR_AGI_BUFF",
		13: "YOUR_PHY_DEBUFF",
		14: "YOUR_INT_DEBUFF",
		15: "YOUR_AGI_DEBUFF",
		16: "MY_PHY_BUFF",
		17: "MY_INT_BUFF",
		18: "MY_AGI_BUFF",
		19: "MY_PHY_DEBUFF",
		20: "MY_INT_DEBUFF",
		21: "MY_AGI_DEBUFF",
		22: "MY_TOTAL_BUFF",
		23: "MY_TOTAL_DEBUFF",
		24: "ALLY_TOTAL_BUFF",
		25: "ALLY_TOTAL_DEBUFF",
		26: "YOUR_TOTAL_BUFF",
		27: "YOUR_TOTAL_DEBUFF",
		28: "ENEMY_TOTAL_BUFF",
		29: "ENEMY_TOTAL_DEBUFF",
		30: "MY_PHY_YOUR_INT",
		31: "ALLY_TOTAL_PHY_BUFF",
		32: "ALLY_TOTAL_PHY_DEBUFF",
		33: "ALLY_TOTAL_INT_BUFF",
		34: "ALLY_TOTAL_INT_DEBUFF",
		35: "ALLY_TOTAL_AGI_BUFF",
		36: "ALLY_TOTAL_AGI_DEBUFF",
		37: "ENEMY_TOTAL_PHY_BUFF",
		38: "ENEMY_TOTAL_PHY_DEBUFF",
		39: "ENEMY_TOTAL_INT_BUFF",
		40: "ENEMY_TOTAL_INT_DEBUFF",
		41: "ENEMY_TOTAL_AGI_BUFF",
		42: "ENEMY_TOTAL_AGI_DEBUFF",
		43: "MY_SLEEP_PHY",
		44: "MY_POISON_PHY",
		45: "MY_BLEED_INT",
		46: "MY_BARRIER_INT",
		47: "MY_BLEED_INT_YOUR_PHY",
		48: "YOUR_MAX_HP",
		49: "MY_DECREASED_HP",
		50: "YOUR_DECREASED_HP",
		51: "MY_CHARGE",
		52: "YOUR_CHARGE",
		53: "STATIC",
		54: "MY_POISON_INT",
		55: "MY_FEAR_INT",
		56: "MY_FEAR_AGI",
		57: "ALLY_LAST_HP",
		58: "ALLY_LAST_PHY",
		59: "ALLY_LAST_INT",
		60: "ALLY_LAST_AGI",
		61: "ALLY_FIRST_HP",
		62: "ALLY_FIRST_PHY",
		63: "ALLY_FIRST_INT",
		64: "ALLY_FIRST_AGI",
		65: "ALLY_MIDDLE_HP",
		66: "ALLY_MIDDLE_PHY",
		67: "ALLY_MIDDLE_INT",
		68: "ALLY_MIDDLE_AGI",
		69: "ALLY_TOTAL_HP",
		70: "ALLY_TOTAL_PHY",
		71: "ALLY_TOTAL_INT",
		72: "ALLY_TOTAL_AGI",
		73: "ENEMY_LAST_HP",
		74: "ENEMY_LAST_PHY",
		75: "ENEMY_LAST_INT",
		76: "ENEMY_LAST_AGI",
		77: "ENEMY_FIRST_HP",
		78: "ENEMY_FIRST_PHY",
		79: "ENEMY_FIRST_INT",
		80: "ENEMY_FIRST_AGI",
		81: "ENEMY_MIDDLE_HP",
		82: "ENEMY_MIDDLE_PHY",
		83: "ENEMY_MIDDLE_INT",
		84: "ENEMY_MIDDLE_AGI",
		85: "ENEMY_TOTAL_HP",
		86: "ENEMY_TOTAL_PHY",
		87: "ENEMY_TOTAL_INT",
		88: "ENEMY_TOTAL_AGI",
		89: "MY_RECOVERED_IN_ACTION",
	}
	Skill_Effect_Calc_value = map[string]int32{
		"MY_PHY":                 0,
		"MY_INT":                 1,
		"MY_AGI":                 2,
		"MY_INT_YOUR_PHY":        3,
		"MY_DAMAGED_IN_ACTION":   4,
		"MY_MAX_HP":              5,
		"MY_DAMAGE":              6,
		"YOUR_PHY":               7,
		"YOUR_INT":               8,
		"YOUR_AGI":               9,
		"YOUR_PHY_BUFF":          10,
		"YOUR_INT_BUFF":          11,
		"YOUR_AGI_BUFF":          12,
		"YOUR_PHY_DEBUFF":        13,
		"YOUR_INT_DEBUFF":        14,
		"YOUR_AGI_DEBUFF":        15,
		"MY_PHY_BUFF":            16,
		"MY_INT_BUFF":            17,
		"MY_AGI_BUFF":            18,
		"MY_PHY_DEBUFF":          19,
		"MY_INT_DEBUFF":          20,
		"MY_AGI_DEBUFF":          21,
		"MY_TOTAL_BUFF":          22,
		"MY_TOTAL_DEBUFF":        23,
		"ALLY_TOTAL_BUFF":        24,
		"ALLY_TOTAL_DEBUFF":      25,
		"YOUR_TOTAL_BUFF":        26,
		"YOUR_TOTAL_DEBUFF":      27,
		"ENEMY_TOTAL_BUFF":       28,
		"ENEMY_TOTAL_DEBUFF":     29,
		"MY_PHY_YOUR_INT":        30,
		"ALLY_TOTAL_PHY_BUFF":    31,
		"ALLY_TOTAL_PHY_DEBUFF":  32,
		"ALLY_TOTAL_INT_BUFF":    33,
		"ALLY_TOTAL_INT_DEBUFF":  34,
		"ALLY_TOTAL_AGI_BUFF":    35,
		"ALLY_TOTAL_AGI_DEBUFF":  36,
		"ENEMY_TOTAL_PHY_BUFF":   37,
		"ENEMY_TOTAL_PHY_DEBUFF": 38,
		"ENEMY_TOTAL_INT_BUFF":   39,
		"ENEMY_TOTAL_INT_DEBUFF": 40,
		"ENEMY_TOTAL_AGI_BUFF":   41,
		"ENEMY_TOTAL_AGI_DEBUFF": 42,
		"MY_SLEEP_PHY":           43,
		"MY_POISON_PHY":          44,
		"MY_BLEED_INT":           45,
		"MY_BARRIER_INT":         46,
		"MY_BLEED_INT_YOUR_PHY":  47,
		"YOUR_MAX_HP":            48,
		"MY_DECREASED_HP":        49,
		"YOUR_DECREASED_HP":      50,
		"MY_CHARGE":              51,
		"YOUR_CHARGE":            52,
		"STATIC":                 53,
		"MY_POISON_INT":          54,
		"MY_FEAR_INT":            55,
		"MY_FEAR_AGI":            56,
		"ALLY_LAST_HP":           57,
		"ALLY_LAST_PHY":          58,
		"ALLY_LAST_INT":          59,
		"ALLY_LAST_AGI":          60,
		"ALLY_FIRST_HP":          61,
		"ALLY_FIRST_PHY":         62,
		"ALLY_FIRST_INT":         63,
		"ALLY_FIRST_AGI":         64,
		"ALLY_MIDDLE_HP":         65,
		"ALLY_MIDDLE_PHY":        66,
		"ALLY_MIDDLE_INT":        67,
		"ALLY_MIDDLE_AGI":        68,
		"ALLY_TOTAL_HP":          69,
		"ALLY_TOTAL_PHY":         70,
		"ALLY_TOTAL_INT":         71,
		"ALLY_TOTAL_AGI":         72,
		"ENEMY_LAST_HP":          73,
		"ENEMY_LAST_PHY":         74,
		"ENEMY_LAST_INT":         75,
		"ENEMY_LAST_AGI":         76,
		"ENEMY_FIRST_HP":         77,
		"ENEMY_FIRST_PHY":        78,
		"ENEMY_FIRST_INT":        79,
		"ENEMY_FIRST_AGI":        80,
		"ENEMY_MIDDLE_HP":        81,
		"ENEMY_MIDDLE_PHY":       82,
		"ENEMY_MIDDLE_INT":       83,
		"ENEMY_MIDDLE_AGI":       84,
		"ENEMY_TOTAL_HP":         85,
		"ENEMY_TOTAL_PHY":        86,
		"ENEMY_TOTAL_INT":        87,
		"ENEMY_TOTAL_AGI":        88,
		"MY_RECOVERED_IN_ACTION": 89,
	}
)

func (x Skill_Effect_Calc) Enum() *Skill_Effect_Calc {
	p := new(Skill_Effect_Calc)
	*p = x
	return p
}

func (x Skill_Effect_Calc) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Skill_Effect_Calc) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[12].Descriptor()
}

func (Skill_Effect_Calc) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[12]
}

func (x Skill_Effect_Calc) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Skill_Effect_Calc.Descriptor instead.
func (Skill_Effect_Calc) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{10, 0, 2}
}

type Skill_Effect_AdditionalCalc int32

const (
	Skill_Effect_NO_ADDITIONAL    Skill_Effect_AdditionalCalc = 0
	Skill_Effect_POISON_UNIT      Skill_Effect_AdditionalCalc = 1
	Skill_Effect_SLEEP_UNIT       Skill_Effect_AdditionalCalc = 2
	Skill_Effect_CONFUSION_UNIT   Skill_Effect_AdditionalCalc = 3
	Skill_Effect_FEAR_UNIT        Skill_Effect_AdditionalCalc = 4
	Skill_Effect_BARRIER_UNIT     Skill_Effect_AdditionalCalc = 5
	Skill_Effect_BLEED_UNIT       Skill_Effect_AdditionalCalc = 6
	Skill_Effect_STUN_UNIT        Skill_Effect_AdditionalCalc = 7
	Skill_Effect_PROSTRATION_UNIT Skill_Effect_AdditionalCalc = 8
	Skill_Effect_CURSE_UNIT       Skill_Effect_AdditionalCalc = 9
	Skill_Effect_CHARM_UNIT       Skill_Effect_AdditionalCalc = 10
	Skill_Effect_DECOY_UNIT       Skill_Effect_AdditionalCalc = 11
)

// Enum value maps for Skill_Effect_AdditionalCalc.
var (
	Skill_Effect_AdditionalCalc_name = map[int32]string{
		0:  "NO_ADDITIONAL",
		1:  "POISON_UNIT",
		2:  "SLEEP_UNIT",
		3:  "CONFUSION_UNIT",
		4:  "FEAR_UNIT",
		5:  "BARRIER_UNIT",
		6:  "BLEED_UNIT",
		7:  "STUN_UNIT",
		8:  "PROSTRATION_UNIT",
		9:  "CURSE_UNIT",
		10: "CHARM_UNIT",
		11: "DECOY_UNIT",
	}
	Skill_Effect_AdditionalCalc_value = map[string]int32{
		"NO_ADDITIONAL":    0,
		"POISON_UNIT":      1,
		"SLEEP_UNIT":       2,
		"CONFUSION_UNIT":   3,
		"FEAR_UNIT":        4,
		"BARRIER_UNIT":     5,
		"BLEED_UNIT":       6,
		"STUN_UNIT":        7,
		"PROSTRATION_UNIT": 8,
		"CURSE_UNIT":       9,
		"CHARM_UNIT":       10,
		"DECOY_UNIT":       11,
	}
)

func (x Skill_Effect_AdditionalCalc) Enum() *Skill_Effect_AdditionalCalc {
	p := new(Skill_Effect_AdditionalCalc)
	*p = x
	return p
}

func (x Skill_Effect_AdditionalCalc) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Skill_Effect_AdditionalCalc) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[13].Descriptor()
}

func (Skill_Effect_AdditionalCalc) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[13]
}

func (x Skill_Effect_AdditionalCalc) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Skill_Effect_AdditionalCalc.Descriptor instead.
func (Skill_Effect_AdditionalCalc) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{10, 0, 3}
}

type Aura_Condition int32

const (
	Aura_NONE               Aura_Condition = 0
	Aura_ACTIVE             Aura_Condition = 1
	Aura_OPENING            Aura_Condition = 2
	Aura_COUNTER            Aura_Condition = 3
	Aura_SELF_HP            Aura_Condition = 4
	Aura_ALLY_HP            Aura_Condition = 5
	Aura_DEATH              Aura_Condition = 6
	Aura_EVERY              Aura_Condition = 7
	Aura_ALLY               Aura_Condition = 8
	Aura_ENEMY              Aura_Condition = 9
	Aura_ALLY_FRONT         Aura_Condition = 10
	Aura_ALLY_MIDDLE        Aura_Condition = 11
	Aura_ALLY_BACK          Aura_Condition = 12
	Aura_ENEMY_FRONT        Aura_Condition = 13
	Aura_ENEMY_MIDDLE       Aura_Condition = 14
	Aura_ENEMY_BACK         Aura_Condition = 15
	Aura_ENEMY_FIRST        Aura_Condition = 16
	Aura_ENEMY_LAST         Aura_Condition = 17
	Aura_SELF_PARAM_UNDER   Aura_Condition = 18
	Aura_SELF_PARAM_OVER    Aura_Condition = 19
	Aura_ENEMY_PARAM_UNDER  Aura_Condition = 20
	Aura_ENEMY_PARAM_OVER   Aura_Condition = 21
	Aura_ENEMY_HP           Aura_Condition = 22
	Aura_QUEST_AURA         Aura_Condition = 23
	Aura_MINING_AURA        Aura_Condition = 24
	Aura_UNIQUE_PASSIVE     Aura_Condition = 25
	Aura_UNIQUE_EDIT        Aura_Condition = 26
	Aura_PASSIVE_ADDITION   Aura_Condition = 27
	Aura_ALLY_DEATH         Aura_Condition = 28
	Aura_ACTIVE_ALLY_ONE_HP Aura_Condition = 29
	Aura_STATUS_CONFUSION   Aura_Condition = 30
	Aura_ACTIVE_ALLY_HP     Aura_Condition = 31
	Aura_ACTIVE_COUNTER     Aura_Condition = 32
	Aura_AURA               Aura_Condition = 33
)

// Enum value maps for Aura_Condition.
var (
	Aura_Condition_name = map[int32]string{
		0:  "NONE",
		1:  "ACTIVE",
		2:  "OPENING",
		3:  "COUNTER",
		4:  "SELF_HP",
		5:  "ALLY_HP",
		6:  "DEATH",
		7:  "EVERY",
		8:  "ALLY",
		9:  "ENEMY",
		10: "ALLY_FRONT",
		11: "ALLY_MIDDLE",
		12: "ALLY_BACK",
		13: "ENEMY_FRONT",
		14: "ENEMY_MIDDLE",
		15: "ENEMY_BACK",
		16: "ENEMY_FIRST",
		17: "ENEMY_LAST",
		18: "SELF_PARAM_UNDER",
		19: "SELF_PARAM_OVER",
		20: "ENEMY_PARAM_UNDER",
		21: "ENEMY_PARAM_OVER",
		22: "ENEMY_HP",
		23: "QUEST_AURA",
		24: "MINING_AURA",
		25: "UNIQUE_PASSIVE",
		26: "UNIQUE_EDIT",
		27: "PASSIVE_ADDITION",
		28: "ALLY_DEATH",
		29: "ACTIVE_ALLY_ONE_HP",
		30: "STATUS_CONFUSION",
		31: "ACTIVE_ALLY_HP",
		32: "ACTIVE_COUNTER",
		33: "AURA",
	}
	Aura_Condition_value = map[string]int32{
		"NONE":               0,
		"ACTIVE":             1,
		"OPENING":            2,
		"COUNTER":            3,
		"SELF_HP":            4,
		"ALLY_HP":            5,
		"DEATH":              6,
		"EVERY":              7,
		"ALLY":               8,
		"ENEMY":              9,
		"ALLY_FRONT":         10,
		"ALLY_MIDDLE":        11,
		"ALLY_BACK":          12,
		"ENEMY_FRONT":        13,
		"ENEMY_MIDDLE":       14,
		"ENEMY_BACK":         15,
		"ENEMY_FIRST":        16,
		"ENEMY_LAST":         17,
		"SELF_PARAM_UNDER":   18,
		"SELF_PARAM_OVER":    19,
		"ENEMY_PARAM_UNDER":  20,
		"ENEMY_PARAM_OVER":   21,
		"ENEMY_HP":           22,
		"QUEST_AURA":         23,
		"MINING_AURA":        24,
		"UNIQUE_PASSIVE":     25,
		"UNIQUE_EDIT":        26,
		"PASSIVE_ADDITION":   27,
		"ALLY_DEATH":         28,
		"ACTIVE_ALLY_ONE_HP": 29,
		"STATUS_CONFUSION":   30,
		"ACTIVE_ALLY_HP":     31,
		"ACTIVE_COUNTER":     32,
		"AURA":               33,
	}
)

func (x Aura_Condition) Enum() *Aura_Condition {
	p := new(Aura_Condition)
	*p = x
	return p
}

func (x Aura_Condition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Aura_Condition) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[14].Descriptor()
}

func (Aura_Condition) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[14]
}

func (x Aura_Condition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Aura_Condition.Descriptor instead.
func (Aura_Condition) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{11, 0}
}

type Aura_Type int32

const (
	Aura_NORMAL           Aura_Type = 0
	Aura_EFFECT           Aura_Type = 1
	Aura_SECONDARY        Aura_Type = 2
	Aura_SECONDARY_EFFECT Aura_Type = 3
	Aura_CONDITION        Aura_Type = 4
)

// Enum value maps for Aura_Type.
var (
	Aura_Type_name = map[int32]string{
		0: "NORMAL",
		1: "EFFECT",
		2: "SECONDARY",
		3: "SECONDARY_EFFECT",
		4: "CONDITION",
	}
	Aura_Type_value = map[string]int32{
		"NORMAL":           0,
		"EFFECT":           1,
		"SECONDARY":        2,
		"SECONDARY_EFFECT": 3,
		"CONDITION":        4,
	}
)

func (x Aura_Type) Enum() *Aura_Type {
	p := new(Aura_Type)
	*p = x
	return p
}

func (x Aura_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Aura_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[15].Descriptor()
}

func (Aura_Type) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[15]
}

func (x Aura_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Aura_Type.Descriptor instead.
func (Aura_Type) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{11, 1}
}

type Aura_Effect_Target int32

const (
	Aura_Effect_SELF                  Aura_Effect_Target = 0
	Aura_Effect_ENEMY_FIRST           Aura_Effect_Target = 1
	Aura_Effect_ENEMY_ALL             Aura_Effect_Target = 2
	Aura_Effect_ALLY_FIRST            Aura_Effect_Target = 3
	Aura_Effect_ALLY_ALL              Aura_Effect_Target = 4
	Aura_Effect_ALLY_LOWEST_HP        Aura_Effect_Target = 5
	Aura_Effect_RANDOM                Aura_Effect_Target = 6
	Aura_Effect_ENEMY_HIGHEST_HP      Aura_Effect_Target = 7
	Aura_Effect_ENEMY_LOWEST_HP       Aura_Effect_Target = 8
	Aura_Effect_ENEMY_HIGHEST_PHY     Aura_Effect_Target = 9
	Aura_Effect_ENEMY_LOWEST_PHY      Aura_Effect_Target = 10
	Aura_Effect_ENEMY_HIGHEST_INT     Aura_Effect_Target = 11
	Aura_Effect_ENEMY_LOWEST_INT      Aura_Effect_Target = 12
	Aura_Effect_ENEMY_HIGHEST_AGI     Aura_Effect_Target = 13
	Aura_Effect_ENEMY_LOWEST_AGI      Aura_Effect_Target = 14
	Aura_Effect_ENEMY_LAST            Aura_Effect_Target = 15
	Aura_Effect_ENEMY_FRONT           Aura_Effect_Target = 16
	Aura_Effect_ENEMY_MIDDLE          Aura_Effect_Target = 17
	Aura_Effect_ENEMY_BACK            Aura_Effect_Target = 18
	Aura_Effect_ALLY_HIGHEST_HP       Aura_Effect_Target = 19
	Aura_Effect_ALLY_HIGHEST_PHY      Aura_Effect_Target = 20
	Aura_Effect_ALLY_LOWEST_PHY       Aura_Effect_Target = 21
	Aura_Effect_ALLY_HIGHEST_INT      Aura_Effect_Target = 22
	Aura_Effect_ALLY_LOWEST_INT       Aura_Effect_Target = 23
	Aura_Effect_ALLY_HIGHEST_AGI      Aura_Effect_Target = 24
	Aura_Effect_ALLY_LOWEST_AGI       Aura_Effect_Target = 25
	Aura_Effect_ALLY_LAST             Aura_Effect_Target = 26
	Aura_Effect_ALLY_HIGHEST_BASE_HP  Aura_Effect_Target = 27
	Aura_Effect_ALLY_LOWEST_BASE_HP   Aura_Effect_Target = 28
	Aura_Effect_ENEMY_HIGHEST_BASE_HP Aura_Effect_Target = 29
	Aura_Effect_ENEMY_LOWEST_BASE_HP  Aura_Effect_Target = 30
	Aura_Effect_ALLY_MIDDLE           Aura_Effect_Target = 31
	Aura_Effect_ALLY_FRONT            Aura_Effect_Target = 32
	Aura_Effect_ALLY_BACK             Aura_Effect_Target = 33
	Aura_Effect_ALLY_DEATH            Aura_Effect_Target = 34
	Aura_Effect_TARGET                Aura_Effect_Target = 35
	Aura_Effect_DAMAGED_IN_ACTION     Aura_Effect_Target = 36
	Aura_Effect_ALL                   Aura_Effect_Target = 37
)

// Enum value maps for Aura_Effect_Target.
var (
	Aura_Effect_Target_name = map[int32]string{
		0:  "SELF",
		1:  "ENEMY_FIRST",
		2:  "ENEMY_ALL",
		3:  "ALLY_FIRST",
		4:  "ALLY_ALL",
		5:  "ALLY_LOWEST_HP",
		6:  "RANDOM",
		7:  "ENEMY_HIGHEST_HP",
		8:  "ENEMY_LOWEST_HP",
		9:  "ENEMY_HIGHEST_PHY",
		10: "ENEMY_LOWEST_PHY",
		11: "ENEMY_HIGHEST_INT",
		12: "ENEMY_LOWEST_INT",
		13: "ENEMY_HIGHEST_AGI",
		14: "ENEMY_LOWEST_AGI",
		15: "ENEMY_LAST",
		16: "ENEMY_FRONT",
		17: "ENEMY_MIDDLE",
		18: "ENEMY_BACK",
		19: "ALLY_HIGHEST_HP",
		20: "ALLY_HIGHEST_PHY",
		21: "ALLY_LOWEST_PHY",
		22: "ALLY_HIGHEST_INT",
		23: "ALLY_LOWEST_INT",
		24: "ALLY_HIGHEST_AGI",
		25: "ALLY_LOWEST_AGI",
		26: "ALLY_LAST",
		27: "ALLY_HIGHEST_BASE_HP",
		28: "ALLY_LOWEST_BASE_HP",
		29: "ENEMY_HIGHEST_BASE_HP",
		30: "ENEMY_LOWEST_BASE_HP",
		31: "ALLY_MIDDLE",
		32: "ALLY_FRONT",
		33: "ALLY_BACK",
		34: "ALLY_DEATH",
		35: "TARGET",
		36: "DAMAGED_IN_ACTION",
		37: "ALL",
	}
	Aura_Effect_Target_value = map[string]int32{
		"SELF":                  0,
		"ENEMY_FIRST":           1,
		"ENEMY_ALL":             2,
		"ALLY_FIRST":            3,
		"ALLY_ALL":              4,
		"ALLY_LOWEST_HP":        5,
		"RANDOM":                6,
		"ENEMY_HIGHEST_HP":      7,
		"ENEMY_LOWEST_HP":       8,
		"ENEMY_HIGHEST_PHY":     9,
		"ENEMY_LOWEST_PHY":      10,
		"ENEMY_HIGHEST_INT":     11,
		"ENEMY_LOWEST_INT":      12,
		"ENEMY_HIGHEST_AGI":     13,
		"ENEMY_LOWEST_AGI":      14,
		"ENEMY_LAST":            15,
		"ENEMY_FRONT":           16,
		"ENEMY_MIDDLE":          17,
		"ENEMY_BACK":            18,
		"ALLY_HIGHEST_HP":       19,
		"ALLY_HIGHEST_PHY":      20,
		"ALLY_LOWEST_PHY":       21,
		"ALLY_HIGHEST_INT":      22,
		"ALLY_LOWEST_INT":       23,
		"ALLY_HIGHEST_AGI":      24,
		"ALLY_LOWEST_AGI":       25,
		"ALLY_LAST":             26,
		"ALLY_HIGHEST_BASE_HP":  27,
		"ALLY_LOWEST_BASE_HP":   28,
		"ENEMY_HIGHEST_BASE_HP": 29,
		"ENEMY_LOWEST_BASE_HP":  30,
		"ALLY_MIDDLE":           31,
		"ALLY_FRONT":            32,
		"ALLY_BACK":             33,
		"ALLY_DEATH":            34,
		"TARGET":                35,
		"DAMAGED_IN_ACTION":     36,
		"ALL":                   37,
	}
)

func (x Aura_Effect_Target) Enum() *Aura_Effect_Target {
	p := new(Aura_Effect_Target)
	*p = x
	return p
}

func (x Aura_Effect_Target) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Aura_Effect_Target) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[16].Descriptor()
}

func (Aura_Effect_Target) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[16]
}

func (x Aura_Effect_Target) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Aura_Effect_Target.Descriptor instead.
func (Aura_Effect_Target) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{11, 0, 0}
}

type Aura_Effect_Param int32

const (
	Aura_Effect_NONE                Aura_Effect_Param = 0
	Aura_Effect_HP                  Aura_Effect_Param = 1
	Aura_Effect_PHY                 Aura_Effect_Param = 2
	Aura_Effect_INT                 Aura_Effect_Param = 3
	Aura_Effect_AGI                 Aura_Effect_Param = 4
	Aura_Effect_POISON              Aura_Effect_Param = 5
	Aura_Effect_SLEEP               Aura_Effect_Param = 6
	Aura_Effect_CONFUSION           Aura_Effect_Param = 7
	Aura_Effect_FEAR                Aura_Effect_Param = 8
	Aura_Effect_BARRIER             Aura_Effect_Param = 9
	Aura_Effect_BLEED               Aura_Effect_Param = 10
	Aura_Effect_CANCEL_CONFUSION    Aura_Effect_Param = 11
	Aura_Effect_CANCEL_FEAR         Aura_Effect_Param = 12
	Aura_Effect_STUN                Aura_Effect_Param = 13
	Aura_Effect_PHY_INT_HIGHER      Aura_Effect_Param = 14
	Aura_Effect_PHY_INT_LOWER       Aura_Effect_Param = 15
	Aura_Effect_PHY_INT_AGI_HIGHEST Aura_Effect_Param = 16
	Aura_Effect_PHY_INT_AGI_LOWEST  Aura_Effect_Param = 17
	Aura_Effect_PROSTRATION         Aura_Effect_Param = 18
	Aura_Effect_DECOY               Aura_Effect_Param = 19
	Aura_Effect_CANCEL_BLEED        Aura_Effect_Param = 20
	Aura_Effect_CHARGE              Aura_Effect_Param = 21
	Aura_Effect_STATIC_HP           Aura_Effect_Param = 22
	Aura_Effect_STATIC_PHY          Aura_Effect_Param = 23
	Aura_Effect_STATIC_INT          Aura_Effect_Param = 24
	Aura_Effect_STATIC_AGI          Aura_Effect_Param = 25
	Aura_Effect_STATIC_CHARGE       Aura_Effect_Param = 26
	Aura_Effect_CURSE               Aura_Effect_Param = 27
	Aura_Effect_SHIELD              Aura_Effect_Param = 28
	Aura_Effect_CHARM               Aura_Effect_Param = 29
	Aura_Effect_DAMAGE_CUT_AGI      Aura_Effect_Param = 30
	Aura_Effect_DAMAGE_CUT_HP       Aura_Effect_Param = 31
	Aura_Effect_CRITICAL_PHY        Aura_Effect_Param = 32
	Aura_Effect_CRITICAL_INT        Aura_Effect_Param = 33
	Aura_Effect_INITIAL_HP          Aura_Effect_Param = 34
	Aura_Effect_INITIAL_PHY         Aura_Effect_Param = 35
	Aura_Effect_INITIAL_INT         Aura_Effect_Param = 36
	Aura_Effect_INITIAL_AGI         Aura_Effect_Param = 37
	// PHY_INT_AGI = 38;
	Aura_Effect_INCREASE_DAMAGE_CUT   Aura_Effect_Param = 39
	Aura_Effect_RESURRECTION          Aura_Effect_Param = 40
	Aura_Effect_RESISTANCE_POISON     Aura_Effect_Param = 41
	Aura_Effect_RESISTANCE_CONFUSION  Aura_Effect_Param = 42
	Aura_Effect_RESISTANCE_FEAR       Aura_Effect_Param = 43
	Aura_Effect_RESISTANCE_STUN       Aura_Effect_Param = 44
	Aura_Effect_INFLICT_POISON        Aura_Effect_Param = 45
	Aura_Effect_RECOVERY_CONFUSION    Aura_Effect_Param = 46
	Aura_Effect_MY_ADD_PHY_DAMAGE     Aura_Effect_Param = 47
	Aura_Effect_MY_ADD_INT_DAMAGE     Aura_Effect_Param = 48
	Aura_Effect_MY_RECEIVE_PHY_DAMAGE Aura_Effect_Param = 49
	Aura_Effect_MY_RECEIVE_INT_DAMAGE Aura_Effect_Param = 50
)

// Enum value maps for Aura_Effect_Param.
var (
	Aura_Effect_Param_name = map[int32]string{
		0:  "NONE",
		1:  "HP",
		2:  "PHY",
		3:  "INT",
		4:  "AGI",
		5:  "POISON",
		6:  "SLEEP",
		7:  "CONFUSION",
		8:  "FEAR",
		9:  "BARRIER",
		10: "BLEED",
		11: "CANCEL_CONFUSION",
		12: "CANCEL_FEAR",
		13: "STUN",
		14: "PHY_INT_HIGHER",
		15: "PHY_INT_LOWER",
		16: "PHY_INT_AGI_HIGHEST",
		17: "PHY_INT_AGI_LOWEST",
		18: "PROSTRATION",
		19: "DECOY",
		20: "CANCEL_BLEED",
		21: "CHARGE",
		22: "STATIC_HP",
		23: "STATIC_PHY",
		24: "STATIC_INT",
		25: "STATIC_AGI",
		26: "STATIC_CHARGE",
		27: "CURSE",
		28: "SHIELD",
		29: "CHARM",
		30: "DAMAGE_CUT_AGI",
		31: "DAMAGE_CUT_HP",
		32: "CRITICAL_PHY",
		33: "CRITICAL_INT",
		34: "INITIAL_HP",
		35: "INITIAL_PHY",
		36: "INITIAL_INT",
		37: "INITIAL_AGI",
		39: "INCREASE_DAMAGE_CUT",
		40: "RESURRECTION",
		41: "RESISTANCE_POISON",
		42: "RESISTANCE_CONFUSION",
		43: "RESISTANCE_FEAR",
		44: "RESISTANCE_STUN",
		45: "INFLICT_POISON",
		46: "RECOVERY_CONFUSION",
		47: "MY_ADD_PHY_DAMAGE",
		48: "MY_ADD_INT_DAMAGE",
		49: "MY_RECEIVE_PHY_DAMAGE",
		50: "MY_RECEIVE_INT_DAMAGE",
	}
	Aura_Effect_Param_value = map[string]int32{
		"NONE":                  0,
		"HP":                    1,
		"PHY":                   2,
		"INT":                   3,
		"AGI":                   4,
		"POISON":                5,
		"SLEEP":                 6,
		"CONFUSION":             7,
		"FEAR":                  8,
		"BARRIER":               9,
		"BLEED":                 10,
		"CANCEL_CONFUSION":      11,
		"CANCEL_FEAR":           12,
		"STUN":                  13,
		"PHY_INT_HIGHER":        14,
		"PHY_INT_LOWER":         15,
		"PHY_INT_AGI_HIGHEST":   16,
		"PHY_INT_AGI_LOWEST":    17,
		"PROSTRATION":           18,
		"DECOY":                 19,
		"CANCEL_BLEED":          20,
		"CHARGE":                21,
		"STATIC_HP":             22,
		"STATIC_PHY":            23,
		"STATIC_INT":            24,
		"STATIC_AGI":            25,
		"STATIC_CHARGE":         26,
		"CURSE":                 27,
		"SHIELD":                28,
		"CHARM":                 29,
		"DAMAGE_CUT_AGI":        30,
		"DAMAGE_CUT_HP":         31,
		"CRITICAL_PHY":          32,
		"CRITICAL_INT":          33,
		"INITIAL_HP":            34,
		"INITIAL_PHY":           35,
		"INITIAL_INT":           36,
		"INITIAL_AGI":           37,
		"INCREASE_DAMAGE_CUT":   39,
		"RESURRECTION":          40,
		"RESISTANCE_POISON":     41,
		"RESISTANCE_CONFUSION":  42,
		"RESISTANCE_FEAR":       43,
		"RESISTANCE_STUN":       44,
		"INFLICT_POISON":        45,
		"RECOVERY_CONFUSION":    46,
		"MY_ADD_PHY_DAMAGE":     47,
		"MY_ADD_INT_DAMAGE":     48,
		"MY_RECEIVE_PHY_DAMAGE": 49,
		"MY_RECEIVE_INT_DAMAGE": 50,
	}
)

func (x Aura_Effect_Param) Enum() *Aura_Effect_Param {
	p := new(Aura_Effect_Param)
	*p = x
	return p
}

func (x Aura_Effect_Param) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Aura_Effect_Param) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[17].Descriptor()
}

func (Aura_Effect_Param) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[17]
}

func (x Aura_Effect_Param) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Aura_Effect_Param.Descriptor instead.
func (Aura_Effect_Param) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{11, 0, 1}
}

type Aura_Effect_Calc int32

const (
	Aura_Effect_MY_PHY                 Aura_Effect_Calc = 0
	Aura_Effect_MY_INT                 Aura_Effect_Calc = 1
	Aura_Effect_MY_AGI                 Aura_Effect_Calc = 2
	Aura_Effect_MY_INT_YOUR_PHY        Aura_Effect_Calc = 3 // 回復係数
	Aura_Effect_MY_DAMAGED_IN_ACTION   Aura_Effect_Calc = 4
	Aura_Effect_MY_MAX_HP              Aura_Effect_Calc = 5
	Aura_Effect_MY_DAMAGE              Aura_Effect_Calc = 6
	Aura_Effect_YOUR_PHY               Aura_Effect_Calc = 7
	Aura_Effect_YOUR_INT               Aura_Effect_Calc = 8
	Aura_Effect_YOUR_AGI               Aura_Effect_Calc = 9
	Aura_Effect_YOUR_PHY_BUFF          Aura_Effect_Calc = 10
	Aura_Effect_YOUR_INT_BUFF          Aura_Effect_Calc = 11
	Aura_Effect_YOUR_AGI_BUFF          Aura_Effect_Calc = 12
	Aura_Effect_YOUR_PHY_DEBUFF        Aura_Effect_Calc = 13
	Aura_Effect_YOUR_INT_DEBUFF        Aura_Effect_Calc = 14
	Aura_Effect_YOUR_AGI_DEBUFF        Aura_Effect_Calc = 15
	Aura_Effect_MY_PHY_BUFF            Aura_Effect_Calc = 16
	Aura_Effect_MY_INT_BUFF            Aura_Effect_Calc = 17
	Aura_Effect_MY_AGI_BUFF            Aura_Effect_Calc = 18
	Aura_Effect_MY_PHY_DEBUFF          Aura_Effect_Calc = 19
	Aura_Effect_MY_INT_DEBUFF          Aura_Effect_Calc = 20
	Aura_Effect_MY_AGI_DEBUFF          Aura_Effect_Calc = 21
	Aura_Effect_MY_TOTAL_BUFF          Aura_Effect_Calc = 22
	Aura_Effect_MY_TOTAL_DEBUFF        Aura_Effect_Calc = 23
	Aura_Effect_ALLY_TOTAL_BUFF        Aura_Effect_Calc = 24
	Aura_Effect_ALLY_TOTAL_DEBUFF      Aura_Effect_Calc = 25
	Aura_Effect_YOUR_TOTAL_BUFF        Aura_Effect_Calc = 26
	Aura_Effect_YOUR_TOTAL_DEBUFF      Aura_Effect_Calc = 27
	Aura_Effect_ENEMY_TOTAL_BUFF       Aura_Effect_Calc = 28
	Aura_Effect_ENEMY_TOTAL_DEBUFF     Aura_Effect_Calc = 29
	Aura_Effect_MY_PHY_YOUR_INT        Aura_Effect_Calc = 30
	Aura_Effect_ALLY_TOTAL_PHY_BUFF    Aura_Effect_Calc = 31
	Aura_Effect_ALLY_TOTAL_PHY_DEBUFF  Aura_Effect_Calc = 32
	Aura_Effect_ALLY_TOTAL_INT_BUFF    Aura_Effect_Calc = 33
	Aura_Effect_ALLY_TOTAL_INT_DEBUFF  Aura_Effect_Calc = 34
	Aura_Effect_ALLY_TOTAL_AGI_BUFF    Aura_Effect_Calc = 35
	Aura_Effect_ALLY_TOTAL_AGI_DEBUFF  Aura_Effect_Calc = 36
	Aura_Effect_ENEMY_TOTAL_PHY_BUFF   Aura_Effect_Calc = 37
	Aura_Effect_ENEMY_TOTAL_PHY_DEBUFF Aura_Effect_Calc = 38
	Aura_Effect_ENEMY_TOTAL_INT_BUFF   Aura_Effect_Calc = 39
	Aura_Effect_ENEMY_TOTAL_INT_DEBUFF Aura_Effect_Calc = 40
	Aura_Effect_ENEMY_TOTAL_AGI_BUFF   Aura_Effect_Calc = 41
	Aura_Effect_ENEMY_TOTAL_AGI_DEBUFF Aura_Effect_Calc = 42
	Aura_Effect_MY_SLEEP_PHY           Aura_Effect_Calc = 43
	Aura_Effect_MY_POISON_PHY          Aura_Effect_Calc = 44
	Aura_Effect_MY_BLEED_INT           Aura_Effect_Calc = 45
	Aura_Effect_MY_BARRIER_INT         Aura_Effect_Calc = 46
	Aura_Effect_MY_BLEED_INT_YOUR_PHY  Aura_Effect_Calc = 47 // 出血時回復係数
	Aura_Effect_YOUR_MAX_HP            Aura_Effect_Calc = 48
	Aura_Effect_MY_DECREASED_HP        Aura_Effect_Calc = 49
	Aura_Effect_YOUR_DECREASED_HP      Aura_Effect_Calc = 50
	Aura_Effect_MY_CHARGE              Aura_Effect_Calc = 51
	Aura_Effect_YOUR_CHARGE            Aura_Effect_Calc = 52
	Aura_Effect_STATIC                 Aura_Effect_Calc = 53
	Aura_Effect_MY_POISON_INT          Aura_Effect_Calc = 54
	Aura_Effect_MY_FEAR_INT            Aura_Effect_Calc = 55
	Aura_Effect_MY_FEAR_AGI            Aura_Effect_Calc = 56
	Aura_Effect_ALLY_LAST_HP           Aura_Effect_Calc = 57
	Aura_Effect_ALLY_LAST_PHY          Aura_Effect_Calc = 58
	Aura_Effect_ALLY_LAST_INT          Aura_Effect_Calc = 59
	Aura_Effect_ALLY_LAST_AGI          Aura_Effect_Calc = 60
	Aura_Effect_ALLY_FIRST_HP          Aura_Effect_Calc = 61
	Aura_Effect_ALLY_FIRST_PHY         Aura_Effect_Calc = 62
	Aura_Effect_ALLY_FIRST_INT         Aura_Effect_Calc = 63
	Aura_Effect_ALLY_FIRST_AGI         Aura_Effect_Calc = 64
	Aura_Effect_ALLY_MIDDLE_HP         Aura_Effect_Calc = 65
	Aura_Effect_ALLY_MIDDLE_PHY        Aura_Effect_Calc = 66
	Aura_Effect_ALLY_MIDDLE_INT        Aura_Effect_Calc = 67
	Aura_Effect_ALLY_MIDDLE_AGI        Aura_Effect_Calc = 68
	Aura_Effect_ALLY_TOTAL_HP          Aura_Effect_Calc = 69
	Aura_Effect_ALLY_TOTAL_PHY         Aura_Effect_Calc = 70
	Aura_Effect_ALLY_TOTAL_INT         Aura_Effect_Calc = 71
	Aura_Effect_ALLY_TOTAL_AGI         Aura_Effect_Calc = 72
	Aura_Effect_ENEMY_LAST_HP          Aura_Effect_Calc = 73
	Aura_Effect_ENEMY_LAST_PHY         Aura_Effect_Calc = 74
	Aura_Effect_ENEMY_LAST_INT         Aura_Effect_Calc = 75
	Aura_Effect_ENEMY_LAST_AGI         Aura_Effect_Calc = 76
	Aura_Effect_ENEMY_FIRST_HP         Aura_Effect_Calc = 77
	Aura_Effect_ENEMY_FIRST_PHY        Aura_Effect_Calc = 78
	Aura_Effect_ENEMY_FIRST_INT        Aura_Effect_Calc = 79
	Aura_Effect_ENEMY_FIRST_AGI        Aura_Effect_Calc = 80
	Aura_Effect_ENEMY_MIDDLE_HP        Aura_Effect_Calc = 81
	Aura_Effect_ENEMY_MIDDLE_PHY       Aura_Effect_Calc = 82
	Aura_Effect_ENEMY_MIDDLE_INT       Aura_Effect_Calc = 83
	Aura_Effect_ENEMY_MIDDLE_AGI       Aura_Effect_Calc = 84
	Aura_Effect_ENEMY_TOTAL_HP         Aura_Effect_Calc = 85
	Aura_Effect_ENEMY_TOTAL_PHY        Aura_Effect_Calc = 86
	Aura_Effect_ENEMY_TOTAL_INT        Aura_Effect_Calc = 87
	Aura_Effect_ENEMY_TOTAL_AGI        Aura_Effect_Calc = 88
	Aura_Effect_MY_RECOVERED_IN_ACTION Aura_Effect_Calc = 89
)

// Enum value maps for Aura_Effect_Calc.
var (
	Aura_Effect_Calc_name = map[int32]string{
		0:  "MY_PHY",
		1:  "MY_INT",
		2:  "MY_AGI",
		3:  "MY_INT_YOUR_PHY",
		4:  "MY_DAMAGED_IN_ACTION",
		5:  "MY_MAX_HP",
		6:  "MY_DAMAGE",
		7:  "YOUR_PHY",
		8:  "YOUR_INT",
		9:  "YOUR_AGI",
		10: "YOUR_PHY_BUFF",
		11: "YOUR_INT_BUFF",
		12: "YOUR_AGI_BUFF",
		13: "YOUR_PHY_DEBUFF",
		14: "YOUR_INT_DEBUFF",
		15: "YOUR_AGI_DEBUFF",
		16: "MY_PHY_BUFF",
		17: "MY_INT_BUFF",
		18: "MY_AGI_BUFF",
		19: "MY_PHY_DEBUFF",
		20: "MY_INT_DEBUFF",
		21: "MY_AGI_DEBUFF",
		22: "MY_TOTAL_BUFF",
		23: "MY_TOTAL_DEBUFF",
		24: "ALLY_TOTAL_BUFF",
		25: "ALLY_TOTAL_DEBUFF",
		26: "YOUR_TOTAL_BUFF",
		27: "YOUR_TOTAL_DEBUFF",
		28: "ENEMY_TOTAL_BUFF",
		29: "ENEMY_TOTAL_DEBUFF",
		30: "MY_PHY_YOUR_INT",
		31: "ALLY_TOTAL_PHY_BUFF",
		32: "ALLY_TOTAL_PHY_DEBUFF",
		33: "ALLY_TOTAL_INT_BUFF",
		34: "ALLY_TOTAL_INT_DEBUFF",
		35: "ALLY_TOTAL_AGI_BUFF",
		36: "ALLY_TOTAL_AGI_DEBUFF",
		37: "ENEMY_TOTAL_PHY_BUFF",
		38: "ENEMY_TOTAL_PHY_DEBUFF",
		39: "ENEMY_TOTAL_INT_BUFF",
		40: "ENEMY_TOTAL_INT_DEBUFF",
		41: "ENEMY_TOTAL_AGI_BUFF",
		42: "ENEMY_TOTAL_AGI_DEBUFF",
		43: "MY_SLEEP_PHY",
		44: "MY_POISON_PHY",
		45: "MY_BLEED_INT",
		46: "MY_BARRIER_INT",
		47: "MY_BLEED_INT_YOUR_PHY",
		48: "YOUR_MAX_HP",
		49: "MY_DECREASED_HP",
		50: "YOUR_DECREASED_HP",
		51: "MY_CHARGE",
		52: "YOUR_CHARGE",
		53: "STATIC",
		54: "MY_POISON_INT",
		55: "MY_FEAR_INT",
		56: "MY_FEAR_AGI",
		57: "ALLY_LAST_HP",
		58: "ALLY_LAST_PHY",
		59: "ALLY_LAST_INT",
		60: "ALLY_LAST_AGI",
		61: "ALLY_FIRST_HP",
		62: "ALLY_FIRST_PHY",
		63: "ALLY_FIRST_INT",
		64: "ALLY_FIRST_AGI",
		65: "ALLY_MIDDLE_HP",
		66: "ALLY_MIDDLE_PHY",
		67: "ALLY_MIDDLE_INT",
		68: "ALLY_MIDDLE_AGI",
		69: "ALLY_TOTAL_HP",
		70: "ALLY_TOTAL_PHY",
		71: "ALLY_TOTAL_INT",
		72: "ALLY_TOTAL_AGI",
		73: "ENEMY_LAST_HP",
		74: "ENEMY_LAST_PHY",
		75: "ENEMY_LAST_INT",
		76: "ENEMY_LAST_AGI",
		77: "ENEMY_FIRST_HP",
		78: "ENEMY_FIRST_PHY",
		79: "ENEMY_FIRST_INT",
		80: "ENEMY_FIRST_AGI",
		81: "ENEMY_MIDDLE_HP",
		82: "ENEMY_MIDDLE_PHY",
		83: "ENEMY_MIDDLE_INT",
		84: "ENEMY_MIDDLE_AGI",
		85: "ENEMY_TOTAL_HP",
		86: "ENEMY_TOTAL_PHY",
		87: "ENEMY_TOTAL_INT",
		88: "ENEMY_TOTAL_AGI",
		89: "MY_RECOVERED_IN_ACTION",
	}
	Aura_Effect_Calc_value = map[string]int32{
		"MY_PHY":                 0,
		"MY_INT":                 1,
		"MY_AGI":                 2,
		"MY_INT_YOUR_PHY":        3,
		"MY_DAMAGED_IN_ACTION":   4,
		"MY_MAX_HP":              5,
		"MY_DAMAGE":              6,
		"YOUR_PHY":               7,
		"YOUR_INT":               8,
		"YOUR_AGI":               9,
		"YOUR_PHY_BUFF":          10,
		"YOUR_INT_BUFF":          11,
		"YOUR_AGI_BUFF":          12,
		"YOUR_PHY_DEBUFF":        13,
		"YOUR_INT_DEBUFF":        14,
		"YOUR_AGI_DEBUFF":        15,
		"MY_PHY_BUFF":            16,
		"MY_INT_BUFF":            17,
		"MY_AGI_BUFF":            18,
		"MY_PHY_DEBUFF":          19,
		"MY_INT_DEBUFF":          20,
		"MY_AGI_DEBUFF":          21,
		"MY_TOTAL_BUFF":          22,
		"MY_TOTAL_DEBUFF":        23,
		"ALLY_TOTAL_BUFF":        24,
		"ALLY_TOTAL_DEBUFF":      25,
		"YOUR_TOTAL_BUFF":        26,
		"YOUR_TOTAL_DEBUFF":      27,
		"ENEMY_TOTAL_BUFF":       28,
		"ENEMY_TOTAL_DEBUFF":     29,
		"MY_PHY_YOUR_INT":        30,
		"ALLY_TOTAL_PHY_BUFF":    31,
		"ALLY_TOTAL_PHY_DEBUFF":  32,
		"ALLY_TOTAL_INT_BUFF":    33,
		"ALLY_TOTAL_INT_DEBUFF":  34,
		"ALLY_TOTAL_AGI_BUFF":    35,
		"ALLY_TOTAL_AGI_DEBUFF":  36,
		"ENEMY_TOTAL_PHY_BUFF":   37,
		"ENEMY_TOTAL_PHY_DEBUFF": 38,
		"ENEMY_TOTAL_INT_BUFF":   39,
		"ENEMY_TOTAL_INT_DEBUFF": 40,
		"ENEMY_TOTAL_AGI_BUFF":   41,
		"ENEMY_TOTAL_AGI_DEBUFF": 42,
		"MY_SLEEP_PHY":           43,
		"MY_POISON_PHY":          44,
		"MY_BLEED_INT":           45,
		"MY_BARRIER_INT":         46,
		"MY_BLEED_INT_YOUR_PHY":  47,
		"YOUR_MAX_HP":            48,
		"MY_DECREASED_HP":        49,
		"YOUR_DECREASED_HP":      50,
		"MY_CHARGE":              51,
		"YOUR_CHARGE":            52,
		"STATIC":                 53,
		"MY_POISON_INT":          54,
		"MY_FEAR_INT":            55,
		"MY_FEAR_AGI":            56,
		"ALLY_LAST_HP":           57,
		"ALLY_LAST_PHY":          58,
		"ALLY_LAST_INT":          59,
		"ALLY_LAST_AGI":          60,
		"ALLY_FIRST_HP":          61,
		"ALLY_FIRST_PHY":         62,
		"ALLY_FIRST_INT":         63,
		"ALLY_FIRST_AGI":         64,
		"ALLY_MIDDLE_HP":         65,
		"ALLY_MIDDLE_PHY":        66,
		"ALLY_MIDDLE_INT":        67,
		"ALLY_MIDDLE_AGI":        68,
		"ALLY_TOTAL_HP":          69,
		"ALLY_TOTAL_PHY":         70,
		"ALLY_TOTAL_INT":         71,
		"ALLY_TOTAL_AGI":         72,
		"ENEMY_LAST_HP":          73,
		"ENEMY_LAST_PHY":         74,
		"ENEMY_LAST_INT":         75,
		"ENEMY_LAST_AGI":         76,
		"ENEMY_FIRST_HP":         77,
		"ENEMY_FIRST_PHY":        78,
		"ENEMY_FIRST_INT":        79,
		"ENEMY_FIRST_AGI":        80,
		"ENEMY_MIDDLE_HP":        81,
		"ENEMY_MIDDLE_PHY":       82,
		"ENEMY_MIDDLE_INT":       83,
		"ENEMY_MIDDLE_AGI":       84,
		"ENEMY_TOTAL_HP":         85,
		"ENEMY_TOTAL_PHY":        86,
		"ENEMY_TOTAL_INT":        87,
		"ENEMY_TOTAL_AGI":        88,
		"MY_RECOVERED_IN_ACTION": 89,
	}
)

func (x Aura_Effect_Calc) Enum() *Aura_Effect_Calc {
	p := new(Aura_Effect_Calc)
	*p = x
	return p
}

func (x Aura_Effect_Calc) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Aura_Effect_Calc) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[18].Descriptor()
}

func (Aura_Effect_Calc) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[18]
}

func (x Aura_Effect_Calc) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Aura_Effect_Calc.Descriptor instead.
func (Aura_Effect_Calc) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{11, 0, 2}
}

type JinSkill_FieldTarget int32

const (
	JinSkill_NO_TARGET     JinSkill_FieldTarget = 0
	JinSkill_OVERALL_FIELD JinSkill_FieldTarget = 1
	JinSkill_ALLY_FIELD    JinSkill_FieldTarget = 2
	JinSkill_ENEMY_FIELD   JinSkill_FieldTarget = 3
)

// Enum value maps for JinSkill_FieldTarget.
var (
	JinSkill_FieldTarget_name = map[int32]string{
		0: "NO_TARGET",
		1: "OVERALL_FIELD",
		2: "ALLY_FIELD",
		3: "ENEMY_FIELD",
	}
	JinSkill_FieldTarget_value = map[string]int32{
		"NO_TARGET":     0,
		"OVERALL_FIELD": 1,
		"ALLY_FIELD":    2,
		"ENEMY_FIELD":   3,
	}
)

func (x JinSkill_FieldTarget) Enum() *JinSkill_FieldTarget {
	p := new(JinSkill_FieldTarget)
	*p = x
	return p
}

func (x JinSkill_FieldTarget) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JinSkill_FieldTarget) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[19].Descriptor()
}

func (JinSkill_FieldTarget) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[19]
}

func (x JinSkill_FieldTarget) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JinSkill_FieldTarget.Descriptor instead.
func (JinSkill_FieldTarget) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{12, 0}
}

type JinSkill_FieldState int32

const (
	JinSkill_NO_STATE      JinSkill_FieldState = 0
	JinSkill_NO_INT_DAMAGE JinSkill_FieldState = 1
	JinSkill_NO_PHY_DAMAGE JinSkill_FieldState = 2
	JinSkill_NO_RECOVERY   JinSkill_FieldState = 3
	JinSkill_DIVIDE_DAMAGE JinSkill_FieldState = 4
)

// Enum value maps for JinSkill_FieldState.
var (
	JinSkill_FieldState_name = map[int32]string{
		0: "NO_STATE",
		1: "NO_INT_DAMAGE",
		2: "NO_PHY_DAMAGE",
		3: "NO_RECOVERY",
		4: "DIVIDE_DAMAGE",
	}
	JinSkill_FieldState_value = map[string]int32{
		"NO_STATE":      0,
		"NO_INT_DAMAGE": 1,
		"NO_PHY_DAMAGE": 2,
		"NO_RECOVERY":   3,
		"DIVIDE_DAMAGE": 4,
	}
)

func (x JinSkill_FieldState) Enum() *JinSkill_FieldState {
	p := new(JinSkill_FieldState)
	*p = x
	return p
}

func (x JinSkill_FieldState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JinSkill_FieldState) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[20].Descriptor()
}

func (JinSkill_FieldState) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[20]
}

func (x JinSkill_FieldState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JinSkill_FieldState.Descriptor instead.
func (JinSkill_FieldState) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{12, 1}
}

type JinSkillEffect_Effect_Target int32

const (
	JinSkillEffect_Effect_ENEMY_FIRST       JinSkillEffect_Effect_Target = 0
	JinSkillEffect_Effect_ENEMY_ALL         JinSkillEffect_Effect_Target = 1
	JinSkillEffect_Effect_ALLY_FIRST        JinSkillEffect_Effect_Target = 2
	JinSkillEffect_Effect_ALLY_ALL          JinSkillEffect_Effect_Target = 3
	JinSkillEffect_Effect_RANDOM            JinSkillEffect_Effect_Target = 4
	JinSkillEffect_Effect_ENEMY_HIGHEST_HP  JinSkillEffect_Effect_Target = 5
	JinSkillEffect_Effect_ENEMY_LOWEST_HP   JinSkillEffect_Effect_Target = 6
	JinSkillEffect_Effect_ENEMY_HIGHEST_PHY JinSkillEffect_Effect_Target = 7
	JinSkillEffect_Effect_ENEMY_LOWEST_PHY  JinSkillEffect_Effect_Target = 8
	JinSkillEffect_Effect_ENEMY_HIGHEST_INT JinSkillEffect_Effect_Target = 9
	JinSkillEffect_Effect_ENEMY_LOWEST_INT  JinSkillEffect_Effect_Target = 10
	JinSkillEffect_Effect_ENEMY_HIGHEST_AGI JinSkillEffect_Effect_Target = 11
	JinSkillEffect_Effect_ENEMY_LOWEST_AGI  JinSkillEffect_Effect_Target = 12
	JinSkillEffect_Effect_ENEMY_LAST        JinSkillEffect_Effect_Target = 15
	JinSkillEffect_Effect_ENEMY_FRONT       JinSkillEffect_Effect_Target = 16
	JinSkillEffect_Effect_ENEMY_MIDDLE      JinSkillEffect_Effect_Target = 17
	JinSkillEffect_Effect_ENEMY_BACK        JinSkillEffect_Effect_Target = 18
	JinSkillEffect_Effect_ALL               JinSkillEffect_Effect_Target = 19
	JinSkillEffect_Effect_ALLY_LAST         JinSkillEffect_Effect_Target = 20
	JinSkillEffect_Effect_ALLY_FRONT        JinSkillEffect_Effect_Target = 21
	JinSkillEffect_Effect_ALLY_MIDDLE       JinSkillEffect_Effect_Target = 22
	JinSkillEffect_Effect_ALLY_BACK         JinSkillEffect_Effect_Target = 23
)

// Enum value maps for JinSkillEffect_Effect_Target.
var (
	JinSkillEffect_Effect_Target_name = map[int32]string{
		0:  "ENEMY_FIRST",
		1:  "ENEMY_ALL",
		2:  "ALLY_FIRST",
		3:  "ALLY_ALL",
		4:  "RANDOM",
		5:  "ENEMY_HIGHEST_HP",
		6:  "ENEMY_LOWEST_HP",
		7:  "ENEMY_HIGHEST_PHY",
		8:  "ENEMY_LOWEST_PHY",
		9:  "ENEMY_HIGHEST_INT",
		10: "ENEMY_LOWEST_INT",
		11: "ENEMY_HIGHEST_AGI",
		12: "ENEMY_LOWEST_AGI",
		15: "ENEMY_LAST",
		16: "ENEMY_FRONT",
		17: "ENEMY_MIDDLE",
		18: "ENEMY_BACK",
		19: "ALL",
		20: "ALLY_LAST",
		21: "ALLY_FRONT",
		22: "ALLY_MIDDLE",
		23: "ALLY_BACK",
	}
	JinSkillEffect_Effect_Target_value = map[string]int32{
		"ENEMY_FIRST":       0,
		"ENEMY_ALL":         1,
		"ALLY_FIRST":        2,
		"ALLY_ALL":          3,
		"RANDOM":            4,
		"ENEMY_HIGHEST_HP":  5,
		"ENEMY_LOWEST_HP":   6,
		"ENEMY_HIGHEST_PHY": 7,
		"ENEMY_LOWEST_PHY":  8,
		"ENEMY_HIGHEST_INT": 9,
		"ENEMY_LOWEST_INT":  10,
		"ENEMY_HIGHEST_AGI": 11,
		"ENEMY_LOWEST_AGI":  12,
		"ENEMY_LAST":        15,
		"ENEMY_FRONT":       16,
		"ENEMY_MIDDLE":      17,
		"ENEMY_BACK":        18,
		"ALL":               19,
		"ALLY_LAST":         20,
		"ALLY_FRONT":        21,
		"ALLY_MIDDLE":       22,
		"ALLY_BACK":         23,
	}
)

func (x JinSkillEffect_Effect_Target) Enum() *JinSkillEffect_Effect_Target {
	p := new(JinSkillEffect_Effect_Target)
	*p = x
	return p
}

func (x JinSkillEffect_Effect_Target) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JinSkillEffect_Effect_Target) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[21].Descriptor()
}

func (JinSkillEffect_Effect_Target) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[21]
}

func (x JinSkillEffect_Effect_Target) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JinSkillEffect_Effect_Target.Descriptor instead.
func (JinSkillEffect_Effect_Target) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{13, 0, 0}
}

type JinSkillEffect_Effect_Param int32

const (
	JinSkillEffect_Effect_NONE      JinSkillEffect_Effect_Param = 0
	JinSkillEffect_Effect_HP        JinSkillEffect_Effect_Param = 1
	JinSkillEffect_Effect_PHY       JinSkillEffect_Effect_Param = 2
	JinSkillEffect_Effect_INT       JinSkillEffect_Effect_Param = 3
	JinSkillEffect_Effect_AGI       JinSkillEffect_Effect_Param = 4
	JinSkillEffect_Effect_POISON    JinSkillEffect_Effect_Param = 5
	JinSkillEffect_Effect_SLEEP     JinSkillEffect_Effect_Param = 6
	JinSkillEffect_Effect_CONFUSION JinSkillEffect_Effect_Param = 7
	JinSkillEffect_Effect_FEAR      JinSkillEffect_Effect_Param = 8
	JinSkillEffect_Effect_BARRIER   JinSkillEffect_Effect_Param = 9
	JinSkillEffect_Effect_BLEED     JinSkillEffect_Effect_Param = 10
	// CANCEL_CONFUSION = 11;
	// CANCEL_FEAR = 12;
	JinSkillEffect_Effect_STUN         JinSkillEffect_Effect_Param = 13
	JinSkillEffect_Effect_PROSTRATION  JinSkillEffect_Effect_Param = 14
	JinSkillEffect_Effect_DECOY        JinSkillEffect_Effect_Param = 15
	JinSkillEffect_Effect_CANCEL_BLEED JinSkillEffect_Effect_Param = 16
)

// Enum value maps for JinSkillEffect_Effect_Param.
var (
	JinSkillEffect_Effect_Param_name = map[int32]string{
		0:  "NONE",
		1:  "HP",
		2:  "PHY",
		3:  "INT",
		4:  "AGI",
		5:  "POISON",
		6:  "SLEEP",
		7:  "CONFUSION",
		8:  "FEAR",
		9:  "BARRIER",
		10: "BLEED",
		13: "STUN",
		14: "PROSTRATION",
		15: "DECOY",
		16: "CANCEL_BLEED",
	}
	JinSkillEffect_Effect_Param_value = map[string]int32{
		"NONE":         0,
		"HP":           1,
		"PHY":          2,
		"INT":          3,
		"AGI":          4,
		"POISON":       5,
		"SLEEP":        6,
		"CONFUSION":    7,
		"FEAR":         8,
		"BARRIER":      9,
		"BLEED":        10,
		"STUN":         13,
		"PROSTRATION":  14,
		"DECOY":        15,
		"CANCEL_BLEED": 16,
	}
)

func (x JinSkillEffect_Effect_Param) Enum() *JinSkillEffect_Effect_Param {
	p := new(JinSkillEffect_Effect_Param)
	*p = x
	return p
}

func (x JinSkillEffect_Effect_Param) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JinSkillEffect_Effect_Param) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[22].Descriptor()
}

func (JinSkillEffect_Effect_Param) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[22]
}

func (x JinSkillEffect_Effect_Param) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JinSkillEffect_Effect_Param.Descriptor instead.
func (JinSkillEffect_Effect_Param) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{13, 0, 1}
}

type JinSkillEffect_Effect_Calc int32

const (
	JinSkillEffect_Effect_OUR_PHY          JinSkillEffect_Effect_Calc = 0
	JinSkillEffect_Effect_OUR_INT          JinSkillEffect_Effect_Calc = 1
	JinSkillEffect_Effect_OUR_AGI          JinSkillEffect_Effect_Calc = 2
	JinSkillEffect_Effect_OUR_INT_YOUR_PHY JinSkillEffect_Effect_Calc = 3
	JinSkillEffect_Effect_OUR_MAX_HP       JinSkillEffect_Effect_Calc = 4
	JinSkillEffect_Effect_OUR_DAMAGE       JinSkillEffect_Effect_Calc = 5
	JinSkillEffect_Effect_YOUR_PHY         JinSkillEffect_Effect_Calc = 6
	JinSkillEffect_Effect_YOUR_INT         JinSkillEffect_Effect_Calc = 7
	JinSkillEffect_Effect_YOUR_AGI         JinSkillEffect_Effect_Calc = 8
	// YOUR_PHY_BUFF   = 10;
	// YOUR_INT_BUFF   = 11;
	// YOUR_AGI_BUFF   = 12;
	// YOUR_PHY_DEBUFF = 13;
	// YOUR_INT_DEBUFF = 14;
	// YOUR_AGI_DEBUFF = 15;
	// MY_PHY_BUFF     = 16;
	// MY_INT_BUFF     = 17;
	// MY_AGI_BUFF     = 18;
	// MY_PHY_DEBUFF   = 19;
	// MY_INT_DEBUFF   = 20;
	// MY_AGI_DEBUFF   = 21;
	// MY_TOTAL_BUFF = 22;
	// MY_TOTAL_DEBUFF = 23;
	// ALLY_TOTAL_BUFF = 24;
	// ALLY_TOTAL_DEBUFF = 25;
	// YOUR_TOTAL_BUFF = 26;
	// YOUR_TOTAL_DEBUFF = 27;
	// ENEMY_TOTAL_BUFF = 28;
	// ENEMY_TOTAL_DEBUFF = 29;
	// MY_PHY_YOUR_INT = 30;
	// ALLY_TOTAL_PHY_BUFF = 31;
	// ALLY_TOTAL_PHY_DEBUFF = 32;
	// ALLY_TOTAL_INT_BUFF = 33;
	// ALLY_TOTAL_INT_DEBUFF = 34;
	// ALLY_TOTAL_AGI_BUFF = 35;
	// ALLY_TOTAL_AGI_DEBUFF = 36;
	JinSkillEffect_Effect_ENEMY_TOTAL_PHY_BUFF JinSkillEffect_Effect_Calc = 37
	// ENEMY_TOTAL_PHY_DEBUFF = 38;
	JinSkillEffect_Effect_ENEMY_TOTAL_INT_BUFF JinSkillEffect_Effect_Calc = 39
)

// Enum value maps for JinSkillEffect_Effect_Calc.
var (
	JinSkillEffect_Effect_Calc_name = map[int32]string{
		0:  "OUR_PHY",
		1:  "OUR_INT",
		2:  "OUR_AGI",
		3:  "OUR_INT_YOUR_PHY",
		4:  "OUR_MAX_HP",
		5:  "OUR_DAMAGE",
		6:  "YOUR_PHY",
		7:  "YOUR_INT",
		8:  "YOUR_AGI",
		37: "ENEMY_TOTAL_PHY_BUFF",
		39: "ENEMY_TOTAL_INT_BUFF",
	}
	JinSkillEffect_Effect_Calc_value = map[string]int32{
		"OUR_PHY":              0,
		"OUR_INT":              1,
		"OUR_AGI":              2,
		"OUR_INT_YOUR_PHY":     3,
		"OUR_MAX_HP":           4,
		"OUR_DAMAGE":           5,
		"YOUR_PHY":             6,
		"YOUR_INT":             7,
		"YOUR_AGI":             8,
		"ENEMY_TOTAL_PHY_BUFF": 37,
		"ENEMY_TOTAL_INT_BUFF": 39,
	}
)

func (x JinSkillEffect_Effect_Calc) Enum() *JinSkillEffect_Effect_Calc {
	p := new(JinSkillEffect_Effect_Calc)
	*p = x
	return p
}

func (x JinSkillEffect_Effect_Calc) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JinSkillEffect_Effect_Calc) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[23].Descriptor()
}

func (JinSkillEffect_Effect_Calc) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[23]
}

func (x JinSkillEffect_Effect_Calc) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JinSkillEffect_Effect_Calc.Descriptor instead.
func (JinSkillEffect_Effect_Calc) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{13, 0, 2}
}

type EnchantInfo_Enchant int32

const (
	EnchantInfo_NO_ENCHANT EnchantInfo_Enchant = 0
	EnchantInfo_REDUCTION  EnchantInfo_Enchant = 1
)

// Enum value maps for EnchantInfo_Enchant.
var (
	EnchantInfo_Enchant_name = map[int32]string{
		0: "NO_ENCHANT",
		1: "REDUCTION",
	}
	EnchantInfo_Enchant_value = map[string]int32{
		"NO_ENCHANT": 0,
		"REDUCTION":  1,
	}
)

func (x EnchantInfo_Enchant) Enum() *EnchantInfo_Enchant {
	p := new(EnchantInfo_Enchant)
	*p = x
	return p
}

func (x EnchantInfo_Enchant) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnchantInfo_Enchant) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[24].Descriptor()
}

func (EnchantInfo_Enchant) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[24]
}

func (x EnchantInfo_Enchant) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnchantInfo_Enchant.Descriptor instead.
func (EnchantInfo_Enchant) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{14, 0}
}

type BattleId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleId uint32 `protobuf:"varint,1,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (x *BattleId) Reset() {
	*x = BattleId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleId) ProtoMessage() {}

func (x *BattleId) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleId.ProtoReflect.Descriptor instead.
func (*BattleId) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{0}
}

func (x *BattleId) GetBattleId() uint32 {
	if x != nil {
		return x.BattleId
	}
	return 0
}

type Battle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uint32 battle_id = 1;
	Units                                []*Unit          `protobuf:"bytes,2,rep,name=units,proto3" json:"units,omitempty"`
	ActionCounts                         int32            `protobuf:"varint,3,opt,name=action_counts,json=actionCounts,proto3" json:"action_counts,omitempty"`
	Result                               Battle_Result    `protobuf:"varint,4,opt,name=result,proto3,enum=battle.Battle_Result" json:"result,omitempty"`
	State                                Battle_State     `protobuf:"varint,5,opt,name=state,proto3,enum=battle.Battle_State" json:"state,omitempty"`
	RandomSeed                           int64            `protobuf:"varint,6,opt,name=random_seed,json=randomSeed,proto3" json:"random_seed,omitempty"`
	RandomCounts                         int64            `protobuf:"varint,7,opt,name=random_counts,json=randomCounts,proto3" json:"random_counts,omitempty"`
	Actions                              []*BattleAction  `protobuf:"bytes,8,rep,name=actions,proto3" json:"actions,omitempty"`
	LastActivePosition                   int32            `protobuf:"varint,9,opt,name=last_active_position,json=lastActivePosition,proto3" json:"last_active_position,omitempty"`
	Uids                                 []uint32         `protobuf:"varint,10,rep,packed,name=uids,proto3" json:"uids,omitempty"`
	Rules                                map[int32]bool   `protobuf:"bytes,11,rep,name=rules,proto3" json:"rules,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AttackerTakenDamage                  int32            `protobuf:"varint,12,opt,name=attacker_taken_damage,json=attackerTakenDamage,proto3" json:"attacker_taken_damage,omitempty"`
	DefenderTakenDamage                  int32            `protobuf:"varint,13,opt,name=defender_taken_damage,json=defenderTakenDamage,proto3" json:"defender_taken_damage,omitempty"`
	BattleType                           uint32           `protobuf:"varint,14,opt,name=battle_type,json=battleType,proto3" json:"battle_type,omitempty"`
	ActionLimit                          int32            `protobuf:"varint,15,opt,name=action_limit,json=actionLimit,proto3" json:"action_limit,omitempty"`
	JinIds                               []uint32         `protobuf:"varint,16,rep,packed,name=jin_ids,json=jinIds,proto3" json:"jin_ids,omitempty"` // deprecated
	AttackerChangeCounts                 int32            `protobuf:"varint,17,opt,name=attacker_change_counts,json=attackerChangeCounts,proto3" json:"attacker_change_counts,omitempty"`
	DefenderChangeCounts                 int32            `protobuf:"varint,18,opt,name=defender_change_counts,json=defenderChangeCounts,proto3" json:"defender_change_counts,omitempty"`
	LastChangeActionCounts               int32            `protobuf:"varint,19,opt,name=last_change_action_counts,json=lastChangeActionCounts,proto3" json:"last_change_action_counts,omitempty"`
	BgmId                                uint32           `protobuf:"varint,20,opt,name=bgm_id,json=bgmId,proto3" json:"bgm_id,omitempty"`
	BackgroundId                         uint32           `protobuf:"varint,21,opt,name=background_id,json=backgroundId,proto3" json:"background_id,omitempty"`
	Jins                                 []*Jin           `protobuf:"bytes,22,rep,name=jins,proto3" json:"jins,omitempty"`
	ActiveActionCounts                   int32            `protobuf:"varint,23,opt,name=active_action_counts,json=activeActionCounts,proto3" json:"active_action_counts,omitempty"`
	AttackerLastChangeActiveActionCounts int32            `protobuf:"varint,24,opt,name=attacker_last_change_active_action_counts,json=attackerLastChangeActiveActionCounts,proto3" json:"attacker_last_change_active_action_counts,omitempty"`
	DefenderLastChangeActiveActionCounts int32            `protobuf:"varint,25,opt,name=defender_last_change_active_action_counts,json=defenderLastChangeActiveActionCounts,proto3" json:"defender_last_change_active_action_counts,omitempty"`
	FieldState                           []*FieldState    `protobuf:"bytes,26,rep,name=field_state,json=fieldState,proto3" json:"field_state,omitempty"`
	AuraState                            Battle_AuraState `protobuf:"varint,27,opt,name=aura_state,json=auraState,proto3,enum=battle.Battle_AuraState" json:"aura_state,omitempty"`
}

func (x *Battle) Reset() {
	*x = Battle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Battle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Battle) ProtoMessage() {}

func (x *Battle) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Battle.ProtoReflect.Descriptor instead.
func (*Battle) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{1}
}

func (x *Battle) GetUnits() []*Unit {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *Battle) GetActionCounts() int32 {
	if x != nil {
		return x.ActionCounts
	}
	return 0
}

func (x *Battle) GetResult() Battle_Result {
	if x != nil {
		return x.Result
	}
	return Battle_PROGRESS
}

func (x *Battle) GetState() Battle_State {
	if x != nil {
		return x.State
	}
	return Battle_ACTIVE
}

func (x *Battle) GetRandomSeed() int64 {
	if x != nil {
		return x.RandomSeed
	}
	return 0
}

func (x *Battle) GetRandomCounts() int64 {
	if x != nil {
		return x.RandomCounts
	}
	return 0
}

func (x *Battle) GetActions() []*BattleAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Battle) GetLastActivePosition() int32 {
	if x != nil {
		return x.LastActivePosition
	}
	return 0
}

func (x *Battle) GetUids() []uint32 {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *Battle) GetRules() map[int32]bool {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *Battle) GetAttackerTakenDamage() int32 {
	if x != nil {
		return x.AttackerTakenDamage
	}
	return 0
}

func (x *Battle) GetDefenderTakenDamage() int32 {
	if x != nil {
		return x.DefenderTakenDamage
	}
	return 0
}

func (x *Battle) GetBattleType() uint32 {
	if x != nil {
		return x.BattleType
	}
	return 0
}

func (x *Battle) GetActionLimit() int32 {
	if x != nil {
		return x.ActionLimit
	}
	return 0
}

func (x *Battle) GetJinIds() []uint32 {
	if x != nil {
		return x.JinIds
	}
	return nil
}

func (x *Battle) GetAttackerChangeCounts() int32 {
	if x != nil {
		return x.AttackerChangeCounts
	}
	return 0
}

func (x *Battle) GetDefenderChangeCounts() int32 {
	if x != nil {
		return x.DefenderChangeCounts
	}
	return 0
}

func (x *Battle) GetLastChangeActionCounts() int32 {
	if x != nil {
		return x.LastChangeActionCounts
	}
	return 0
}

func (x *Battle) GetBgmId() uint32 {
	if x != nil {
		return x.BgmId
	}
	return 0
}

func (x *Battle) GetBackgroundId() uint32 {
	if x != nil {
		return x.BackgroundId
	}
	return 0
}

func (x *Battle) GetJins() []*Jin {
	if x != nil {
		return x.Jins
	}
	return nil
}

func (x *Battle) GetActiveActionCounts() int32 {
	if x != nil {
		return x.ActiveActionCounts
	}
	return 0
}

func (x *Battle) GetAttackerLastChangeActiveActionCounts() int32 {
	if x != nil {
		return x.AttackerLastChangeActiveActionCounts
	}
	return 0
}

func (x *Battle) GetDefenderLastChangeActiveActionCounts() int32 {
	if x != nil {
		return x.DefenderLastChangeActiveActionCounts
	}
	return 0
}

func (x *Battle) GetFieldState() []*FieldState {
	if x != nil {
		return x.FieldState
	}
	return nil
}

func (x *Battle) GetAuraState() Battle_AuraState {
	if x != nil {
		return x.AuraState
	}
	return Battle_FIRST_ACTIVE_AURA
}

type BattleAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count              int32          `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Units              []*CurrentUnit `protobuf:"bytes,2,rep,name=units,proto3" json:"units,omitempty"`
	Skill              uint32         `protobuf:"varint,3,opt,name=skill,proto3" json:"skill,omitempty"`
	ActionPosition     int32          `protobuf:"varint,4,opt,name=action_position,json=actionPosition,proto3" json:"action_position,omitempty"`
	EffectPositions    []int32        `protobuf:"varint,5,rep,packed,name=effect_positions,json=effectPositions,proto3" json:"effect_positions,omitempty"`
	Poison             int32          `protobuf:"varint,6,opt,name=poison,proto3" json:"poison,omitempty"`
	Bleed              int32          `protobuf:"varint,7,opt,name=bleed,proto3" json:"bleed,omitempty"`
	Jins               []*CurrentJin  `protobuf:"bytes,8,rep,name=jins,proto3" json:"jins,omitempty"`
	JinSkill           uint32         `protobuf:"varint,9,opt,name=jin_skill,json=jinSkill,proto3" json:"jin_skill,omitempty"`
	AttackerFieldState uint32         `protobuf:"varint,10,opt,name=attacker_field_state,json=attackerFieldState,proto3" json:"attacker_field_state,omitempty"`
	DefenderFieldState uint32         `protobuf:"varint,11,opt,name=defender_field_state,json=defenderFieldState,proto3" json:"defender_field_state,omitempty"`
	ActiveActionCount  int32          `protobuf:"varint,12,opt,name=active_action_count,json=activeActionCount,proto3" json:"active_action_count,omitempty"`
	JinSkillEffect     uint32         `protobuf:"varint,13,opt,name=jin_skill_effect,json=jinSkillEffect,proto3" json:"jin_skill_effect,omitempty"`
	AuraType           uint32         `protobuf:"varint,14,opt,name=aura_type,json=auraType,proto3" json:"aura_type,omitempty"`
}

func (x *BattleAction) Reset() {
	*x = BattleAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleAction) ProtoMessage() {}

func (x *BattleAction) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleAction.ProtoReflect.Descriptor instead.
func (*BattleAction) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{2}
}

func (x *BattleAction) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BattleAction) GetUnits() []*CurrentUnit {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *BattleAction) GetSkill() uint32 {
	if x != nil {
		return x.Skill
	}
	return 0
}

func (x *BattleAction) GetActionPosition() int32 {
	if x != nil {
		return x.ActionPosition
	}
	return 0
}

func (x *BattleAction) GetEffectPositions() []int32 {
	if x != nil {
		return x.EffectPositions
	}
	return nil
}

func (x *BattleAction) GetPoison() int32 {
	if x != nil {
		return x.Poison
	}
	return 0
}

func (x *BattleAction) GetBleed() int32 {
	if x != nil {
		return x.Bleed
	}
	return 0
}

func (x *BattleAction) GetJins() []*CurrentJin {
	if x != nil {
		return x.Jins
	}
	return nil
}

func (x *BattleAction) GetJinSkill() uint32 {
	if x != nil {
		return x.JinSkill
	}
	return 0
}

func (x *BattleAction) GetAttackerFieldState() uint32 {
	if x != nil {
		return x.AttackerFieldState
	}
	return 0
}

func (x *BattleAction) GetDefenderFieldState() uint32 {
	if x != nil {
		return x.DefenderFieldState
	}
	return 0
}

func (x *BattleAction) GetActiveActionCount() int32 {
	if x != nil {
		return x.ActiveActionCount
	}
	return 0
}

func (x *BattleAction) GetJinSkillEffect() uint32 {
	if x != nil {
		return x.JinSkillEffect
	}
	return 0
}

func (x *BattleAction) GetAuraType() uint32 {
	if x != nil {
		return x.AuraType
	}
	return 0
}

type Unit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *BaseUnit    `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Current *CurrentUnit `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *Unit) Reset() {
	*x = Unit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unit) ProtoMessage() {}

func (x *Unit) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unit.ProtoReflect.Descriptor instead.
func (*Unit) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{3}
}

func (x *Unit) GetBase() *BaseUnit {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *Unit) GetCurrent() *CurrentUnit {
	if x != nil {
		return x.Current
	}
	return nil
}

type BaseUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index             int32                      `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Position          int32                      `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	Hp                int32                      `protobuf:"varint,3,opt,name=hp,proto3" json:"hp,omitempty"`
	Phy               int32                      `protobuf:"varint,4,opt,name=phy,proto3" json:"phy,omitempty"`
	Int               int32                      `protobuf:"varint,5,opt,name=int,proto3" json:"int,omitempty"`
	Agi               int32                      `protobuf:"varint,6,opt,name=agi,proto3" json:"agi,omitempty"`
	Actives           []uint32                   `protobuf:"varint,7,rep,packed,name=actives,proto3" json:"actives,omitempty"`
	Passive           uint32                     `protobuf:"varint,8,opt,name=passive,proto3" json:"passive,omitempty"`
	Character         uint32                     `protobuf:"varint,9,opt,name=character,proto3" json:"character,omitempty"`
	Extension1        uint32                     `protobuf:"varint,10,opt,name=extension1,proto3" json:"extension1,omitempty"`
	Extension2        uint32                     `protobuf:"varint,11,opt,name=extension2,proto3" json:"extension2,omitempty"`
	Ipfs              string                     `protobuf:"bytes,12,opt,name=ipfs,proto3" json:"ipfs,omitempty"`
	IsEnemy           bool                       `protobuf:"varint,13,opt,name=is_enemy,json=isEnemy,proto3" json:"is_enemy,omitempty"`
	ResultRate1000    map[int32]int32            `protobuf:"bytes,14,rep,name=result_rate1000,json=resultRate1000,proto3" json:"result_rate1000,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AttributeTypes    []uint32                   `protobuf:"varint,15,rep,packed,name=attribute_types,json=attributeTypes,proto3" json:"attribute_types,omitempty"`
	HeroType          uint32                     `protobuf:"varint,16,opt,name=hero_type,json=heroType,proto3" json:"hero_type,omitempty"`
	Auras             []*BaseUnit_AuraEffectRate `protobuf:"bytes,17,rep,name=auras,proto3" json:"auras,omitempty"`
	CriticalPhyRate   int32                      `protobuf:"varint,18,opt,name=critical_phy_rate,json=criticalPhyRate,proto3" json:"critical_phy_rate,omitempty"`
	CriticalIntRate   int32                      `protobuf:"varint,19,opt,name=critical_int_rate,json=criticalIntRate,proto3" json:"critical_int_rate,omitempty"`
	IncreaseDamageCut int32                      `protobuf:"varint,20,opt,name=increase_damage_cut,json=increaseDamageCut,proto3" json:"increase_damage_cut,omitempty"`
	EnchantInfos      []*EnchantInfo             `protobuf:"bytes,21,rep,name=enchant_infos,json=enchantInfos,proto3" json:"enchant_infos,omitempty"`
}

func (x *BaseUnit) Reset() {
	*x = BaseUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseUnit) ProtoMessage() {}

func (x *BaseUnit) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseUnit.ProtoReflect.Descriptor instead.
func (*BaseUnit) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{4}
}

func (x *BaseUnit) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BaseUnit) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *BaseUnit) GetHp() int32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *BaseUnit) GetPhy() int32 {
	if x != nil {
		return x.Phy
	}
	return 0
}

func (x *BaseUnit) GetInt() int32 {
	if x != nil {
		return x.Int
	}
	return 0
}

func (x *BaseUnit) GetAgi() int32 {
	if x != nil {
		return x.Agi
	}
	return 0
}

func (x *BaseUnit) GetActives() []uint32 {
	if x != nil {
		return x.Actives
	}
	return nil
}

func (x *BaseUnit) GetPassive() uint32 {
	if x != nil {
		return x.Passive
	}
	return 0
}

func (x *BaseUnit) GetCharacter() uint32 {
	if x != nil {
		return x.Character
	}
	return 0
}

func (x *BaseUnit) GetExtension1() uint32 {
	if x != nil {
		return x.Extension1
	}
	return 0
}

func (x *BaseUnit) GetExtension2() uint32 {
	if x != nil {
		return x.Extension2
	}
	return 0
}

func (x *BaseUnit) GetIpfs() string {
	if x != nil {
		return x.Ipfs
	}
	return ""
}

func (x *BaseUnit) GetIsEnemy() bool {
	if x != nil {
		return x.IsEnemy
	}
	return false
}

func (x *BaseUnit) GetResultRate1000() map[int32]int32 {
	if x != nil {
		return x.ResultRate1000
	}
	return nil
}

func (x *BaseUnit) GetAttributeTypes() []uint32 {
	if x != nil {
		return x.AttributeTypes
	}
	return nil
}

func (x *BaseUnit) GetHeroType() uint32 {
	if x != nil {
		return x.HeroType
	}
	return 0
}

func (x *BaseUnit) GetAuras() []*BaseUnit_AuraEffectRate {
	if x != nil {
		return x.Auras
	}
	return nil
}

func (x *BaseUnit) GetCriticalPhyRate() int32 {
	if x != nil {
		return x.CriticalPhyRate
	}
	return 0
}

func (x *BaseUnit) GetCriticalIntRate() int32 {
	if x != nil {
		return x.CriticalIntRate
	}
	return 0
}

func (x *BaseUnit) GetIncreaseDamageCut() int32 {
	if x != nil {
		return x.IncreaseDamageCut
	}
	return 0
}

func (x *BaseUnit) GetEnchantInfos() []*EnchantInfo {
	if x != nil {
		return x.EnchantInfos
	}
	return nil
}

type CurrentUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index                 int32             `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Position              int32             `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	Hp                    int32             `protobuf:"varint,3,opt,name=hp,proto3" json:"hp,omitempty"`
	Phy                   int32             `protobuf:"varint,4,opt,name=phy,proto3" json:"phy,omitempty"`
	Int                   int32             `protobuf:"varint,5,opt,name=int,proto3" json:"int,omitempty"`
	Agi                   int32             `protobuf:"varint,6,opt,name=agi,proto3" json:"agi,omitempty"`
	Charge                int32             `protobuf:"varint,7,opt,name=charge,proto3" json:"charge,omitempty"`
	ActiveCounts          int32             `protobuf:"varint,8,opt,name=active_counts,json=activeCounts,proto3" json:"active_counts,omitempty"`
	PassiveEnabled        bool              `protobuf:"varint,9,opt,name=passive_enabled,json=passiveEnabled,proto3" json:"passive_enabled,omitempty"`
	AddedDamage           int32             `protobuf:"varint,10,opt,name=added_damage,json=addedDamage,proto3" json:"added_damage,omitempty"`
	TakenDamage           int32             `protobuf:"varint,11,opt,name=taken_damage,json=takenDamage,proto3" json:"taken_damage,omitempty"`
	State                 CurrentUnit_State `protobuf:"varint,12,opt,name=state,proto3,enum=battle.CurrentUnit_State" json:"state,omitempty"`
	PositionChanged       bool              `protobuf:"varint,13,opt,name=position_changed,json=positionChanged,proto3" json:"position_changed,omitempty"`
	BarrierInAction       bool              `protobuf:"varint,14,opt,name=barrier_in_action,json=barrierInAction,proto3" json:"barrier_in_action,omitempty"`
	BleedCount            int32             `protobuf:"varint,15,opt,name=bleed_count,json=bleedCount,proto3" json:"bleed_count,omitempty"`
	ResurrectionEnabled   bool              `protobuf:"varint,16,opt,name=resurrection_enabled,json=resurrectionEnabled,proto3" json:"resurrection_enabled,omitempty"`
	DecoyEnabled          bool              `protobuf:"varint,17,opt,name=decoy_enabled,json=decoyEnabled,proto3" json:"decoy_enabled,omitempty"`
	DecoyInAction         bool              `protobuf:"varint,18,opt,name=decoy_in_action,json=decoyInAction,proto3" json:"decoy_in_action,omitempty"`
	BonusCharge           int32             `protobuf:"varint,19,opt,name=bonus_charge,json=bonusCharge,proto3" json:"bonus_charge,omitempty"`
	CurseCount            int32             `protobuf:"varint,20,opt,name=curse_count,json=curseCount,proto3" json:"curse_count,omitempty"`
	SkillDeathEnabled     bool              `protobuf:"varint,21,opt,name=skill_death_enabled,json=skillDeathEnabled,proto3" json:"skill_death_enabled,omitempty"`
	DuplicateDecoyEnabled bool              `protobuf:"varint,22,opt,name=duplicate_decoy_enabled,json=duplicateDecoyEnabled,proto3" json:"duplicate_decoy_enabled,omitempty"`
	CriticalPhyRate       int32             `protobuf:"varint,23,opt,name=critical_phy_rate,json=criticalPhyRate,proto3" json:"critical_phy_rate,omitempty"`
	CriticalIntRate       int32             `protobuf:"varint,24,opt,name=critical_int_rate,json=criticalIntRate,proto3" json:"critical_int_rate,omitempty"`
	CriticalJudg          bool              `protobuf:"varint,25,opt,name=critical_judg,json=criticalJudg,proto3" json:"critical_judg,omitempty"`
	Shield                int32             `protobuf:"varint,26,opt,name=shield,proto3" json:"shield,omitempty"`
	AuraEnabled           map[uint32]bool   `protobuf:"bytes,27,rep,name=aura_enabled,json=auraEnabled,proto3" json:"aura_enabled,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AuraDeathEnabled      bool              `protobuf:"varint,28,opt,name=aura_death_enabled,json=auraDeathEnabled,proto3" json:"aura_death_enabled,omitempty"`
	StateEffectRate       map[int32]int32   `protobuf:"bytes,29,rep,name=state_effect_rate,json=stateEffectRate,proto3" json:"state_effect_rate,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ActiveAuras           []uint32          `protobuf:"varint,30,rep,packed,name=active_auras,json=activeAuras,proto3" json:"active_auras,omitempty"`
	IncreaseDamageCut     int32             `protobuf:"varint,31,opt,name=increase_damage_cut,json=increaseDamageCut,proto3" json:"increase_damage_cut,omitempty"`
	LastTargets           []*Unit           `protobuf:"bytes,32,rep,name=last_targets,json=lastTargets,proto3" json:"last_targets,omitempty"`
	WithinActionValue     map[uint32]int32  `protobuf:"bytes,33,rep,name=within_action_value,json=withinActionValue,proto3" json:"within_action_value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	PassiveAddedDamage    int32             `protobuf:"varint,34,opt,name=passive_added_damage,json=passiveAddedDamage,proto3" json:"passive_added_damage,omitempty"`
	PassiveTakenDamage    int32             `protobuf:"varint,35,opt,name=passive_taken_damage,json=passiveTakenDamage,proto3" json:"passive_taken_damage,omitempty"`
	EnchantInfos          []*EnchantInfo    `protobuf:"bytes,36,rep,name=enchant_infos,json=enchantInfos,proto3" json:"enchant_infos,omitempty"`
}

func (x *CurrentUnit) Reset() {
	*x = CurrentUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentUnit) ProtoMessage() {}

func (x *CurrentUnit) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentUnit.ProtoReflect.Descriptor instead.
func (*CurrentUnit) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{5}
}

func (x *CurrentUnit) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CurrentUnit) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *CurrentUnit) GetHp() int32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *CurrentUnit) GetPhy() int32 {
	if x != nil {
		return x.Phy
	}
	return 0
}

func (x *CurrentUnit) GetInt() int32 {
	if x != nil {
		return x.Int
	}
	return 0
}

func (x *CurrentUnit) GetAgi() int32 {
	if x != nil {
		return x.Agi
	}
	return 0
}

func (x *CurrentUnit) GetCharge() int32 {
	if x != nil {
		return x.Charge
	}
	return 0
}

func (x *CurrentUnit) GetActiveCounts() int32 {
	if x != nil {
		return x.ActiveCounts
	}
	return 0
}

func (x *CurrentUnit) GetPassiveEnabled() bool {
	if x != nil {
		return x.PassiveEnabled
	}
	return false
}

func (x *CurrentUnit) GetAddedDamage() int32 {
	if x != nil {
		return x.AddedDamage
	}
	return 0
}

func (x *CurrentUnit) GetTakenDamage() int32 {
	if x != nil {
		return x.TakenDamage
	}
	return 0
}

func (x *CurrentUnit) GetState() CurrentUnit_State {
	if x != nil {
		return x.State
	}
	return CurrentUnit_NORMAL
}

func (x *CurrentUnit) GetPositionChanged() bool {
	if x != nil {
		return x.PositionChanged
	}
	return false
}

func (x *CurrentUnit) GetBarrierInAction() bool {
	if x != nil {
		return x.BarrierInAction
	}
	return false
}

func (x *CurrentUnit) GetBleedCount() int32 {
	if x != nil {
		return x.BleedCount
	}
	return 0
}

func (x *CurrentUnit) GetResurrectionEnabled() bool {
	if x != nil {
		return x.ResurrectionEnabled
	}
	return false
}

func (x *CurrentUnit) GetDecoyEnabled() bool {
	if x != nil {
		return x.DecoyEnabled
	}
	return false
}

func (x *CurrentUnit) GetDecoyInAction() bool {
	if x != nil {
		return x.DecoyInAction
	}
	return false
}

func (x *CurrentUnit) GetBonusCharge() int32 {
	if x != nil {
		return x.BonusCharge
	}
	return 0
}

func (x *CurrentUnit) GetCurseCount() int32 {
	if x != nil {
		return x.CurseCount
	}
	return 0
}

func (x *CurrentUnit) GetSkillDeathEnabled() bool {
	if x != nil {
		return x.SkillDeathEnabled
	}
	return false
}

func (x *CurrentUnit) GetDuplicateDecoyEnabled() bool {
	if x != nil {
		return x.DuplicateDecoyEnabled
	}
	return false
}

func (x *CurrentUnit) GetCriticalPhyRate() int32 {
	if x != nil {
		return x.CriticalPhyRate
	}
	return 0
}

func (x *CurrentUnit) GetCriticalIntRate() int32 {
	if x != nil {
		return x.CriticalIntRate
	}
	return 0
}

func (x *CurrentUnit) GetCriticalJudg() bool {
	if x != nil {
		return x.CriticalJudg
	}
	return false
}

func (x *CurrentUnit) GetShield() int32 {
	if x != nil {
		return x.Shield
	}
	return 0
}

func (x *CurrentUnit) GetAuraEnabled() map[uint32]bool {
	if x != nil {
		return x.AuraEnabled
	}
	return nil
}

func (x *CurrentUnit) GetAuraDeathEnabled() bool {
	if x != nil {
		return x.AuraDeathEnabled
	}
	return false
}

func (x *CurrentUnit) GetStateEffectRate() map[int32]int32 {
	if x != nil {
		return x.StateEffectRate
	}
	return nil
}

func (x *CurrentUnit) GetActiveAuras() []uint32 {
	if x != nil {
		return x.ActiveAuras
	}
	return nil
}

func (x *CurrentUnit) GetIncreaseDamageCut() int32 {
	if x != nil {
		return x.IncreaseDamageCut
	}
	return 0
}

func (x *CurrentUnit) GetLastTargets() []*Unit {
	if x != nil {
		return x.LastTargets
	}
	return nil
}

func (x *CurrentUnit) GetWithinActionValue() map[uint32]int32 {
	if x != nil {
		return x.WithinActionValue
	}
	return nil
}

func (x *CurrentUnit) GetPassiveAddedDamage() int32 {
	if x != nil {
		return x.PassiveAddedDamage
	}
	return 0
}

func (x *CurrentUnit) GetPassiveTakenDamage() int32 {
	if x != nil {
		return x.PassiveTakenDamage
	}
	return 0
}

func (x *CurrentUnit) GetEnchantInfos() []*EnchantInfo {
	if x != nil {
		return x.EnchantInfos
	}
	return nil
}

type Jin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *BaseJin    `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Current *CurrentJin `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *Jin) Reset() {
	*x = Jin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jin) ProtoMessage() {}

func (x *Jin) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jin.ProtoReflect.Descriptor instead.
func (*Jin) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{6}
}

func (x *Jin) GetBase() *BaseJin {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *Jin) GetCurrent() *CurrentJin {
	if x != nil {
		return x.Current
	}
	return nil
}

type BaseJin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index       int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	JinPosition int32  `protobuf:"varint,2,opt,name=jin_position,json=jinPosition,proto3" json:"jin_position,omitempty"`
	Skill       uint32 `protobuf:"varint,3,opt,name=skill,proto3" json:"skill,omitempty"`
	JinId       uint32 `protobuf:"varint,4,opt,name=jin_id,json=jinId,proto3" json:"jin_id,omitempty"`
	Ipfs        string `protobuf:"bytes,5,opt,name=ipfs,proto3" json:"ipfs,omitempty"`
	JinType     uint32 `protobuf:"varint,6,opt,name=jin_type,json=jinType,proto3" json:"jin_type,omitempty"`
}

func (x *BaseJin) Reset() {
	*x = BaseJin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseJin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseJin) ProtoMessage() {}

func (x *BaseJin) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseJin.ProtoReflect.Descriptor instead.
func (*BaseJin) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{7}
}

func (x *BaseJin) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BaseJin) GetJinPosition() int32 {
	if x != nil {
		return x.JinPosition
	}
	return 0
}

func (x *BaseJin) GetSkill() uint32 {
	if x != nil {
		return x.Skill
	}
	return 0
}

func (x *BaseJin) GetJinId() uint32 {
	if x != nil {
		return x.JinId
	}
	return 0
}

func (x *BaseJin) GetIpfs() string {
	if x != nil {
		return x.Ipfs
	}
	return ""
}

func (x *BaseJin) GetJinType() uint32 {
	if x != nil {
		return x.JinType
	}
	return 0
}

type CurrentJin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index                                int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	JinPosition                          int32 `protobuf:"varint,2,opt,name=jin_position,json=jinPosition,proto3" json:"jin_position,omitempty"`
	SkillActivated                       bool  `protobuf:"varint,3,opt,name=skill_activated,json=skillActivated,proto3" json:"skill_activated,omitempty"`
	SkillActivatedActiveActionCounts     int32 `protobuf:"varint,4,opt,name=skill_activated_active_action_counts,json=skillActivatedActiveActionCounts,proto3" json:"skill_activated_active_action_counts,omitempty"`                 // jin自体の終了チェック
	LastJinSkillEffectActiveActionCounts int32 `protobuf:"varint,5,opt,name=last_jin_skill_effect_active_action_counts,json=lastJinSkillEffectActiveActionCounts,proto3" json:"last_jin_skill_effect_active_action_counts,omitempty"` // 継続jinskillの発動チェック
	AlreadySkillActivated                bool  `protobuf:"varint,6,opt,name=already_skill_activated,json=alreadySkillActivated,proto3" json:"already_skill_activated,omitempty"`
	AlreadyPositionChanged               bool  `protobuf:"varint,7,opt,name=already_position_changed,json=alreadyPositionChanged,proto3" json:"already_position_changed,omitempty"`
}

func (x *CurrentJin) Reset() {
	*x = CurrentJin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentJin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentJin) ProtoMessage() {}

func (x *CurrentJin) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentJin.ProtoReflect.Descriptor instead.
func (*CurrentJin) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{8}
}

func (x *CurrentJin) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CurrentJin) GetJinPosition() int32 {
	if x != nil {
		return x.JinPosition
	}
	return 0
}

func (x *CurrentJin) GetSkillActivated() bool {
	if x != nil {
		return x.SkillActivated
	}
	return false
}

func (x *CurrentJin) GetSkillActivatedActiveActionCounts() int32 {
	if x != nil {
		return x.SkillActivatedActiveActionCounts
	}
	return 0
}

func (x *CurrentJin) GetLastJinSkillEffectActiveActionCounts() int32 {
	if x != nil {
		return x.LastJinSkillEffectActiveActionCounts
	}
	return 0
}

func (x *CurrentJin) GetAlreadySkillActivated() bool {
	if x != nil {
		return x.AlreadySkillActivated
	}
	return false
}

func (x *CurrentJin) GetAlreadyPositionChanged() bool {
	if x != nil {
		return x.AlreadyPositionChanged
	}
	return false
}

type FieldState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             uint32 `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	ActivaterPosition int32  `protobuf:"varint,2,opt,name=activater_position,json=activaterPosition,proto3" json:"activater_position,omitempty"`
}

func (x *FieldState) Reset() {
	*x = FieldState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldState) ProtoMessage() {}

func (x *FieldState) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldState.ProtoReflect.Descriptor instead.
func (*FieldState) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{9}
}

func (x *FieldState) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *FieldState) GetActivaterPosition() int32 {
	if x != nil {
		return x.ActivaterPosition
	}
	return 0
}

type Skill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId       uint32          `protobuf:"varint,1,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	Condition     Skill_Condition `protobuf:"varint,2,opt,name=condition,proto3,enum=battle.Skill_Condition" json:"condition,omitempty"`
	ConditionRate int32           `protobuf:"varint,3,opt,name=condition_rate,json=conditionRate,proto3" json:"condition_rate,omitempty"`
	Effects       []*Skill_Effect `protobuf:"bytes,4,rep,name=effects,proto3" json:"effects,omitempty"`
	SecondaryRate int32           `protobuf:"varint,5,opt,name=secondary_rate,json=secondaryRate,proto3" json:"secondary_rate,omitempty"`
	EnchantInfos  []*EnchantInfo  `protobuf:"bytes,6,rep,name=enchant_infos,json=enchantInfos,proto3" json:"enchant_infos,omitempty"`
	HasEnchant    bool            `protobuf:"varint,7,opt,name=has_enchant,json=hasEnchant,proto3" json:"has_enchant,omitempty"`
}

func (x *Skill) Reset() {
	*x = Skill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Skill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Skill) ProtoMessage() {}

func (x *Skill) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Skill.ProtoReflect.Descriptor instead.
func (*Skill) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{10}
}

func (x *Skill) GetSkillId() uint32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *Skill) GetCondition() Skill_Condition {
	if x != nil {
		return x.Condition
	}
	return Skill_NONE
}

func (x *Skill) GetConditionRate() int32 {
	if x != nil {
		return x.ConditionRate
	}
	return 0
}

func (x *Skill) GetEffects() []*Skill_Effect {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *Skill) GetSecondaryRate() int32 {
	if x != nil {
		return x.SecondaryRate
	}
	return 0
}

func (x *Skill) GetEnchantInfos() []*EnchantInfo {
	if x != nil {
		return x.EnchantInfos
	}
	return nil
}

func (x *Skill) GetHasEnchant() bool {
	if x != nil {
		return x.HasEnchant
	}
	return false
}

type Aura struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuraId         uint32         `protobuf:"varint,1,opt,name=aura_id,json=auraId,proto3" json:"aura_id,omitempty"`
	Condition      Aura_Condition `protobuf:"varint,2,opt,name=condition,proto3,enum=battle.Aura_Condition" json:"condition,omitempty"`
	ConditionType  Aura_Type      `protobuf:"varint,3,opt,name=condition_type,json=conditionType,proto3,enum=battle.Aura_Type" json:"condition_type,omitempty"`
	ConditionValue int32          `protobuf:"varint,4,opt,name=condition_value,json=conditionValue,proto3" json:"condition_value,omitempty"`
	ConditionRate  int32          `protobuf:"varint,5,opt,name=condition_rate,json=conditionRate,proto3" json:"condition_rate,omitempty"`
	IsWithinAction bool           `protobuf:"varint,6,opt,name=is_within_action,json=isWithinAction,proto3" json:"is_within_action,omitempty"`
	Effects        []*Aura_Effect `protobuf:"bytes,7,rep,name=effects,proto3" json:"effects,omitempty"`
}

func (x *Aura) Reset() {
	*x = Aura{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aura) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aura) ProtoMessage() {}

func (x *Aura) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aura.ProtoReflect.Descriptor instead.
func (*Aura) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{11}
}

func (x *Aura) GetAuraId() uint32 {
	if x != nil {
		return x.AuraId
	}
	return 0
}

func (x *Aura) GetCondition() Aura_Condition {
	if x != nil {
		return x.Condition
	}
	return Aura_NONE
}

func (x *Aura) GetConditionType() Aura_Type {
	if x != nil {
		return x.ConditionType
	}
	return Aura_NORMAL
}

func (x *Aura) GetConditionValue() int32 {
	if x != nil {
		return x.ConditionValue
	}
	return 0
}

func (x *Aura) GetConditionRate() int32 {
	if x != nil {
		return x.ConditionRate
	}
	return 0
}

func (x *Aura) GetIsWithinAction() bool {
	if x != nil {
		return x.IsWithinAction
	}
	return false
}

func (x *Aura) GetEffects() []*Aura_Effect {
	if x != nil {
		return x.Effects
	}
	return nil
}

type JinSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JinSkillId                uint32 `protobuf:"varint,1,opt,name=jin_skill_id,json=jinSkillId,proto3" json:"jin_skill_id,omitempty"`
	AttributeType             uint32 `protobuf:"varint,2,opt,name=attribute_type,json=attributeType,proto3" json:"attribute_type,omitempty"`
	RequiredActiveActionCount int32  `protobuf:"varint,3,opt,name=required_active_action_count,json=requiredActiveActionCount,proto3" json:"required_active_action_count,omitempty"`
	ValidActiveActionCount    int32  `protobuf:"varint,4,opt,name=valid_active_action_count,json=validActiveActionCount,proto3" json:"valid_active_action_count,omitempty"`
	// uint32 field_effect_id = 5;
	OpeningJinSkillEffectId   uint32               `protobuf:"varint,6,opt,name=opening_jin_skill_effect_id,json=openingJinSkillEffectId,proto3" json:"opening_jin_skill_effect_id,omitempty"`
	ContinualJinSkillEffectId uint32               `protobuf:"varint,7,opt,name=continual_jin_skill_effect_id,json=continualJinSkillEffectId,proto3" json:"continual_jin_skill_effect_id,omitempty"`
	FinishJinSkillEffectId    uint32               `protobuf:"varint,8,opt,name=finish_jin_skill_effect_id,json=finishJinSkillEffectId,proto3" json:"finish_jin_skill_effect_id,omitempty"`
	FieldTarget               JinSkill_FieldTarget `protobuf:"varint,9,opt,name=field_target,json=fieldTarget,proto3,enum=battle.JinSkill_FieldTarget" json:"field_target,omitempty"`
	FieldState                JinSkill_FieldState  `protobuf:"varint,10,opt,name=field_state,json=fieldState,proto3,enum=battle.JinSkill_FieldState" json:"field_state,omitempty"`
}

func (x *JinSkill) Reset() {
	*x = JinSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JinSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JinSkill) ProtoMessage() {}

func (x *JinSkill) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JinSkill.ProtoReflect.Descriptor instead.
func (*JinSkill) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{12}
}

func (x *JinSkill) GetJinSkillId() uint32 {
	if x != nil {
		return x.JinSkillId
	}
	return 0
}

func (x *JinSkill) GetAttributeType() uint32 {
	if x != nil {
		return x.AttributeType
	}
	return 0
}

func (x *JinSkill) GetRequiredActiveActionCount() int32 {
	if x != nil {
		return x.RequiredActiveActionCount
	}
	return 0
}

func (x *JinSkill) GetValidActiveActionCount() int32 {
	if x != nil {
		return x.ValidActiveActionCount
	}
	return 0
}

func (x *JinSkill) GetOpeningJinSkillEffectId() uint32 {
	if x != nil {
		return x.OpeningJinSkillEffectId
	}
	return 0
}

func (x *JinSkill) GetContinualJinSkillEffectId() uint32 {
	if x != nil {
		return x.ContinualJinSkillEffectId
	}
	return 0
}

func (x *JinSkill) GetFinishJinSkillEffectId() uint32 {
	if x != nil {
		return x.FinishJinSkillEffectId
	}
	return 0
}

func (x *JinSkill) GetFieldTarget() JinSkill_FieldTarget {
	if x != nil {
		return x.FieldTarget
	}
	return JinSkill_NO_TARGET
}

func (x *JinSkill) GetFieldState() JinSkill_FieldState {
	if x != nil {
		return x.FieldState
	}
	return JinSkill_NO_STATE
}

type JinSkillEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JinSkillEffectId          uint32                   `protobuf:"varint,1,opt,name=jin_skill_effect_id,json=jinSkillEffectId,proto3" json:"jin_skill_effect_id,omitempty"`
	RequiredActiveActionCount int32                    `protobuf:"varint,2,opt,name=required_active_action_count,json=requiredActiveActionCount,proto3" json:"required_active_action_count,omitempty"`
	Effects                   []*JinSkillEffect_Effect `protobuf:"bytes,4,rep,name=effects,proto3" json:"effects,omitempty"`
}

func (x *JinSkillEffect) Reset() {
	*x = JinSkillEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JinSkillEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JinSkillEffect) ProtoMessage() {}

func (x *JinSkillEffect) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JinSkillEffect.ProtoReflect.Descriptor instead.
func (*JinSkillEffect) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{13}
}

func (x *JinSkillEffect) GetJinSkillEffectId() uint32 {
	if x != nil {
		return x.JinSkillEffectId
	}
	return 0
}

func (x *JinSkillEffect) GetRequiredActiveActionCount() int32 {
	if x != nil {
		return x.RequiredActiveActionCount
	}
	return 0
}

func (x *JinSkillEffect) GetEffects() []*JinSkillEffect_Effect {
	if x != nil {
		return x.Effects
	}
	return nil
}

type EnchantInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnchantType EnchantInfo_Enchant `protobuf:"varint,1,opt,name=enchant_type,json=enchantType,proto3,enum=battle.EnchantInfo_Enchant" json:"enchant_type,omitempty"`
	Rate        int32               `protobuf:"varint,2,opt,name=rate,proto3" json:"rate,omitempty"`
	Enabled     bool                `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *EnchantInfo) Reset() {
	*x = EnchantInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnchantInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnchantInfo) ProtoMessage() {}

func (x *EnchantInfo) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnchantInfo.ProtoReflect.Descriptor instead.
func (*EnchantInfo) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{14}
}

func (x *EnchantInfo) GetEnchantType() EnchantInfo_Enchant {
	if x != nil {
		return x.EnchantType
	}
	return EnchantInfo_NO_ENCHANT
}

func (x *EnchantInfo) GetRate() int32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *EnchantInfo) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type BaseUnit_AuraEffectRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuraType       uint32 `protobuf:"varint,1,opt,name=aura_type,json=auraType,proto3" json:"aura_type,omitempty"`
	EffectValue    int32  `protobuf:"varint,2,opt,name=effect_value,json=effectValue,proto3" json:"effect_value,omitempty"`
	SecondaryValue int32  `protobuf:"varint,3,opt,name=secondary_value,json=secondaryValue,proto3" json:"secondary_value,omitempty"`
}

func (x *BaseUnit_AuraEffectRate) Reset() {
	*x = BaseUnit_AuraEffectRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseUnit_AuraEffectRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseUnit_AuraEffectRate) ProtoMessage() {}

func (x *BaseUnit_AuraEffectRate) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseUnit_AuraEffectRate.ProtoReflect.Descriptor instead.
func (*BaseUnit_AuraEffectRate) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{4, 1}
}

func (x *BaseUnit_AuraEffectRate) GetAuraType() uint32 {
	if x != nil {
		return x.AuraType
	}
	return 0
}

func (x *BaseUnit_AuraEffectRate) GetEffectValue() int32 {
	if x != nil {
		return x.EffectValue
	}
	return 0
}

func (x *BaseUnit_AuraEffectRate) GetSecondaryValue() int32 {
	if x != nil {
		return x.SecondaryValue
	}
	return 0
}

type Skill_Effect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target         Skill_Effect_Target         `protobuf:"varint,1,opt,name=target,proto3,enum=battle.Skill_Effect_Target" json:"target,omitempty"`
	Param          Skill_Effect_Param          `protobuf:"varint,2,opt,name=param,proto3,enum=battle.Skill_Effect_Param" json:"param,omitempty"`
	Calc           Skill_Effect_Calc           `protobuf:"varint,3,opt,name=calc,proto3,enum=battle.Skill_Effect_Calc" json:"calc,omitempty"`
	AdditionalCalc Skill_Effect_AdditionalCalc `protobuf:"varint,4,opt,name=additional_calc,json=additionalCalc,proto3,enum=battle.Skill_Effect_AdditionalCalc" json:"additional_calc,omitempty"`
	MinRate        int32                       `protobuf:"varint,5,opt,name=min_rate,json=minRate,proto3" json:"min_rate,omitempty"`
	MaxRate        int32                       `protobuf:"varint,6,opt,name=max_rate,json=maxRate,proto3" json:"max_rate,omitempty"`
	IsDamage       bool                        `protobuf:"varint,7,opt,name=is_damage,json=isDamage,proto3" json:"is_damage,omitempty"`
	AdditionalRate int32                       `protobuf:"varint,8,opt,name=additional_rate,json=additionalRate,proto3" json:"additional_rate,omitempty"`
}

func (x *Skill_Effect) Reset() {
	*x = Skill_Effect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Skill_Effect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Skill_Effect) ProtoMessage() {}

func (x *Skill_Effect) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Skill_Effect.ProtoReflect.Descriptor instead.
func (*Skill_Effect) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Skill_Effect) GetTarget() Skill_Effect_Target {
	if x != nil {
		return x.Target
	}
	return Skill_Effect_SELF
}

func (x *Skill_Effect) GetParam() Skill_Effect_Param {
	if x != nil {
		return x.Param
	}
	return Skill_Effect_NONE
}

func (x *Skill_Effect) GetCalc() Skill_Effect_Calc {
	if x != nil {
		return x.Calc
	}
	return Skill_Effect_MY_PHY
}

func (x *Skill_Effect) GetAdditionalCalc() Skill_Effect_AdditionalCalc {
	if x != nil {
		return x.AdditionalCalc
	}
	return Skill_Effect_NO_ADDITIONAL
}

func (x *Skill_Effect) GetMinRate() int32 {
	if x != nil {
		return x.MinRate
	}
	return 0
}

func (x *Skill_Effect) GetMaxRate() int32 {
	if x != nil {
		return x.MaxRate
	}
	return 0
}

func (x *Skill_Effect) GetIsDamage() bool {
	if x != nil {
		return x.IsDamage
	}
	return false
}

func (x *Skill_Effect) GetAdditionalRate() int32 {
	if x != nil {
		return x.AdditionalRate
	}
	return 0
}

type Aura_Effect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target         Aura_Effect_Target `protobuf:"varint,1,opt,name=target,proto3,enum=battle.Aura_Effect_Target" json:"target,omitempty"`
	Param          Aura_Effect_Param  `protobuf:"varint,2,opt,name=param,proto3,enum=battle.Aura_Effect_Param" json:"param,omitempty"`
	Calc           Aura_Effect_Calc   `protobuf:"varint,3,opt,name=calc,proto3,enum=battle.Aura_Effect_Calc" json:"calc,omitempty"`
	MinRate        int32              `protobuf:"varint,4,opt,name=min_rate,json=minRate,proto3" json:"min_rate,omitempty"`
	EffectRate     int32              `protobuf:"varint,5,opt,name=effect_rate,json=effectRate,proto3" json:"effect_rate,omitempty"`
	AdditionalRate int32              `protobuf:"varint,6,opt,name=additional_rate,json=additionalRate,proto3" json:"additional_rate,omitempty"`
	IsDamage       bool               `protobuf:"varint,7,opt,name=is_damage,json=isDamage,proto3" json:"is_damage,omitempty"`
}

func (x *Aura_Effect) Reset() {
	*x = Aura_Effect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aura_Effect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aura_Effect) ProtoMessage() {}

func (x *Aura_Effect) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aura_Effect.ProtoReflect.Descriptor instead.
func (*Aura_Effect) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{11, 0}
}

func (x *Aura_Effect) GetTarget() Aura_Effect_Target {
	if x != nil {
		return x.Target
	}
	return Aura_Effect_SELF
}

func (x *Aura_Effect) GetParam() Aura_Effect_Param {
	if x != nil {
		return x.Param
	}
	return Aura_Effect_NONE
}

func (x *Aura_Effect) GetCalc() Aura_Effect_Calc {
	if x != nil {
		return x.Calc
	}
	return Aura_Effect_MY_PHY
}

func (x *Aura_Effect) GetMinRate() int32 {
	if x != nil {
		return x.MinRate
	}
	return 0
}

func (x *Aura_Effect) GetEffectRate() int32 {
	if x != nil {
		return x.EffectRate
	}
	return 0
}

func (x *Aura_Effect) GetAdditionalRate() int32 {
	if x != nil {
		return x.AdditionalRate
	}
	return 0
}

func (x *Aura_Effect) GetIsDamage() bool {
	if x != nil {
		return x.IsDamage
	}
	return false
}

type JinSkillEffect_Effect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target   JinSkillEffect_Effect_Target `protobuf:"varint,1,opt,name=target,proto3,enum=battle.JinSkillEffect_Effect_Target" json:"target,omitempty"`
	Param    JinSkillEffect_Effect_Param  `protobuf:"varint,2,opt,name=param,proto3,enum=battle.JinSkillEffect_Effect_Param" json:"param,omitempty"`
	Calc     JinSkillEffect_Effect_Calc   `protobuf:"varint,3,opt,name=calc,proto3,enum=battle.JinSkillEffect_Effect_Calc" json:"calc,omitempty"`
	MinRate  int32                        `protobuf:"varint,4,opt,name=min_rate,json=minRate,proto3" json:"min_rate,omitempty"`
	MaxRate  int32                        `protobuf:"varint,5,opt,name=max_rate,json=maxRate,proto3" json:"max_rate,omitempty"`
	IsDamage bool                         `protobuf:"varint,6,opt,name=is_damage,json=isDamage,proto3" json:"is_damage,omitempty"`
}

func (x *JinSkillEffect_Effect) Reset() {
	*x = JinSkillEffect_Effect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JinSkillEffect_Effect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JinSkillEffect_Effect) ProtoMessage() {}

func (x *JinSkillEffect_Effect) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JinSkillEffect_Effect.ProtoReflect.Descriptor instead.
func (*JinSkillEffect_Effect) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{13, 0}
}

func (x *JinSkillEffect_Effect) GetTarget() JinSkillEffect_Effect_Target {
	if x != nil {
		return x.Target
	}
	return JinSkillEffect_Effect_ENEMY_FIRST
}

func (x *JinSkillEffect_Effect) GetParam() JinSkillEffect_Effect_Param {
	if x != nil {
		return x.Param
	}
	return JinSkillEffect_Effect_NONE
}

func (x *JinSkillEffect_Effect) GetCalc() JinSkillEffect_Effect_Calc {
	if x != nil {
		return x.Calc
	}
	return JinSkillEffect_Effect_OUR_PHY
}

func (x *JinSkillEffect_Effect) GetMinRate() int32 {
	if x != nil {
		return x.MinRate
	}
	return 0
}

func (x *JinSkillEffect_Effect) GetMaxRate() int32 {
	if x != nil {
		return x.MaxRate
	}
	return 0
}

func (x *JinSkillEffect_Effect) GetIsDamage() bool {
	if x != nil {
		return x.IsDamage
	}
	return false
}

var File_battle_proto protoreflect.FileDescriptor

var file_battle_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x27, 0x0a, 0x08, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x9c, 0x0c,
	0x0a, 0x06, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x64, 0x65,
	0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6a, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x6a, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x34,
	0x0a, 0x16, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x67, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x67, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x04, 0x6a, 0x69, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x4a, 0x69, 0x6e, 0x52, 0x04, 0x6a, 0x69,
	0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x29, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x24, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x57, 0x0a,
	0x29, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x24, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x61,
	0x75, 0x72, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e,
	0x41, 0x75, 0x72, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x61, 0x75, 0x72, 0x61, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x49, 0x4e, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x52, 0x41, 0x57, 0x10, 0x04,
	0x22, 0x47, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x22, 0xa0, 0x01, 0x0a, 0x09, 0x41, 0x75,
	0x72, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x52, 0x53, 0x54,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x55, 0x52, 0x41, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x41, 0x55, 0x52, 0x41, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x41, 0x55, 0x52, 0x41, 0x5f, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56,
	0x45, 0x5f, 0x41, 0x55, 0x52, 0x41, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x55, 0x52, 0x41, 0x10,
	0x04, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x55, 0x52,
	0x41, 0x5f, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x22, 0x87, 0x04, 0x0a,
	0x0c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x73,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x73, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x6a, 0x69, 0x6e, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4a, 0x69, 0x6e, 0x52, 0x04, 0x6a, 0x69, 0x6e, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6a, 0x69, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6a, 0x69, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x6a, 0x69, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6a, 0x69, 0x6e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x72,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x75,
	0x72, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5b, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x24,
	0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x22, 0xfb, 0x09, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x68, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x68, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x70, 0x68, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x69, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70,
	0x66, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x66, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x12, 0x4d, 0x0a, 0x0f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x31, 0x30, 0x30, 0x30, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x61, 0x74, 0x65, 0x31,
	0x30, 0x30, 0x30, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x31, 0x30, 0x30, 0x30, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x65, 0x72, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35,
	0x0a, 0x05, 0x61, 0x75, 0x72, 0x61, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x2e,
	0x41, 0x75, 0x72, 0x61, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x61, 0x75, 0x72, 0x61, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x70, 0x68, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x68, 0x79, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x75, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x75, 0x74, 0x12, 0x38, 0x0a,
	0x0d, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x45, 0x6e,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x31, 0x30, 0x30, 0x30, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x79, 0x0a, 0x0e, 0x41, 0x75,
	0x72, 0x61, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x75, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x61, 0x75, 0x72, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe9, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f,
	0x49, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x4d, 0x59, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x13, 0x0a,
	0x0f, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45,
	0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x44,
	0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x45, 0x41, 0x52, 0x10,
	0x09, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41, 0x52, 0x52, 0x49, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x09,
	0x0a, 0x05, 0x42, 0x4c, 0x45, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x55,
	0x4e, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x55,
	0x54, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x47, 0x49, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47,
	0x45, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x43, 0x4f, 0x59, 0x10, 0x10, 0x12,
	0x09, 0x0a, 0x05, 0x43, 0x55, 0x52, 0x53, 0x45, 0x10, 0x11, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x48,
	0x41, 0x52, 0x4d, 0x10, 0x12, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x55, 0x52, 0x41, 0x5f, 0x41, 0x44,
	0x44, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x13, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x55, 0x52, 0x41, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x44,
	0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x14, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x55, 0x52, 0x41, 0x5f,
	0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x44, 0x41, 0x4d, 0x41,
	0x47, 0x45, 0x10, 0x15, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x55, 0x52, 0x41, 0x5f, 0x52, 0x45, 0x43,
	0x45, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10,
	0x16, 0x22, 0xbf, 0x0e, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x68, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x68, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x70, 0x68, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x69, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x65, 0x64, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x62, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31,
	0x0a, 0x14, 0x72, 0x65, 0x73, 0x75, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65,
	0x73, 0x75, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x6f, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x6f, 0x79, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x63, 0x6f, 0x79, 0x5f,
	0x69, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x64, 0x65, 0x63, 0x6f, 0x79, 0x49, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x74,
	0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x61, 0x74, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x65, 0x63, 0x6f, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x63, 0x6f, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50,
	0x68, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6a,
	0x75, 0x64, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x4a, 0x75, 0x64, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x47, 0x0a, 0x0c, 0x61, 0x75, 0x72, 0x61, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x2e, 0x41, 0x75, 0x72, 0x61, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x75, 0x72,
	0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x75, 0x72, 0x61,
	0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x75, 0x72, 0x61, 0x44, 0x65, 0x61, 0x74, 0x68, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x52, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x75, 0x72, 0x61, 0x73, 0x18, 0x1e, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x75, 0x72, 0x61, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x75, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x75, 0x74, 0x12,
	0x2f, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18,
	0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x12, 0x5a, 0x0a, 0x13, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x69,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x38, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x2e, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x65, 0x6e,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x75,
	0x72, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44,
	0x0a, 0x16, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x8c, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f,
	0x49, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03,
	0x12, 0x08, 0x0a, 0x04, 0x46, 0x45, 0x41, 0x52, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41,
	0x52, 0x52, 0x49, 0x45, 0x52, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x45, 0x45, 0x44,
	0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x55, 0x4e, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b,
	0x50, 0x52, 0x4f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x09, 0x0a,
	0x05, 0x43, 0x55, 0x52, 0x53, 0x45, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x48, 0x41, 0x52,
	0x4d, 0x10, 0x0a, 0x22, 0x58, 0x0a, 0x03, 0x4a, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4a, 0x69, 0x6e, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4a, 0x69, 0x6e, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x9e, 0x01,
	0x0a, 0x07, 0x42, 0x61, 0x73, 0x65, 0x4a, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x21, 0x0a, 0x0c, 0x6a, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6a, 0x69, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6a, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x70, 0x66, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x70, 0x66, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6a, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8a,
	0x03, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4a, 0x69, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x6a, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6a, 0x69, 0x6e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x4e, 0x0a, 0x24, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x58, 0x0a, 0x2a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6a, 0x69, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x24, 0x6c, 0x61, 0x73, 0x74, 0x4a, 0x69, 0x6e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x6c, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x22, 0x51, 0x0a, 0x0a, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc6,
	0x21, 0x0a, 0x05, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x45, 0x6e, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x1a, 0xf7, 0x1b, 0x0a, 0x06, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x33,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2d, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x52, 0x04,
	0x63, 0x61, 0x6c, 0x63, 0x12, 0x4c, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61,
	0x6c, 0x63, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61,
	0x6c, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x22, 0xb1,
	0x05, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c,
	0x46, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x46, 0x49, 0x52,
	0x53, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x41, 0x4c,
	0x4c, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46, 0x49, 0x52, 0x53,
	0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x10,
	0x04, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54,
	0x5f, 0x48, 0x50, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10,
	0x06, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45,
	0x53, 0x54, 0x5f, 0x48, 0x50, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x4d, 0x59,
	0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x48, 0x50, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x48,
	0x59, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4c, 0x4f, 0x57,
	0x45, 0x53, 0x54, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x45,
	0x4d, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x0b,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54,
	0x5f, 0x49, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x47, 0x49, 0x10, 0x0d, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x47,
	0x49, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4c, 0x41, 0x53,
	0x54, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x46, 0x52, 0x4f,
	0x4e, 0x54, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4d, 0x49,
	0x44, 0x44, 0x4c, 0x45, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f,
	0x42, 0x41, 0x43, 0x4b, 0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x48, 0x50, 0x10, 0x13, 0x12, 0x14, 0x0a, 0x10, 0x41,
	0x4c, 0x4c, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x48, 0x59, 0x10,
	0x14, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54,
	0x5f, 0x50, 0x48, 0x59, 0x10, 0x15, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x16, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x10,
	0x17, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53,
	0x54, 0x5f, 0x41, 0x47, 0x49, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x4c, 0x59, 0x5f,
	0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x47, 0x49, 0x10, 0x19, 0x12, 0x0d, 0x0a, 0x09,
	0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x1a, 0x12, 0x18, 0x0a, 0x14, 0x41,
	0x4c, 0x4c, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x48, 0x50, 0x10, 0x1b, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4c, 0x4f,
	0x57, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x48, 0x50, 0x10, 0x1c, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x48, 0x50, 0x10, 0x1d, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x45,
	0x4d, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x48,
	0x50, 0x10, 0x1e, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4d, 0x49, 0x44, 0x44,
	0x4c, 0x45, 0x10, 0x1f, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46, 0x52, 0x4f,
	0x4e, 0x54, 0x10, 0x20, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x42, 0x41, 0x43,
	0x4b, 0x10, 0x21, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x10, 0x22, 0x22, 0xc6, 0x03, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x50, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x50, 0x48, 0x59, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x03,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x47, 0x49, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x49,
	0x53, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x10, 0x06,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12,
	0x08, 0x0a, 0x04, 0x46, 0x45, 0x41, 0x52, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41, 0x52,
	0x52, 0x49, 0x45, 0x52, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x45, 0x45, 0x44, 0x10,
	0x0a, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x5f, 0x46, 0x45, 0x41, 0x52, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x55, 0x4e,
	0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x48, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48, 0x59, 0x5f, 0x49, 0x4e,
	0x54, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x48, 0x59,
	0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x47, 0x49, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54,
	0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x48, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x47,
	0x49, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52,
	0x4f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x12, 0x12, 0x09, 0x0a, 0x05, 0x44,
	0x45, 0x43, 0x4f, 0x59, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x5f, 0x42, 0x4c, 0x45, 0x45, 0x44, 0x10, 0x14, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x48, 0x41, 0x52,
	0x47, 0x45, 0x10, 0x15, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x48,
	0x50, 0x10, 0x16, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x50, 0x48,
	0x59, 0x10, 0x17, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x49, 0x4e,
	0x54, 0x10, 0x18, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x41, 0x47,
	0x49, 0x10, 0x19, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x43, 0x48,
	0x41, 0x52, 0x47, 0x45, 0x10, 0x1a, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x55, 0x52, 0x53, 0x45, 0x10,
	0x1b, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x1c, 0x12, 0x09, 0x0a,
	0x05, 0x43, 0x48, 0x41, 0x52, 0x4d, 0x10, 0x1d, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x1e, 0x22, 0xae, 0x0e, 0x0a, 0x04,
	0x43, 0x61, 0x6c, 0x63, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x59, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x4d, 0x59, 0x5f, 0x41, 0x47, 0x49, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x59, 0x5f, 0x49,
	0x4e, 0x54, 0x5f, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x03, 0x12, 0x18, 0x0a,
	0x14, 0x4d, 0x59, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x59, 0x5f, 0x4d, 0x41,
	0x58, 0x5f, 0x48, 0x50, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x59, 0x5f, 0x44, 0x41, 0x4d,
	0x41, 0x47, 0x45, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x50, 0x48,
	0x59, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x10,
	0x08, 0x12, 0x0c, 0x0a, 0x08, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x41, 0x47, 0x49, 0x10, 0x09, 0x12,
	0x11, 0x0a, 0x0d, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x42, 0x55, 0x46, 0x46,
	0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x42,
	0x55, 0x46, 0x46, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x41, 0x47,
	0x49, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x59, 0x4f, 0x55, 0x52,
	0x5f, 0x50, 0x48, 0x59, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x0d, 0x12, 0x13, 0x0a,
	0x0f, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46,
	0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x41, 0x47, 0x49, 0x5f, 0x44,
	0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x59, 0x5f, 0x50, 0x48,
	0x59, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x59, 0x5f, 0x49,
	0x4e, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x59, 0x5f,
	0x41, 0x47, 0x49, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x12, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x59,
	0x5f, 0x50, 0x48, 0x59, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x13, 0x12, 0x11, 0x0a,
	0x0d, 0x4d, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x14,
	0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x59, 0x5f, 0x41, 0x47, 0x49, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46,
	0x46, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f,
	0x42, 0x55, 0x46, 0x46, 0x10, 0x16, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x59, 0x5f, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x17, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x4c, 0x4c, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x18,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x44,
	0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x19, 0x12, 0x13, 0x0a, 0x0f, 0x59, 0x4f, 0x55, 0x52, 0x5f,
	0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x1a, 0x12, 0x15, 0x0a, 0x11,
	0x59, 0x4f, 0x55, 0x52, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46,
	0x46, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x1c, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4e, 0x45,
	0x4d, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10,
	0x1d, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x59, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x59, 0x4f, 0x55, 0x52,
	0x5f, 0x49, 0x4e, 0x54, 0x10, 0x1e, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x54,
	0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x1f, 0x12,
	0x19, 0x0a, 0x15, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x50, 0x48,
	0x59, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x20, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c,
	0x4c, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x46,
	0x46, 0x10, 0x21, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41,
	0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x22, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x41, 0x47, 0x49,
	0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x23, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4c, 0x4c, 0x59, 0x5f,
	0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x41, 0x47, 0x49, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46,
	0x10, 0x24, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41,
	0x4c, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x25, 0x12, 0x1a, 0x0a, 0x16,
	0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x50, 0x48, 0x59, 0x5f,
	0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x26, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x45, 0x4d,
	0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46,
	0x10, 0x27, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41,
	0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x28, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x41, 0x47,
	0x49, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x29, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x45, 0x4d,
	0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x41, 0x47, 0x49, 0x5f, 0x44, 0x45, 0x42, 0x55,
	0x46, 0x46, 0x10, 0x2a, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x59, 0x5f, 0x53, 0x4c, 0x45, 0x45, 0x50,
	0x5f, 0x50, 0x48, 0x59, 0x10, 0x2b, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x59, 0x5f, 0x50, 0x4f, 0x49,
	0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x2c, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x59, 0x5f,
	0x42, 0x4c, 0x45, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x2d, 0x12, 0x12, 0x0a, 0x0e, 0x4d,
	0x59, 0x5f, 0x42, 0x41, 0x52, 0x52, 0x49, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x2e, 0x12,
	0x19, 0x0a, 0x15, 0x4d, 0x59, 0x5f, 0x42, 0x4c, 0x45, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x5f,
	0x59, 0x4f, 0x55, 0x52, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x2f, 0x12, 0x0f, 0x0a, 0x0b, 0x59, 0x4f,
	0x55, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x50, 0x10, 0x30, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x59, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x44, 0x5f, 0x48, 0x50, 0x10, 0x31,
	0x12, 0x15, 0x0a, 0x11, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x41, 0x53,
	0x45, 0x44, 0x5f, 0x48, 0x50, 0x10, 0x32, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x59, 0x5f, 0x43, 0x48,
	0x41, 0x52, 0x47, 0x45, 0x10, 0x33, 0x12, 0x0f, 0x0a, 0x0b, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x43,
	0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x34, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49,
	0x43, 0x10, 0x35, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x59, 0x5f, 0x50, 0x4f, 0x49, 0x53, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x54, 0x10, 0x36, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x59, 0x5f, 0x46, 0x45, 0x41,
	0x52, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x37, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x59, 0x5f, 0x46, 0x45,
	0x41, 0x52, 0x5f, 0x41, 0x47, 0x49, 0x10, 0x38, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x4c, 0x59,
	0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x48, 0x50, 0x10, 0x39, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c,
	0x4c, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x3a, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x3b,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x41, 0x47,
	0x49, 0x10, 0x3c, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46, 0x49, 0x52, 0x53,
	0x54, 0x5f, 0x48, 0x50, 0x10, 0x3d, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46,
	0x49, 0x52, 0x53, 0x54, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x3e, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c,
	0x4c, 0x59, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x3f, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x41, 0x47, 0x49,
	0x10, 0x40, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c,
	0x45, 0x5f, 0x48, 0x50, 0x10, 0x41, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4d,
	0x49, 0x44, 0x44, 0x4c, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x42, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x4c, 0x4c, 0x59, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x43,
	0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x5f,
	0x41, 0x47, 0x49, 0x10, 0x44, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x54, 0x4f,
	0x54, 0x41, 0x4c, 0x5f, 0x48, 0x50, 0x10, 0x45, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x59,
	0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x46, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x47,
	0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x41,
	0x47, 0x49, 0x10, 0x48, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4c, 0x41,
	0x53, 0x54, 0x5f, 0x48, 0x50, 0x10, 0x49, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x45, 0x4d, 0x59,
	0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x4a, 0x12, 0x12, 0x0a, 0x0e, 0x45,
	0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x4b, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x41, 0x47,
	0x49, 0x10, 0x4c, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x46, 0x49, 0x52,
	0x53, 0x54, 0x5f, 0x48, 0x50, 0x10, 0x4d, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x4d, 0x59,
	0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x4e, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x10,
	0x4f, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54,
	0x5f, 0x41, 0x47, 0x49, 0x10, 0x50, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f,
	0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x5f, 0x48, 0x50, 0x10, 0x51, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x10,
	0x52, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c,
	0x45, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x53, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x4d, 0x59,
	0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x5f, 0x41, 0x47, 0x49, 0x10, 0x54, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x48, 0x50, 0x10,
	0x55, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c,
	0x5f, 0x50, 0x48, 0x59, 0x10, 0x56, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f,
	0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x57, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x41, 0x47, 0x49, 0x10, 0x58,
	0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x45, 0x44,
	0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x59, 0x22, 0xde, 0x01, 0x0a,
	0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x63, 0x12,
	0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x45, 0x41, 0x52, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x41, 0x52, 0x52, 0x49, 0x45,
	0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4c, 0x45, 0x45,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x55, 0x4e,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x53, 0x54,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x08, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x55, 0x52, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x09, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x48, 0x41, 0x52, 0x4d, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x0a, 0x12, 0x0e, 0x0a,
	0x0a, 0x44, 0x45, 0x43, 0x4f, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x0b, 0x22, 0x97, 0x03,
	0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x45, 0x4c, 0x46, 0x5f, 0x48, 0x50, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4c, 0x4c, 0x59,
	0x5f, 0x48, 0x50, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x41, 0x54, 0x48, 0x10, 0x06,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x56, 0x45, 0x52, 0x59, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x41,
	0x4c, 0x4c, 0x59, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x10, 0x09,
	0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x10, 0x0a,
	0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x10,
	0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x0c,
	0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x10,
	0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c,
	0x45, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x42, 0x41, 0x43,
	0x4b, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x46, 0x49, 0x52,
	0x53, 0x54, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4c, 0x41,
	0x53, 0x54, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45,
	0x4c, 0x46, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x13, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55,
	0x4e, 0x44, 0x45, 0x52, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x15, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x48, 0x50, 0x10, 0x16, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x48, 0x50, 0x10, 0x17, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x18, 0x22, 0xd1, 0x24, 0x0a, 0x04, 0x41, 0x75, 0x72, 0x61,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x75, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x61, 0x75, 0x72, 0x61, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x41, 0x75, 0x72, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x2e, 0x41, 0x75, 0x72, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x41, 0x75,
	0x72, 0x61, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x73, 0x1a, 0x89, 0x1d, 0x0a, 0x06, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x32, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x41, 0x75, 0x72, 0x61, 0x2e, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x41, 0x75, 0x72, 0x61, 0x2e, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x41, 0x75, 0x72, 0x61, 0x2e, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x63,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x22, 0xde, 0x05, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x45, 0x4c, 0x46, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x45, 0x4d, 0x59,
	0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4e, 0x45, 0x4d,
	0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x4c, 0x59, 0x5f,
	0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c, 0x4c, 0x59, 0x5f,
	0x41, 0x4c, 0x4c, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4c, 0x4f,
	0x57, 0x45, 0x53, 0x54, 0x5f, 0x48, 0x50, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e,
	0x44, 0x4f, 0x4d, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x48, 0x50, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x48, 0x50, 0x10, 0x08,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53,
	0x54, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x4d, 0x59,
	0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x0a, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x49,
	0x4e, 0x54, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4c, 0x4f,
	0x57, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e,
	0x45, 0x4d, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x47, 0x49, 0x10,
	0x0d, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x53,
	0x54, 0x5f, 0x41, 0x47, 0x49, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x45, 0x4d, 0x59,
	0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x45, 0x4d, 0x59,
	0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x45, 0x4d,
	0x59, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e,
	0x45, 0x4d, 0x59, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c,
	0x4c, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x48, 0x50, 0x10, 0x13, 0x12,
	0x14, 0x0a, 0x10, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x5f,
	0x50, 0x48, 0x59, 0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4c, 0x4f,
	0x57, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x15, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4c,
	0x4c, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x16,
	0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54, 0x5f,
	0x49, 0x4e, 0x54, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x47, 0x49, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x4c, 0x4c, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x47, 0x49, 0x10, 0x19,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x1a, 0x12,
	0x18, 0x0a, 0x14, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x48, 0x50, 0x10, 0x1b, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c, 0x4c,
	0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x48, 0x50,
	0x10, 0x1c, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x45, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x48, 0x50, 0x10, 0x1d, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x48, 0x50, 0x10, 0x1e, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x4c, 0x59, 0x5f,
	0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x10, 0x1f, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x4c, 0x59,
	0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x10, 0x20, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x4c, 0x59,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x21, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x4c, 0x59, 0x5f,
	0x44, 0x45, 0x41, 0x54, 0x48, 0x10, 0x22, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x41, 0x52, 0x47, 0x45,
	0x54, 0x10, 0x23, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x24, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c,
	0x4c, 0x10, 0x25, 0x22, 0xd7, 0x06, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x50, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x50, 0x48, 0x59, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10,
	0x03, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x47, 0x49, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f,
	0x49, 0x53, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x10,
	0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x07,
	0x12, 0x08, 0x0a, 0x04, 0x46, 0x45, 0x41, 0x52, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41,
	0x52, 0x52, 0x49, 0x45, 0x52, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x45, 0x45, 0x44,
	0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x5f, 0x46, 0x45, 0x41, 0x52, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x55,
	0x4e, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x48, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48, 0x59, 0x5f, 0x49,
	0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x48,
	0x59, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x47, 0x49, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53,
	0x54, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x48, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41,
	0x47, 0x49, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x50,
	0x52, 0x4f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x12, 0x12, 0x09, 0x0a, 0x05,
	0x44, 0x45, 0x43, 0x4f, 0x59, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x5f, 0x42, 0x4c, 0x45, 0x45, 0x44, 0x10, 0x14, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x48, 0x41,
	0x52, 0x47, 0x45, 0x10, 0x15, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f,
	0x48, 0x50, 0x10, 0x16, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x50,
	0x48, 0x59, 0x10, 0x17, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x49,
	0x4e, 0x54, 0x10, 0x18, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x41,
	0x47, 0x49, 0x10, 0x19, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x43,
	0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x1a, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x55, 0x52, 0x53, 0x45,
	0x10, 0x1b, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x1c, 0x12, 0x09,
	0x0a, 0x05, 0x43, 0x48, 0x41, 0x52, 0x4d, 0x10, 0x1d, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x41, 0x4d,
	0x41, 0x47, 0x45, 0x5f, 0x43, 0x55, 0x54, 0x5f, 0x41, 0x47, 0x49, 0x10, 0x1e, 0x12, 0x11, 0x0a,
	0x0d, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x55, 0x54, 0x5f, 0x48, 0x50, 0x10, 0x1f,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x48, 0x59,
	0x10, 0x20, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x49,
	0x4e, 0x54, 0x10, 0x21, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f,
	0x48, 0x50, 0x10, 0x22, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f,
	0x50, 0x48, 0x59, 0x10, 0x23, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x5f, 0x49, 0x4e, 0x54, 0x10, 0x24, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x5f, 0x41, 0x47, 0x49, 0x10, 0x25, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x43, 0x52, 0x45,
	0x41, 0x53, 0x45, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x55, 0x54, 0x10, 0x27,
	0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x53, 0x55, 0x52, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x28, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x50, 0x4f, 0x49, 0x53, 0x4f, 0x4e, 0x10, 0x29, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53,
	0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x55, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x2a, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x46, 0x45, 0x41, 0x52, 0x10, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x53, 0x49,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x55, 0x4e, 0x10, 0x2c, 0x12, 0x12, 0x0a,
	0x0e, 0x49, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x53, 0x4f, 0x4e, 0x10,
	0x2d, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x2e, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x59, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x2f,
	0x12, 0x15, 0x0a, 0x11, 0x4d, 0x59, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x44,
	0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x30, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x59, 0x5f, 0x52, 0x45,
	0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45,
	0x10, 0x31, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45,
	0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x32, 0x22, 0xae, 0x0e,
	0x0a, 0x04, 0x43, 0x61, 0x6c, 0x63, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x59, 0x5f, 0x50, 0x48, 0x59,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x59, 0x5f, 0x41, 0x47, 0x49, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x59,
	0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x03, 0x12,
	0x18, 0x0a, 0x14, 0x4d, 0x59, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x49, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x59, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x48, 0x50, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x59, 0x5f, 0x44,
	0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x59, 0x4f, 0x55, 0x52, 0x5f,
	0x50, 0x48, 0x59, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x49, 0x4e,
	0x54, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x41, 0x47, 0x49, 0x10,
	0x09, 0x12, 0x11, 0x0a, 0x0d, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x42, 0x55,
	0x46, 0x46, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x49, 0x4e, 0x54,
	0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x59, 0x4f, 0x55, 0x52, 0x5f,
	0x41, 0x47, 0x49, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x59, 0x4f,
	0x55, 0x52, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x0d, 0x12,
	0x13, 0x0a, 0x0f, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x42, 0x55,
	0x46, 0x46, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x41, 0x47, 0x49,
	0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x59, 0x5f,
	0x50, 0x48, 0x59, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x59,
	0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x4d,
	0x59, 0x5f, 0x41, 0x47, 0x49, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x12, 0x12, 0x11, 0x0a, 0x0d,
	0x4d, 0x59, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x13, 0x12,
	0x11, 0x0a, 0x0d, 0x4d, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46,
	0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x59, 0x5f, 0x41, 0x47, 0x49, 0x5f, 0x44, 0x45, 0x42,
	0x55, 0x46, 0x46, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41,
	0x4c, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x16, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x59, 0x5f, 0x54,
	0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x17, 0x12, 0x13, 0x0a,
	0x0f, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x42, 0x55, 0x46, 0x46,
	0x10, 0x18, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c,
	0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x19, 0x12, 0x13, 0x0a, 0x0f, 0x59, 0x4f, 0x55,
	0x52, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x1a, 0x12, 0x15,
	0x0a, 0x11, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x42,
	0x55, 0x46, 0x46, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x54,
	0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x1c, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46,
	0x46, 0x10, 0x1d, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x59, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x59, 0x4f,
	0x55, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x1e, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c, 0x4c, 0x59,
	0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10,
	0x1f, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f,
	0x50, 0x48, 0x59, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x20, 0x12, 0x17, 0x0a, 0x13,
	0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x42,
	0x55, 0x46, 0x46, 0x10, 0x21, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x54, 0x4f,
	0x54, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x22,
	0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x41,
	0x47, 0x49, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x23, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4c, 0x4c,
	0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x41, 0x47, 0x49, 0x5f, 0x44, 0x45, 0x42, 0x55,
	0x46, 0x46, 0x10, 0x24, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x54, 0x4f,
	0x54, 0x41, 0x4c, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x25, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x50, 0x48,
	0x59, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x26, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e,
	0x45, 0x4d, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x55,
	0x46, 0x46, 0x10, 0x27, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x54, 0x4f,
	0x54, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x28,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f,
	0x41, 0x47, 0x49, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x29, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e,
	0x45, 0x4d, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x41, 0x47, 0x49, 0x5f, 0x44, 0x45,
	0x42, 0x55, 0x46, 0x46, 0x10, 0x2a, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x59, 0x5f, 0x53, 0x4c, 0x45,
	0x45, 0x50, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x2b, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x59, 0x5f, 0x50,
	0x4f, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x2c, 0x12, 0x10, 0x0a, 0x0c, 0x4d,
	0x59, 0x5f, 0x42, 0x4c, 0x45, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x2d, 0x12, 0x12, 0x0a,
	0x0e, 0x4d, 0x59, 0x5f, 0x42, 0x41, 0x52, 0x52, 0x49, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x10,
	0x2e, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x59, 0x5f, 0x42, 0x4c, 0x45, 0x45, 0x44, 0x5f, 0x49, 0x4e,
	0x54, 0x5f, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x2f, 0x12, 0x0f, 0x0a, 0x0b,
	0x59, 0x4f, 0x55, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x50, 0x10, 0x30, 0x12, 0x13, 0x0a,
	0x0f, 0x4d, 0x59, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x44, 0x5f, 0x48, 0x50,
	0x10, 0x31, 0x12, 0x15, 0x0a, 0x11, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45,
	0x41, 0x53, 0x45, 0x44, 0x5f, 0x48, 0x50, 0x10, 0x32, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x59, 0x5f,
	0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x33, 0x12, 0x0f, 0x0a, 0x0b, 0x59, 0x4f, 0x55, 0x52,
	0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x34, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41,
	0x54, 0x49, 0x43, 0x10, 0x35, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x59, 0x5f, 0x50, 0x4f, 0x49, 0x53,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x36, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x59, 0x5f, 0x46,
	0x45, 0x41, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x37, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x59, 0x5f,
	0x46, 0x45, 0x41, 0x52, 0x5f, 0x41, 0x47, 0x49, 0x10, 0x38, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c,
	0x4c, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x48, 0x50, 0x10, 0x39, 0x12, 0x11, 0x0a, 0x0d,
	0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x3a, 0x12,
	0x11, 0x0a, 0x0d, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x54,
	0x10, 0x3b, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f,
	0x41, 0x47, 0x49, 0x10, 0x3c, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46, 0x49,
	0x52, 0x53, 0x54, 0x5f, 0x48, 0x50, 0x10, 0x3d, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x59,
	0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x3e, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x3f,
	0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x41,
	0x47, 0x49, 0x10, 0x40, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4d, 0x49, 0x44,
	0x44, 0x4c, 0x45, 0x5f, 0x48, 0x50, 0x10, 0x41, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x4c, 0x59,
	0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x42, 0x12, 0x13, 0x0a,
	0x0f, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54,
	0x10, 0x43, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c,
	0x45, 0x5f, 0x41, 0x47, 0x49, 0x10, 0x44, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c, 0x4c, 0x59, 0x5f,
	0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x48, 0x50, 0x10, 0x45, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c,
	0x4c, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x46, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x54,
	0x10, 0x47, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c,
	0x5f, 0x41, 0x47, 0x49, 0x10, 0x48, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f,
	0x4c, 0x41, 0x53, 0x54, 0x5f, 0x48, 0x50, 0x10, 0x49, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x45,
	0x4d, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x4a, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x10,
	0x4b, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f,
	0x41, 0x47, 0x49, 0x10, 0x4c, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x46,
	0x49, 0x52, 0x53, 0x54, 0x5f, 0x48, 0x50, 0x10, 0x4d, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45,
	0x4d, 0x59, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x4e, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x49, 0x4e,
	0x54, 0x10, 0x4f, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x46, 0x49, 0x52,
	0x53, 0x54, 0x5f, 0x41, 0x47, 0x49, 0x10, 0x50, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x4d,
	0x59, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x5f, 0x48, 0x50, 0x10, 0x51, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x5f, 0x50, 0x48,
	0x59, 0x10, 0x52, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4d, 0x49, 0x44,
	0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x53, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45,
	0x4d, 0x59, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x5f, 0x41, 0x47, 0x49, 0x10, 0x54, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x48,
	0x50, 0x10, 0x55, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x56, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x4d,
	0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x57, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x41, 0x47, 0x49,
	0x10, 0x58, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x59, 0x22, 0xb6,
	0x04, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x45, 0x4c, 0x46, 0x5f, 0x48, 0x50, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4c, 0x4c,
	0x59, 0x5f, 0x48, 0x50, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x41, 0x54, 0x48, 0x10,
	0x06, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x56, 0x45, 0x52, 0x59, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04,
	0x41, 0x4c, 0x4c, 0x59, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x10,
	0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x10,
	0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45,
	0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10,
	0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54,
	0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4d, 0x49, 0x44, 0x44,
	0x4c, 0x45, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x42, 0x41,
	0x43, 0x4b, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x46, 0x49,
	0x52, 0x53, 0x54, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4c,
	0x41, 0x53, 0x54, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x45, 0x4c, 0x46, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x13,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x55, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x4d, 0x59,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x15, 0x12, 0x0c, 0x0a,
	0x08, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x48, 0x50, 0x10, 0x16, 0x12, 0x0e, 0x0a, 0x0a, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x55, 0x52, 0x41, 0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x4d,
	0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x55, 0x52, 0x41, 0x10, 0x18, 0x12, 0x12, 0x0a, 0x0e,
	0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x19,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10,
	0x1a, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x44, 0x44,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1b, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x4c, 0x59, 0x5f,
	0x44, 0x45, 0x41, 0x54, 0x48, 0x10, 0x1c, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x48, 0x50, 0x10, 0x1d, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x55, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x1e, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x48, 0x50, 0x10, 0x1f, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x20, 0x12, 0x08, 0x0a,
	0x04, 0x41, 0x55, 0x52, 0x41, 0x10, 0x21, 0x22, 0x52, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x4f, 0x4e,
	0x44, 0x41, 0x52, 0x59, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x41, 0x52, 0x59, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x22, 0xc2, 0x05, 0x0a, 0x08,
	0x4a, 0x69, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x6a, 0x69, 0x6e, 0x5f,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6a, 0x69, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a,
	0x1b, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6a, 0x69, 0x6e, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x4a, 0x69, 0x6e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x6a, 0x69, 0x6e, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x6c, 0x4a, 0x69, 0x6e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x1a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x6a, 0x69, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x16, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4a, 0x69, 0x6e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x4a, 0x69, 0x6e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0b, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x4a, 0x69, 0x6e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x50, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x4c,
	0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x4c,
	0x59, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x45,
	0x4d, 0x59, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x03, 0x22, 0x64, 0x0a, 0x0a, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x49, 0x4e, 0x54,
	0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f,
	0x50, 0x48, 0x59, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x04,
	0x22, 0xd5, 0x09, 0x0a, 0x0e, 0x4a, 0x69, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x6a, 0x69, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x6a, 0x69, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x4a, 0x69,
	0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x99, 0x08, 0x0a,
	0x06, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x2e, 0x4a, 0x69, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x4a, 0x69,
	0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x36, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x4a, 0x69, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x61,
	0x6c, 0x63, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x8f, 0x03, 0x0a, 0x06,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f,
	0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4e, 0x45, 0x4d, 0x59,
	0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46,
	0x49, 0x52, 0x53, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x41,
	0x4c, 0x4c, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x04,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53,
	0x54, 0x5f, 0x48, 0x50, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f,
	0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x48, 0x50, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x48, 0x59,
	0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x45,
	0x53, 0x54, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x45, 0x4d,
	0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x09, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54, 0x5f,
	0x49, 0x4e, 0x54, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x47, 0x49, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x47, 0x49,
	0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54,
	0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x46, 0x52, 0x4f, 0x4e,
	0x54, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x4d, 0x49, 0x44,
	0x44, 0x4c, 0x45, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x42,
	0x41, 0x43, 0x4b, 0x10, 0x12, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x13, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x14, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x10, 0x15, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x10, 0x16, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x17, 0x22, 0xb4, 0x01,
	0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x48, 0x59,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x47, 0x49, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x49, 0x53, 0x4f, 0x4e, 0x10, 0x05,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x4f, 0x4e, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x45,
	0x41, 0x52, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41, 0x52, 0x52, 0x49, 0x45, 0x52, 0x10,
	0x09, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x45, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x54, 0x55, 0x4e, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x53, 0x54, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x43, 0x4f, 0x59,
	0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x42, 0x4c, 0x45,
	0x45, 0x44, 0x10, 0x10, 0x22, 0xc1, 0x01, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x63, 0x12, 0x0b, 0x0a,
	0x07, 0x4f, 0x55, 0x52, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x55,
	0x52, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x55, 0x52, 0x5f, 0x41,
	0x47, 0x49, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x55, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x5f,
	0x59, 0x4f, 0x55, 0x52, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x55,
	0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x50, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x55,
	0x52, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x59, 0x4f,
	0x55, 0x52, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x59, 0x4f, 0x55, 0x52,
	0x5f, 0x49, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x41,
	0x47, 0x49, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x54, 0x4f,
	0x54, 0x41, 0x4c, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x25, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x49, 0x4e,
	0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x27, 0x22, 0xa5, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x28, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x2a, 0x15, 0x0a, 0x05, 0x42, 0x47, 0x4d, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x4e,
	0x45, 0x5f, 0x42, 0x47, 0x4d, 0x10, 0x00, 0x2a, 0x18, 0x0a, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x2a, 0xd3, 0x03, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x55, 0x50, 0x5f, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x41, 0x49, 0x44, 0x5f,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x44,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x11,
	0x0a, 0x0d, 0x4b, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10,
	0x05, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x52, 0x45, 0x4e, 0x41, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x49, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x49, 0x4e, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x52, 0x45, 0x4e, 0x41, 0x5f, 0x4e, 0x49,
	0x4e, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x4f, 0x4c, 0x4f, 0x53, 0x53, 0x45, 0x55, 0x4d, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10,
	0x0a, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x45, 0x50, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x52, 0x45, 0x4e, 0x41,
	0x5f, 0x4a, 0x49, 0x4e, 0x5f, 0x4e, 0x49, 0x4e, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x45, 0x50, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f,
	0x42, 0x4f, 0x53, 0x53, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x0d, 0x12, 0x12, 0x0a,
	0x0e, 0x4c, 0x41, 0x4e, 0x44, 0x57, 0x41, 0x52, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10,
	0x0e, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x55, 0x50, 0x5f, 0x4a, 0x49, 0x4e, 0x5f, 0x4e, 0x49, 0x4e,
	0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x0f, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x52,
	0x45, 0x4e, 0x41, 0x5f, 0x4a, 0x49, 0x4e, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x5f, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x49, 0x4e, 0x5f, 0x53, 0x49,
	0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x59,
	0x4d, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x12, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4f,
	0x55, 0x4c, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x13, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4f, 0x55,
	0x4c, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x14, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x48,
	0x52, 0x45, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x5f, 0x4f, 0x4e, 0x5f,
	0x54, 0x48, 0x52, 0x45, 0x45, 0x10, 0x15, 0x2a, 0x9b, 0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x25, 0x0a, 0x21, 0x48, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x41,
	0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x5f,
	0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x31, 0x30, 0x30, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x35, 0x30, 0x10,
	0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x5f,
	0x31, 0x30, 0x30, 0x10, 0x05, 0x32, 0x60, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x12, 0x10, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x20, 0x5a, 0x1e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x69, 0x6a, 0x6a, 0x69, 0x72, 0x69, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_battle_proto_rawDescOnce sync.Once
	file_battle_proto_rawDescData = file_battle_proto_rawDesc
)

func file_battle_proto_rawDescGZIP() []byte {
	file_battle_proto_rawDescOnce.Do(func() {
		file_battle_proto_rawDescData = protoimpl.X.CompressGZIP(file_battle_proto_rawDescData)
	})
	return file_battle_proto_rawDescData
}

var file_battle_proto_enumTypes = make([]protoimpl.EnumInfo, 25)
var file_battle_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_battle_proto_goTypes = []interface{}{
	(BGMId)(0),                        // 0: battle.BGMId
	(BackgroundId)(0),                 // 1: battle.BackgroundId
	(BattleType)(0),                   // 2: battle.BattleType
	(Rule)(0),                         // 3: battle.Rule
	(Battle_Result)(0),                // 4: battle.Battle.Result
	(Battle_State)(0),                 // 5: battle.Battle.State
	(Battle_AuraState)(0),             // 6: battle.Battle.AuraState
	(BaseUnit_Result)(0),              // 7: battle.BaseUnit.Result
	(CurrentUnit_State)(0),            // 8: battle.CurrentUnit.State
	(Skill_Condition)(0),              // 9: battle.Skill.Condition
	(Skill_Effect_Target)(0),          // 10: battle.Skill.Effect.Target
	(Skill_Effect_Param)(0),           // 11: battle.Skill.Effect.Param
	(Skill_Effect_Calc)(0),            // 12: battle.Skill.Effect.Calc
	(Skill_Effect_AdditionalCalc)(0),  // 13: battle.Skill.Effect.AdditionalCalc
	(Aura_Condition)(0),               // 14: battle.Aura.Condition
	(Aura_Type)(0),                    // 15: battle.Aura.Type
	(Aura_Effect_Target)(0),           // 16: battle.Aura.Effect.Target
	(Aura_Effect_Param)(0),            // 17: battle.Aura.Effect.Param
	(Aura_Effect_Calc)(0),             // 18: battle.Aura.Effect.Calc
	(JinSkill_FieldTarget)(0),         // 19: battle.JinSkill.FieldTarget
	(JinSkill_FieldState)(0),          // 20: battle.JinSkill.FieldState
	(JinSkillEffect_Effect_Target)(0), // 21: battle.JinSkillEffect.Effect.Target
	(JinSkillEffect_Effect_Param)(0),  // 22: battle.JinSkillEffect.Effect.Param
	(JinSkillEffect_Effect_Calc)(0),   // 23: battle.JinSkillEffect.Effect.Calc
	(EnchantInfo_Enchant)(0),          // 24: battle.EnchantInfo.Enchant
	(*BattleId)(nil),                  // 25: battle.BattleId
	(*Battle)(nil),                    // 26: battle.Battle
	(*BattleAction)(nil),              // 27: battle.BattleAction
	(*Unit)(nil),                      // 28: battle.Unit
	(*BaseUnit)(nil),                  // 29: battle.BaseUnit
	(*CurrentUnit)(nil),               // 30: battle.CurrentUnit
	(*Jin)(nil),                       // 31: battle.Jin
	(*BaseJin)(nil),                   // 32: battle.BaseJin
	(*CurrentJin)(nil),                // 33: battle.CurrentJin
	(*FieldState)(nil),                // 34: battle.FieldState
	(*Skill)(nil),                     // 35: battle.Skill
	(*Aura)(nil),                      // 36: battle.Aura
	(*JinSkill)(nil),                  // 37: battle.JinSkill
	(*JinSkillEffect)(nil),            // 38: battle.JinSkillEffect
	(*EnchantInfo)(nil),               // 39: battle.EnchantInfo
	nil,                               // 40: battle.Battle.RulesEntry
	nil,                               // 41: battle.BaseUnit.ResultRate1000Entry
	(*BaseUnit_AuraEffectRate)(nil),   // 42: battle.BaseUnit.AuraEffectRate
	nil,                               // 43: battle.CurrentUnit.AuraEnabledEntry
	nil,                               // 44: battle.CurrentUnit.StateEffectRateEntry
	nil,                               // 45: battle.CurrentUnit.WithinActionValueEntry
	(*Skill_Effect)(nil),              // 46: battle.Skill.Effect
	(*Aura_Effect)(nil),               // 47: battle.Aura.Effect
	(*JinSkillEffect_Effect)(nil),     // 48: battle.JinSkillEffect.Effect
}
var file_battle_proto_depIdxs = []int32{
	28, // 0: battle.Battle.units:type_name -> battle.Unit
	4,  // 1: battle.Battle.result:type_name -> battle.Battle.Result
	5,  // 2: battle.Battle.state:type_name -> battle.Battle.State
	27, // 3: battle.Battle.actions:type_name -> battle.BattleAction
	40, // 4: battle.Battle.rules:type_name -> battle.Battle.RulesEntry
	31, // 5: battle.Battle.jins:type_name -> battle.Jin
	34, // 6: battle.Battle.field_state:type_name -> battle.FieldState
	6,  // 7: battle.Battle.aura_state:type_name -> battle.Battle.AuraState
	30, // 8: battle.BattleAction.units:type_name -> battle.CurrentUnit
	33, // 9: battle.BattleAction.jins:type_name -> battle.CurrentJin
	29, // 10: battle.Unit.base:type_name -> battle.BaseUnit
	30, // 11: battle.Unit.current:type_name -> battle.CurrentUnit
	41, // 12: battle.BaseUnit.result_rate1000:type_name -> battle.BaseUnit.ResultRate1000Entry
	42, // 13: battle.BaseUnit.auras:type_name -> battle.BaseUnit.AuraEffectRate
	39, // 14: battle.BaseUnit.enchant_infos:type_name -> battle.EnchantInfo
	8,  // 15: battle.CurrentUnit.state:type_name -> battle.CurrentUnit.State
	43, // 16: battle.CurrentUnit.aura_enabled:type_name -> battle.CurrentUnit.AuraEnabledEntry
	44, // 17: battle.CurrentUnit.state_effect_rate:type_name -> battle.CurrentUnit.StateEffectRateEntry
	28, // 18: battle.CurrentUnit.last_targets:type_name -> battle.Unit
	45, // 19: battle.CurrentUnit.within_action_value:type_name -> battle.CurrentUnit.WithinActionValueEntry
	39, // 20: battle.CurrentUnit.enchant_infos:type_name -> battle.EnchantInfo
	32, // 21: battle.Jin.base:type_name -> battle.BaseJin
	33, // 22: battle.Jin.current:type_name -> battle.CurrentJin
	9,  // 23: battle.Skill.condition:type_name -> battle.Skill.Condition
	46, // 24: battle.Skill.effects:type_name -> battle.Skill.Effect
	39, // 25: battle.Skill.enchant_infos:type_name -> battle.EnchantInfo
	14, // 26: battle.Aura.condition:type_name -> battle.Aura.Condition
	15, // 27: battle.Aura.condition_type:type_name -> battle.Aura.Type
	47, // 28: battle.Aura.effects:type_name -> battle.Aura.Effect
	19, // 29: battle.JinSkill.field_target:type_name -> battle.JinSkill.FieldTarget
	20, // 30: battle.JinSkill.field_state:type_name -> battle.JinSkill.FieldState
	48, // 31: battle.JinSkillEffect.effects:type_name -> battle.JinSkillEffect.Effect
	24, // 32: battle.EnchantInfo.enchant_type:type_name -> battle.EnchantInfo.Enchant
	10, // 33: battle.Skill.Effect.target:type_name -> battle.Skill.Effect.Target
	11, // 34: battle.Skill.Effect.param:type_name -> battle.Skill.Effect.Param
	12, // 35: battle.Skill.Effect.calc:type_name -> battle.Skill.Effect.Calc
	13, // 36: battle.Skill.Effect.additional_calc:type_name -> battle.Skill.Effect.AdditionalCalc
	16, // 37: battle.Aura.Effect.target:type_name -> battle.Aura.Effect.Target
	17, // 38: battle.Aura.Effect.param:type_name -> battle.Aura.Effect.Param
	18, // 39: battle.Aura.Effect.calc:type_name -> battle.Aura.Effect.Calc
	21, // 40: battle.JinSkillEffect.Effect.target:type_name -> battle.JinSkillEffect.Effect.Target
	22, // 41: battle.JinSkillEffect.Effect.param:type_name -> battle.JinSkillEffect.Effect.Param
	23, // 42: battle.JinSkillEffect.Effect.calc:type_name -> battle.JinSkillEffect.Effect.Calc
	25, // 43: battle.BattleService.GetBattle:input_type -> battle.BattleId
	26, // 44: battle.BattleService.GetBattle:output_type -> battle.Battle
	44, // [44:45] is the sub-list for method output_type
	43, // [43:44] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_battle_proto_init() }
func file_battle_proto_init() {
	if File_battle_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_battle_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Battle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseJin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentJin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Skill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aura); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JinSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JinSkillEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnchantInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseUnit_AuraEffectRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Skill_Effect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aura_Effect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JinSkillEffect_Effect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_battle_proto_rawDesc,
			NumEnums:      25,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_battle_proto_goTypes,
		DependencyIndexes: file_battle_proto_depIdxs,
		EnumInfos:         file_battle_proto_enumTypes,
		MessageInfos:      file_battle_proto_msgTypes,
	}.Build()
	File_battle_proto = out.File
	file_battle_proto_rawDesc = nil
	file_battle_proto_goTypes = nil
	file_battle_proto_depIdxs = nil
}
