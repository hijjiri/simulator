// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0-devel
// 	protoc        v3.12.4
// source: battle.proto

package battle

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BattleType int32

const (
	BattleType_UNDEFINED_BATTLE BattleType = 0
	BattleType_SIMULATE_BATTLE  BattleType = 1
)

// Enum value maps for BattleType.
var (
	BattleType_name = map[int32]string{
		0: "UNDEFINED_BATTLE",
		1: "SIMULATE_BATTLE",
	}
	BattleType_value = map[string]int32{
		"UNDEFINED_BATTLE": 0,
		"SIMULATE_BATTLE":  1,
	}
)

func (x BattleType) Enum() *BattleType {
	p := new(BattleType)
	*p = x
	return p
}

func (x BattleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BattleType) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[0].Descriptor()
}

func (BattleType) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[0]
}

func (x BattleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BattleType.Descriptor instead.
func (BattleType) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{0}
}

type Battle_Result int32

const (
	Battle_PROGRESS Battle_Result = 0
	Battle_WIN      Battle_Result = 1
	Battle_LOSE     Battle_Result = 2
	Battle_TIME_UP  Battle_Result = 3
	Battle_DRAW     Battle_Result = 4
)

// Enum value maps for Battle_Result.
var (
	Battle_Result_name = map[int32]string{
		0: "PROGRESS",
		1: "WIN",
		2: "LOSE",
		3: "TIME_UP",
		4: "DRAW",
	}
	Battle_Result_value = map[string]int32{
		"PROGRESS": 0,
		"WIN":      1,
		"LOSE":     2,
		"TIME_UP":  3,
		"DRAW":     4,
	}
)

func (x Battle_Result) Enum() *Battle_Result {
	p := new(Battle_Result)
	*p = x
	return p
}

func (x Battle_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Battle_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[1].Descriptor()
}

func (Battle_Result) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[1]
}

func (x Battle_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Battle_Result.Descriptor instead.
func (Battle_Result) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{1, 0}
}

type Battle_State int32

const (
	Battle_ACTIVE         Battle_State = 0
	Battle_FIRST_PASSIVE  Battle_State = 1
	Battle_SECOND_PASSIVE Battle_State = 2
	Battle_OPENING        Battle_State = 3
)

// Enum value maps for Battle_State.
var (
	Battle_State_name = map[int32]string{
		0: "ACTIVE",
		1: "FIRST_PASSIVE",
		2: "SECOND_PASSIVE",
		3: "OPENING",
	}
	Battle_State_value = map[string]int32{
		"ACTIVE":         0,
		"FIRST_PASSIVE":  1,
		"SECOND_PASSIVE": 2,
		"OPENING":        3,
	}
)

func (x Battle_State) Enum() *Battle_State {
	p := new(Battle_State)
	*p = x
	return p
}

func (x Battle_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Battle_State) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[2].Descriptor()
}

func (Battle_State) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[2]
}

func (x Battle_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Battle_State.Descriptor instead.
func (Battle_State) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{1, 1}
}

type BaseUnit_Result int32

const (
	BaseUnit_NONE                    BaseUnit_Result = 0
	BaseUnit_POISON                  BaseUnit_Result = 1
	BaseUnit_SLEEP                   BaseUnit_Result = 2
	BaseUnit_CONFUSION               BaseUnit_Result = 3
	BaseUnit_RECOVERY                BaseUnit_Result = 4
	BaseUnit_MY_DAMAGE               BaseUnit_Result = 5
	BaseUnit_YOUR_PHY_DAMAGE         BaseUnit_Result = 7
	BaseUnit_YOUR_INT_DAMAGE         BaseUnit_Result = 8
	BaseUnit_FEAR                    BaseUnit_Result = 9
	BaseUnit_BARRIER                 BaseUnit_Result = 10
	BaseUnit_BLEED                   BaseUnit_Result = 11
	BaseUnit_STUN                    BaseUnit_Result = 12
	BaseUnit_DAMAGE_CUT              BaseUnit_Result = 13
	BaseUnit_AGI_CHARGE              BaseUnit_Result = 14
	BaseUnit_PROSTRATION             BaseUnit_Result = 15
	BaseUnit_DECOY                   BaseUnit_Result = 16
	BaseUnit_CURSE                   BaseUnit_Result = 17
	BaseUnit_CHARM                   BaseUnit_Result = 18
	BaseUnit_AURA_ADD_PHY_DAMAGE     BaseUnit_Result = 19
	BaseUnit_AURA_ADD_INT_DAMAGE     BaseUnit_Result = 20
	BaseUnit_AURA_RECEIVE_PHY_DAMAGE BaseUnit_Result = 21
	BaseUnit_AURA_RECEIVE_INT_DAMAGE BaseUnit_Result = 22
)

// Enum value maps for BaseUnit_Result.
var (
	BaseUnit_Result_name = map[int32]string{
		0:  "NONE",
		1:  "POISON",
		2:  "SLEEP",
		3:  "CONFUSION",
		4:  "RECOVERY",
		5:  "MY_DAMAGE",
		7:  "YOUR_PHY_DAMAGE",
		8:  "YOUR_INT_DAMAGE",
		9:  "FEAR",
		10: "BARRIER",
		11: "BLEED",
		12: "STUN",
		13: "DAMAGE_CUT",
		14: "AGI_CHARGE",
		15: "PROSTRATION",
		16: "DECOY",
		17: "CURSE",
		18: "CHARM",
		19: "AURA_ADD_PHY_DAMAGE",
		20: "AURA_ADD_INT_DAMAGE",
		21: "AURA_RECEIVE_PHY_DAMAGE",
		22: "AURA_RECEIVE_INT_DAMAGE",
	}
	BaseUnit_Result_value = map[string]int32{
		"NONE":                    0,
		"POISON":                  1,
		"SLEEP":                   2,
		"CONFUSION":               3,
		"RECOVERY":                4,
		"MY_DAMAGE":               5,
		"YOUR_PHY_DAMAGE":         7,
		"YOUR_INT_DAMAGE":         8,
		"FEAR":                    9,
		"BARRIER":                 10,
		"BLEED":                   11,
		"STUN":                    12,
		"DAMAGE_CUT":              13,
		"AGI_CHARGE":              14,
		"PROSTRATION":             15,
		"DECOY":                   16,
		"CURSE":                   17,
		"CHARM":                   18,
		"AURA_ADD_PHY_DAMAGE":     19,
		"AURA_ADD_INT_DAMAGE":     20,
		"AURA_RECEIVE_PHY_DAMAGE": 21,
		"AURA_RECEIVE_INT_DAMAGE": 22,
	}
)

func (x BaseUnit_Result) Enum() *BaseUnit_Result {
	p := new(BaseUnit_Result)
	*p = x
	return p
}

func (x BaseUnit_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BaseUnit_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[3].Descriptor()
}

func (BaseUnit_Result) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[3]
}

func (x BaseUnit_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BaseUnit_Result.Descriptor instead.
func (BaseUnit_Result) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{4, 0}
}

type CurrentUnit_State int32

const (
	CurrentUnit_NORMAL      CurrentUnit_State = 0
	CurrentUnit_POISON      CurrentUnit_State = 1
	CurrentUnit_SLEEP       CurrentUnit_State = 2
	CurrentUnit_CONFUSION   CurrentUnit_State = 3
	CurrentUnit_FEAR        CurrentUnit_State = 4
	CurrentUnit_BARRIER     CurrentUnit_State = 5
	CurrentUnit_BLEED       CurrentUnit_State = 6
	CurrentUnit_STUN        CurrentUnit_State = 7
	CurrentUnit_PROSTRATION CurrentUnit_State = 8
	CurrentUnit_CURSE       CurrentUnit_State = 9
	CurrentUnit_CHARM       CurrentUnit_State = 10
)

// Enum value maps for CurrentUnit_State.
var (
	CurrentUnit_State_name = map[int32]string{
		0:  "NORMAL",
		1:  "POISON",
		2:  "SLEEP",
		3:  "CONFUSION",
		4:  "FEAR",
		5:  "BARRIER",
		6:  "BLEED",
		7:  "STUN",
		8:  "PROSTRATION",
		9:  "CURSE",
		10: "CHARM",
	}
	CurrentUnit_State_value = map[string]int32{
		"NORMAL":      0,
		"POISON":      1,
		"SLEEP":       2,
		"CONFUSION":   3,
		"FEAR":        4,
		"BARRIER":     5,
		"BLEED":       6,
		"STUN":        7,
		"PROSTRATION": 8,
		"CURSE":       9,
		"CHARM":       10,
	}
)

func (x CurrentUnit_State) Enum() *CurrentUnit_State {
	p := new(CurrentUnit_State)
	*p = x
	return p
}

func (x CurrentUnit_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrentUnit_State) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[4].Descriptor()
}

func (CurrentUnit_State) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[4]
}

func (x CurrentUnit_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrentUnit_State.Descriptor instead.
func (CurrentUnit_State) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{5, 0}
}

type EnchantInfo_Enchant int32

const (
	EnchantInfo_NO_ENCHANT EnchantInfo_Enchant = 0
	EnchantInfo_REDUCTION  EnchantInfo_Enchant = 1
)

// Enum value maps for EnchantInfo_Enchant.
var (
	EnchantInfo_Enchant_name = map[int32]string{
		0: "NO_ENCHANT",
		1: "REDUCTION",
	}
	EnchantInfo_Enchant_value = map[string]int32{
		"NO_ENCHANT": 0,
		"REDUCTION":  1,
	}
)

func (x EnchantInfo_Enchant) Enum() *EnchantInfo_Enchant {
	p := new(EnchantInfo_Enchant)
	*p = x
	return p
}

func (x EnchantInfo_Enchant) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnchantInfo_Enchant) Descriptor() protoreflect.EnumDescriptor {
	return file_battle_proto_enumTypes[5].Descriptor()
}

func (EnchantInfo_Enchant) Type() protoreflect.EnumType {
	return &file_battle_proto_enumTypes[5]
}

func (x EnchantInfo_Enchant) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnchantInfo_Enchant.Descriptor instead.
func (EnchantInfo_Enchant) EnumDescriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{6, 0}
}

type BattleId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleId uint32 `protobuf:"varint,1,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (x *BattleId) Reset() {
	*x = BattleId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleId) ProtoMessage() {}

func (x *BattleId) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleId.ProtoReflect.Descriptor instead.
func (*BattleId) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{0}
}

func (x *BattleId) GetBattleId() uint32 {
	if x != nil {
		return x.BattleId
	}
	return 0
}

type Battle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Units                  []*Unit         `protobuf:"bytes,2,rep,name=units,proto3" json:"units,omitempty"`
	ActionCounts           int32           `protobuf:"varint,3,opt,name=action_counts,json=actionCounts,proto3" json:"action_counts,omitempty"`
	Result                 Battle_Result   `protobuf:"varint,4,opt,name=result,proto3,enum=battle.Battle_Result" json:"result,omitempty"`
	State                  Battle_State    `protobuf:"varint,5,opt,name=state,proto3,enum=battle.Battle_State" json:"state,omitempty"`
	RandomSeed             int64           `protobuf:"varint,6,opt,name=random_seed,json=randomSeed,proto3" json:"random_seed,omitempty"`
	RandomCounts           int64           `protobuf:"varint,7,opt,name=random_counts,json=randomCounts,proto3" json:"random_counts,omitempty"`
	Actions                []*BattleAction `protobuf:"bytes,8,rep,name=actions,proto3" json:"actions,omitempty"`
	LastActivePosition     int32           `protobuf:"varint,9,opt,name=last_active_position,json=lastActivePosition,proto3" json:"last_active_position,omitempty"`
	Uids                   []uint32        `protobuf:"varint,10,rep,packed,name=uids,proto3" json:"uids,omitempty"`
	AttackerTakenDamage    int32           `protobuf:"varint,12,opt,name=attacker_taken_damage,json=attackerTakenDamage,proto3" json:"attacker_taken_damage,omitempty"`
	DefenderTakenDamage    int32           `protobuf:"varint,13,opt,name=defender_taken_damage,json=defenderTakenDamage,proto3" json:"defender_taken_damage,omitempty"`
	BattleType             uint32          `protobuf:"varint,14,opt,name=battle_type,json=battleType,proto3" json:"battle_type,omitempty"`
	ActionLimit            int32           `protobuf:"varint,15,opt,name=action_limit,json=actionLimit,proto3" json:"action_limit,omitempty"`
	AttackerChangeCounts   int32           `protobuf:"varint,17,opt,name=attacker_change_counts,json=attackerChangeCounts,proto3" json:"attacker_change_counts,omitempty"`
	DefenderChangeCounts   int32           `protobuf:"varint,18,opt,name=defender_change_counts,json=defenderChangeCounts,proto3" json:"defender_change_counts,omitempty"`
	LastChangeActionCounts int32           `protobuf:"varint,19,opt,name=last_change_action_counts,json=lastChangeActionCounts,proto3" json:"last_change_action_counts,omitempty"`
	ActiveActionCounts     int32           `protobuf:"varint,23,opt,name=active_action_counts,json=activeActionCounts,proto3" json:"active_action_counts,omitempty"`
}

func (x *Battle) Reset() {
	*x = Battle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Battle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Battle) ProtoMessage() {}

func (x *Battle) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Battle.ProtoReflect.Descriptor instead.
func (*Battle) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{1}
}

func (x *Battle) GetUnits() []*Unit {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *Battle) GetActionCounts() int32 {
	if x != nil {
		return x.ActionCounts
	}
	return 0
}

func (x *Battle) GetResult() Battle_Result {
	if x != nil {
		return x.Result
	}
	return Battle_PROGRESS
}

func (x *Battle) GetState() Battle_State {
	if x != nil {
		return x.State
	}
	return Battle_ACTIVE
}

func (x *Battle) GetRandomSeed() int64 {
	if x != nil {
		return x.RandomSeed
	}
	return 0
}

func (x *Battle) GetRandomCounts() int64 {
	if x != nil {
		return x.RandomCounts
	}
	return 0
}

func (x *Battle) GetActions() []*BattleAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Battle) GetLastActivePosition() int32 {
	if x != nil {
		return x.LastActivePosition
	}
	return 0
}

func (x *Battle) GetUids() []uint32 {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *Battle) GetAttackerTakenDamage() int32 {
	if x != nil {
		return x.AttackerTakenDamage
	}
	return 0
}

func (x *Battle) GetDefenderTakenDamage() int32 {
	if x != nil {
		return x.DefenderTakenDamage
	}
	return 0
}

func (x *Battle) GetBattleType() uint32 {
	if x != nil {
		return x.BattleType
	}
	return 0
}

func (x *Battle) GetActionLimit() int32 {
	if x != nil {
		return x.ActionLimit
	}
	return 0
}

func (x *Battle) GetAttackerChangeCounts() int32 {
	if x != nil {
		return x.AttackerChangeCounts
	}
	return 0
}

func (x *Battle) GetDefenderChangeCounts() int32 {
	if x != nil {
		return x.DefenderChangeCounts
	}
	return 0
}

func (x *Battle) GetLastChangeActionCounts() int32 {
	if x != nil {
		return x.LastChangeActionCounts
	}
	return 0
}

func (x *Battle) GetActiveActionCounts() int32 {
	if x != nil {
		return x.ActiveActionCounts
	}
	return 0
}

type BattleAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count             int32          `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Units             []*CurrentUnit `protobuf:"bytes,2,rep,name=units,proto3" json:"units,omitempty"`
	Skill             uint32         `protobuf:"varint,3,opt,name=skill,proto3" json:"skill,omitempty"`
	ActionPosition    int32          `protobuf:"varint,4,opt,name=action_position,json=actionPosition,proto3" json:"action_position,omitempty"`
	EffectPositions   []int32        `protobuf:"varint,5,rep,packed,name=effect_positions,json=effectPositions,proto3" json:"effect_positions,omitempty"`
	Poison            int32          `protobuf:"varint,6,opt,name=poison,proto3" json:"poison,omitempty"`
	Bleed             int32          `protobuf:"varint,7,opt,name=bleed,proto3" json:"bleed,omitempty"`
	ActiveActionCount int32          `protobuf:"varint,12,opt,name=active_action_count,json=activeActionCount,proto3" json:"active_action_count,omitempty"`
}

func (x *BattleAction) Reset() {
	*x = BattleAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleAction) ProtoMessage() {}

func (x *BattleAction) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleAction.ProtoReflect.Descriptor instead.
func (*BattleAction) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{2}
}

func (x *BattleAction) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BattleAction) GetUnits() []*CurrentUnit {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *BattleAction) GetSkill() uint32 {
	if x != nil {
		return x.Skill
	}
	return 0
}

func (x *BattleAction) GetActionPosition() int32 {
	if x != nil {
		return x.ActionPosition
	}
	return 0
}

func (x *BattleAction) GetEffectPositions() []int32 {
	if x != nil {
		return x.EffectPositions
	}
	return nil
}

func (x *BattleAction) GetPoison() int32 {
	if x != nil {
		return x.Poison
	}
	return 0
}

func (x *BattleAction) GetBleed() int32 {
	if x != nil {
		return x.Bleed
	}
	return 0
}

func (x *BattleAction) GetActiveActionCount() int32 {
	if x != nil {
		return x.ActiveActionCount
	}
	return 0
}

type Unit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *BaseUnit    `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Current *CurrentUnit `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *Unit) Reset() {
	*x = Unit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unit) ProtoMessage() {}

func (x *Unit) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unit.ProtoReflect.Descriptor instead.
func (*Unit) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{3}
}

func (x *Unit) GetBase() *BaseUnit {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *Unit) GetCurrent() *CurrentUnit {
	if x != nil {
		return x.Current
	}
	return nil
}

type BaseUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index             int32                      `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Position          int32                      `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	Hp                int32                      `protobuf:"varint,3,opt,name=hp,proto3" json:"hp,omitempty"`
	Phy               int32                      `protobuf:"varint,4,opt,name=phy,proto3" json:"phy,omitempty"`
	Int               int32                      `protobuf:"varint,5,opt,name=int,proto3" json:"int,omitempty"`
	Agi               int32                      `protobuf:"varint,6,opt,name=agi,proto3" json:"agi,omitempty"`
	Actives           []uint32                   `protobuf:"varint,7,rep,packed,name=actives,proto3" json:"actives,omitempty"`
	Passive           uint32                     `protobuf:"varint,8,opt,name=passive,proto3" json:"passive,omitempty"`
	Character         uint32                     `protobuf:"varint,9,opt,name=character,proto3" json:"character,omitempty"`
	Extension1        uint32                     `protobuf:"varint,10,opt,name=extension1,proto3" json:"extension1,omitempty"`
	Extension2        uint32                     `protobuf:"varint,11,opt,name=extension2,proto3" json:"extension2,omitempty"`
	Ipfs              string                     `protobuf:"bytes,12,opt,name=ipfs,proto3" json:"ipfs,omitempty"`
	IsEnemy           bool                       `protobuf:"varint,13,opt,name=is_enemy,json=isEnemy,proto3" json:"is_enemy,omitempty"`
	ResultRate1000    map[int32]int32            `protobuf:"bytes,14,rep,name=result_rate1000,json=resultRate1000,proto3" json:"result_rate1000,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AttributeTypes    []uint32                   `protobuf:"varint,15,rep,packed,name=attribute_types,json=attributeTypes,proto3" json:"attribute_types,omitempty"`
	HeroType          uint32                     `protobuf:"varint,16,opt,name=hero_type,json=heroType,proto3" json:"hero_type,omitempty"`
	Auras             []*BaseUnit_AuraEffectRate `protobuf:"bytes,17,rep,name=auras,proto3" json:"auras,omitempty"`
	CriticalPhyRate   int32                      `protobuf:"varint,18,opt,name=critical_phy_rate,json=criticalPhyRate,proto3" json:"critical_phy_rate,omitempty"`
	CriticalIntRate   int32                      `protobuf:"varint,19,opt,name=critical_int_rate,json=criticalIntRate,proto3" json:"critical_int_rate,omitempty"`
	IncreaseDamageCut int32                      `protobuf:"varint,20,opt,name=increase_damage_cut,json=increaseDamageCut,proto3" json:"increase_damage_cut,omitempty"`
	EnchantInfos      []*EnchantInfo             `protobuf:"bytes,21,rep,name=enchant_infos,json=enchantInfos,proto3" json:"enchant_infos,omitempty"`
}

func (x *BaseUnit) Reset() {
	*x = BaseUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseUnit) ProtoMessage() {}

func (x *BaseUnit) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseUnit.ProtoReflect.Descriptor instead.
func (*BaseUnit) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{4}
}

func (x *BaseUnit) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BaseUnit) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *BaseUnit) GetHp() int32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *BaseUnit) GetPhy() int32 {
	if x != nil {
		return x.Phy
	}
	return 0
}

func (x *BaseUnit) GetInt() int32 {
	if x != nil {
		return x.Int
	}
	return 0
}

func (x *BaseUnit) GetAgi() int32 {
	if x != nil {
		return x.Agi
	}
	return 0
}

func (x *BaseUnit) GetActives() []uint32 {
	if x != nil {
		return x.Actives
	}
	return nil
}

func (x *BaseUnit) GetPassive() uint32 {
	if x != nil {
		return x.Passive
	}
	return 0
}

func (x *BaseUnit) GetCharacter() uint32 {
	if x != nil {
		return x.Character
	}
	return 0
}

func (x *BaseUnit) GetExtension1() uint32 {
	if x != nil {
		return x.Extension1
	}
	return 0
}

func (x *BaseUnit) GetExtension2() uint32 {
	if x != nil {
		return x.Extension2
	}
	return 0
}

func (x *BaseUnit) GetIpfs() string {
	if x != nil {
		return x.Ipfs
	}
	return ""
}

func (x *BaseUnit) GetIsEnemy() bool {
	if x != nil {
		return x.IsEnemy
	}
	return false
}

func (x *BaseUnit) GetResultRate1000() map[int32]int32 {
	if x != nil {
		return x.ResultRate1000
	}
	return nil
}

func (x *BaseUnit) GetAttributeTypes() []uint32 {
	if x != nil {
		return x.AttributeTypes
	}
	return nil
}

func (x *BaseUnit) GetHeroType() uint32 {
	if x != nil {
		return x.HeroType
	}
	return 0
}

func (x *BaseUnit) GetAuras() []*BaseUnit_AuraEffectRate {
	if x != nil {
		return x.Auras
	}
	return nil
}

func (x *BaseUnit) GetCriticalPhyRate() int32 {
	if x != nil {
		return x.CriticalPhyRate
	}
	return 0
}

func (x *BaseUnit) GetCriticalIntRate() int32 {
	if x != nil {
		return x.CriticalIntRate
	}
	return 0
}

func (x *BaseUnit) GetIncreaseDamageCut() int32 {
	if x != nil {
		return x.IncreaseDamageCut
	}
	return 0
}

func (x *BaseUnit) GetEnchantInfos() []*EnchantInfo {
	if x != nil {
		return x.EnchantInfos
	}
	return nil
}

type CurrentUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index                 int32             `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Position              int32             `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	Hp                    int32             `protobuf:"varint,3,opt,name=hp,proto3" json:"hp,omitempty"`
	Phy                   int32             `protobuf:"varint,4,opt,name=phy,proto3" json:"phy,omitempty"`
	Int                   int32             `protobuf:"varint,5,opt,name=int,proto3" json:"int,omitempty"`
	Agi                   int32             `protobuf:"varint,6,opt,name=agi,proto3" json:"agi,omitempty"`
	Charge                int32             `protobuf:"varint,7,opt,name=charge,proto3" json:"charge,omitempty"`
	ActiveCounts          int32             `protobuf:"varint,8,opt,name=active_counts,json=activeCounts,proto3" json:"active_counts,omitempty"`
	PassiveEnabled        bool              `protobuf:"varint,9,opt,name=passive_enabled,json=passiveEnabled,proto3" json:"passive_enabled,omitempty"`
	AddedDamage           int32             `protobuf:"varint,10,opt,name=added_damage,json=addedDamage,proto3" json:"added_damage,omitempty"`
	TakenDamage           int32             `protobuf:"varint,11,opt,name=taken_damage,json=takenDamage,proto3" json:"taken_damage,omitempty"`
	State                 CurrentUnit_State `protobuf:"varint,12,opt,name=state,proto3,enum=battle.CurrentUnit_State" json:"state,omitempty"`
	PositionChanged       bool              `protobuf:"varint,13,opt,name=position_changed,json=positionChanged,proto3" json:"position_changed,omitempty"`
	BarrierInAction       bool              `protobuf:"varint,14,opt,name=barrier_in_action,json=barrierInAction,proto3" json:"barrier_in_action,omitempty"`
	BleedCount            int32             `protobuf:"varint,15,opt,name=bleed_count,json=bleedCount,proto3" json:"bleed_count,omitempty"`
	ResurrectionEnabled   bool              `protobuf:"varint,16,opt,name=resurrection_enabled,json=resurrectionEnabled,proto3" json:"resurrection_enabled,omitempty"`
	DecoyEnabled          bool              `protobuf:"varint,17,opt,name=decoy_enabled,json=decoyEnabled,proto3" json:"decoy_enabled,omitempty"`
	DecoyInAction         bool              `protobuf:"varint,18,opt,name=decoy_in_action,json=decoyInAction,proto3" json:"decoy_in_action,omitempty"`
	BonusCharge           int32             `protobuf:"varint,19,opt,name=bonus_charge,json=bonusCharge,proto3" json:"bonus_charge,omitempty"`
	CurseCount            int32             `protobuf:"varint,20,opt,name=curse_count,json=curseCount,proto3" json:"curse_count,omitempty"`
	SkillDeathEnabled     bool              `protobuf:"varint,21,opt,name=skill_death_enabled,json=skillDeathEnabled,proto3" json:"skill_death_enabled,omitempty"`
	DuplicateDecoyEnabled bool              `protobuf:"varint,22,opt,name=duplicate_decoy_enabled,json=duplicateDecoyEnabled,proto3" json:"duplicate_decoy_enabled,omitempty"`
	CriticalPhyRate       int32             `protobuf:"varint,23,opt,name=critical_phy_rate,json=criticalPhyRate,proto3" json:"critical_phy_rate,omitempty"`
	CriticalIntRate       int32             `protobuf:"varint,24,opt,name=critical_int_rate,json=criticalIntRate,proto3" json:"critical_int_rate,omitempty"`
	CriticalJudg          bool              `protobuf:"varint,25,opt,name=critical_judg,json=criticalJudg,proto3" json:"critical_judg,omitempty"`
	Shield                int32             `protobuf:"varint,26,opt,name=shield,proto3" json:"shield,omitempty"`
	AuraEnabled           map[uint32]bool   `protobuf:"bytes,27,rep,name=aura_enabled,json=auraEnabled,proto3" json:"aura_enabled,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AuraDeathEnabled      bool              `protobuf:"varint,28,opt,name=aura_death_enabled,json=auraDeathEnabled,proto3" json:"aura_death_enabled,omitempty"`
	StateEffectRate       map[int32]int32   `protobuf:"bytes,29,rep,name=state_effect_rate,json=stateEffectRate,proto3" json:"state_effect_rate,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ActiveAuras           []uint32          `protobuf:"varint,30,rep,packed,name=active_auras,json=activeAuras,proto3" json:"active_auras,omitempty"`
	IncreaseDamageCut     int32             `protobuf:"varint,31,opt,name=increase_damage_cut,json=increaseDamageCut,proto3" json:"increase_damage_cut,omitempty"`
	LastTargets           []*Unit           `protobuf:"bytes,32,rep,name=last_targets,json=lastTargets,proto3" json:"last_targets,omitempty"`
	WithinActionValue     map[uint32]int32  `protobuf:"bytes,33,rep,name=within_action_value,json=withinActionValue,proto3" json:"within_action_value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	PassiveAddedDamage    int32             `protobuf:"varint,34,opt,name=passive_added_damage,json=passiveAddedDamage,proto3" json:"passive_added_damage,omitempty"`
	PassiveTakenDamage    int32             `protobuf:"varint,35,opt,name=passive_taken_damage,json=passiveTakenDamage,proto3" json:"passive_taken_damage,omitempty"`
	EnchantInfos          []*EnchantInfo    `protobuf:"bytes,36,rep,name=enchant_infos,json=enchantInfos,proto3" json:"enchant_infos,omitempty"`
}

func (x *CurrentUnit) Reset() {
	*x = CurrentUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentUnit) ProtoMessage() {}

func (x *CurrentUnit) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentUnit.ProtoReflect.Descriptor instead.
func (*CurrentUnit) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{5}
}

func (x *CurrentUnit) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CurrentUnit) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *CurrentUnit) GetHp() int32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *CurrentUnit) GetPhy() int32 {
	if x != nil {
		return x.Phy
	}
	return 0
}

func (x *CurrentUnit) GetInt() int32 {
	if x != nil {
		return x.Int
	}
	return 0
}

func (x *CurrentUnit) GetAgi() int32 {
	if x != nil {
		return x.Agi
	}
	return 0
}

func (x *CurrentUnit) GetCharge() int32 {
	if x != nil {
		return x.Charge
	}
	return 0
}

func (x *CurrentUnit) GetActiveCounts() int32 {
	if x != nil {
		return x.ActiveCounts
	}
	return 0
}

func (x *CurrentUnit) GetPassiveEnabled() bool {
	if x != nil {
		return x.PassiveEnabled
	}
	return false
}

func (x *CurrentUnit) GetAddedDamage() int32 {
	if x != nil {
		return x.AddedDamage
	}
	return 0
}

func (x *CurrentUnit) GetTakenDamage() int32 {
	if x != nil {
		return x.TakenDamage
	}
	return 0
}

func (x *CurrentUnit) GetState() CurrentUnit_State {
	if x != nil {
		return x.State
	}
	return CurrentUnit_NORMAL
}

func (x *CurrentUnit) GetPositionChanged() bool {
	if x != nil {
		return x.PositionChanged
	}
	return false
}

func (x *CurrentUnit) GetBarrierInAction() bool {
	if x != nil {
		return x.BarrierInAction
	}
	return false
}

func (x *CurrentUnit) GetBleedCount() int32 {
	if x != nil {
		return x.BleedCount
	}
	return 0
}

func (x *CurrentUnit) GetResurrectionEnabled() bool {
	if x != nil {
		return x.ResurrectionEnabled
	}
	return false
}

func (x *CurrentUnit) GetDecoyEnabled() bool {
	if x != nil {
		return x.DecoyEnabled
	}
	return false
}

func (x *CurrentUnit) GetDecoyInAction() bool {
	if x != nil {
		return x.DecoyInAction
	}
	return false
}

func (x *CurrentUnit) GetBonusCharge() int32 {
	if x != nil {
		return x.BonusCharge
	}
	return 0
}

func (x *CurrentUnit) GetCurseCount() int32 {
	if x != nil {
		return x.CurseCount
	}
	return 0
}

func (x *CurrentUnit) GetSkillDeathEnabled() bool {
	if x != nil {
		return x.SkillDeathEnabled
	}
	return false
}

func (x *CurrentUnit) GetDuplicateDecoyEnabled() bool {
	if x != nil {
		return x.DuplicateDecoyEnabled
	}
	return false
}

func (x *CurrentUnit) GetCriticalPhyRate() int32 {
	if x != nil {
		return x.CriticalPhyRate
	}
	return 0
}

func (x *CurrentUnit) GetCriticalIntRate() int32 {
	if x != nil {
		return x.CriticalIntRate
	}
	return 0
}

func (x *CurrentUnit) GetCriticalJudg() bool {
	if x != nil {
		return x.CriticalJudg
	}
	return false
}

func (x *CurrentUnit) GetShield() int32 {
	if x != nil {
		return x.Shield
	}
	return 0
}

func (x *CurrentUnit) GetAuraEnabled() map[uint32]bool {
	if x != nil {
		return x.AuraEnabled
	}
	return nil
}

func (x *CurrentUnit) GetAuraDeathEnabled() bool {
	if x != nil {
		return x.AuraDeathEnabled
	}
	return false
}

func (x *CurrentUnit) GetStateEffectRate() map[int32]int32 {
	if x != nil {
		return x.StateEffectRate
	}
	return nil
}

func (x *CurrentUnit) GetActiveAuras() []uint32 {
	if x != nil {
		return x.ActiveAuras
	}
	return nil
}

func (x *CurrentUnit) GetIncreaseDamageCut() int32 {
	if x != nil {
		return x.IncreaseDamageCut
	}
	return 0
}

func (x *CurrentUnit) GetLastTargets() []*Unit {
	if x != nil {
		return x.LastTargets
	}
	return nil
}

func (x *CurrentUnit) GetWithinActionValue() map[uint32]int32 {
	if x != nil {
		return x.WithinActionValue
	}
	return nil
}

func (x *CurrentUnit) GetPassiveAddedDamage() int32 {
	if x != nil {
		return x.PassiveAddedDamage
	}
	return 0
}

func (x *CurrentUnit) GetPassiveTakenDamage() int32 {
	if x != nil {
		return x.PassiveTakenDamage
	}
	return 0
}

func (x *CurrentUnit) GetEnchantInfos() []*EnchantInfo {
	if x != nil {
		return x.EnchantInfos
	}
	return nil
}

type EnchantInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnchantType EnchantInfo_Enchant `protobuf:"varint,1,opt,name=enchant_type,json=enchantType,proto3,enum=battle.EnchantInfo_Enchant" json:"enchant_type,omitempty"`
	Rate        int32               `protobuf:"varint,2,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *EnchantInfo) Reset() {
	*x = EnchantInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnchantInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnchantInfo) ProtoMessage() {}

func (x *EnchantInfo) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnchantInfo.ProtoReflect.Descriptor instead.
func (*EnchantInfo) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{6}
}

func (x *EnchantInfo) GetEnchantType() EnchantInfo_Enchant {
	if x != nil {
		return x.EnchantType
	}
	return EnchantInfo_NO_ENCHANT
}

func (x *EnchantInfo) GetRate() int32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

type BaseUnit_AuraEffectRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuraType       uint32 `protobuf:"varint,1,opt,name=aura_type,json=auraType,proto3" json:"aura_type,omitempty"`
	EffectValue    int32  `protobuf:"varint,2,opt,name=effect_value,json=effectValue,proto3" json:"effect_value,omitempty"`
	SecondaryValue int32  `protobuf:"varint,3,opt,name=secondary_value,json=secondaryValue,proto3" json:"secondary_value,omitempty"`
}

func (x *BaseUnit_AuraEffectRate) Reset() {
	*x = BaseUnit_AuraEffectRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseUnit_AuraEffectRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseUnit_AuraEffectRate) ProtoMessage() {}

func (x *BaseUnit_AuraEffectRate) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseUnit_AuraEffectRate.ProtoReflect.Descriptor instead.
func (*BaseUnit_AuraEffectRate) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{4, 1}
}

func (x *BaseUnit_AuraEffectRate) GetAuraType() uint32 {
	if x != nil {
		return x.AuraType
	}
	return 0
}

func (x *BaseUnit_AuraEffectRate) GetEffectValue() int32 {
	if x != nil {
		return x.EffectValue
	}
	return 0
}

func (x *BaseUnit_AuraEffectRate) GetSecondaryValue() int32 {
	if x != nil {
		return x.SecondaryValue
	}
	return 0
}

var File_battle_proto protoreflect.FileDescriptor

var file_battle_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x22, 0x27, 0x0a, 0x08, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0xf8, 0x06, 0x0a, 0x06, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e,
	0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16,
	0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x64, 0x65,
	0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22,
	0x40, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x49, 0x4e, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x52, 0x41, 0x57, 0x10,
	0x04, 0x22, 0x47, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x22, 0x97, 0x02, 0x0a, 0x0c, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x29, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x73, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62,
	0x6c, 0x65, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5b, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x22, 0xfb, 0x09, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x68, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x68, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70,
	0x68, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x61, 0x67, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x66, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x66, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x12, 0x4d, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x31, 0x30, 0x30, 0x30, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x61, 0x74, 0x65, 0x31, 0x30, 0x30,
	0x30, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x31, 0x30, 0x30, 0x30, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x68, 0x65, 0x72, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x05,
	0x61, 0x75, 0x72, 0x61, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x2e, 0x41, 0x75,
	0x72, 0x61, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x05, 0x61, 0x75,
	0x72, 0x61, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x70, 0x68, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x68, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x75, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x65,
	0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x31, 0x30, 0x30, 0x30, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x79, 0x0a, 0x0e, 0x41, 0x75, 0x72, 0x61,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75,
	0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61,
	0x75, 0x72, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xe9, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x49, 0x53,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x4d, 0x59, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x59,
	0x4f, 0x55, 0x52, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x07,
	0x12, 0x13, 0x0a, 0x0f, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x4d,
	0x41, 0x47, 0x45, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x45, 0x41, 0x52, 0x10, 0x09, 0x12,
	0x0b, 0x0a, 0x07, 0x42, 0x41, 0x52, 0x52, 0x49, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05,
	0x42, 0x4c, 0x45, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x55, 0x4e, 0x10,
	0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x55, 0x54, 0x10,
	0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x47, 0x49, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10,
	0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x0f, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x43, 0x4f, 0x59, 0x10, 0x10, 0x12, 0x09, 0x0a,
	0x05, 0x43, 0x55, 0x52, 0x53, 0x45, 0x10, 0x11, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x48, 0x41, 0x52,
	0x4d, 0x10, 0x12, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x55, 0x52, 0x41, 0x5f, 0x41, 0x44, 0x44, 0x5f,
	0x50, 0x48, 0x59, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13,
	0x41, 0x55, 0x52, 0x41, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x4d,
	0x41, 0x47, 0x45, 0x10, 0x14, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x55, 0x52, 0x41, 0x5f, 0x52, 0x45,
	0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45,
	0x10, 0x15, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x55, 0x52, 0x41, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x56, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x16, 0x22,
	0xbf, 0x0e, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x68,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x68, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x70, 0x68, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x69, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x65, 0x64, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x62, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x49, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x6c, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x14,
	0x72, 0x65, 0x73, 0x75, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x73, 0x75,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x6f, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x6f, 0x79, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x63, 0x6f, 0x79, 0x5f, 0x69, 0x6e,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64,
	0x65, 0x63, 0x6f, 0x79, 0x49, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x61, 0x74, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x36, 0x0a, 0x17, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65,
	0x63, 0x6f, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x6f,
	0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x68, 0x79,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6a, 0x75, 0x64,
	0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x4a, 0x75, 0x64, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x47, 0x0a,
	0x0c, 0x61, 0x75, 0x72, 0x61, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x2e, 0x41, 0x75, 0x72, 0x61, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x75, 0x72, 0x61, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x75, 0x72, 0x61, 0x5f, 0x64,
	0x65, 0x61, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x61, 0x75, 0x72, 0x61, 0x44, 0x65, 0x61, 0x74, 0x68, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x75, 0x72, 0x61, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x75, 0x72, 0x61, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x75, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x75, 0x74, 0x12, 0x2f, 0x0a,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x20, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x5a,
	0x0a, 0x13, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x2e, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x38,
	0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x45,
	0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x75, 0x72, 0x61,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16,
	0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x8c, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x49, 0x53,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x08,
	0x0a, 0x04, 0x46, 0x45, 0x41, 0x52, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41, 0x52, 0x52,
	0x49, 0x45, 0x52, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x45, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x55, 0x4e, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52,
	0x4f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x43,
	0x55, 0x52, 0x53, 0x45, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x48, 0x41, 0x52, 0x4d, 0x10,
	0x0a, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3e, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x2e, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x22, 0x28, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x2a,
	0x37, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x49, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x01, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x69, 0x6a, 0x6a, 0x69, 0x72, 0x69, 0x2f, 0x73,
	0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_battle_proto_rawDescOnce sync.Once
	file_battle_proto_rawDescData = file_battle_proto_rawDesc
)

func file_battle_proto_rawDescGZIP() []byte {
	file_battle_proto_rawDescOnce.Do(func() {
		file_battle_proto_rawDescData = protoimpl.X.CompressGZIP(file_battle_proto_rawDescData)
	})
	return file_battle_proto_rawDescData
}

var file_battle_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_battle_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_battle_proto_goTypes = []interface{}{
	(BattleType)(0),                 // 0: battle.BattleType
	(Battle_Result)(0),              // 1: battle.Battle.Result
	(Battle_State)(0),               // 2: battle.Battle.State
	(BaseUnit_Result)(0),            // 3: battle.BaseUnit.Result
	(CurrentUnit_State)(0),          // 4: battle.CurrentUnit.State
	(EnchantInfo_Enchant)(0),        // 5: battle.EnchantInfo.Enchant
	(*BattleId)(nil),                // 6: battle.BattleId
	(*Battle)(nil),                  // 7: battle.Battle
	(*BattleAction)(nil),            // 8: battle.BattleAction
	(*Unit)(nil),                    // 9: battle.Unit
	(*BaseUnit)(nil),                // 10: battle.BaseUnit
	(*CurrentUnit)(nil),             // 11: battle.CurrentUnit
	(*EnchantInfo)(nil),             // 12: battle.EnchantInfo
	nil,                             // 13: battle.BaseUnit.ResultRate1000Entry
	(*BaseUnit_AuraEffectRate)(nil), // 14: battle.BaseUnit.AuraEffectRate
	nil,                             // 15: battle.CurrentUnit.AuraEnabledEntry
	nil,                             // 16: battle.CurrentUnit.StateEffectRateEntry
	nil,                             // 17: battle.CurrentUnit.WithinActionValueEntry
}
var file_battle_proto_depIdxs = []int32{
	9,  // 0: battle.Battle.units:type_name -> battle.Unit
	1,  // 1: battle.Battle.result:type_name -> battle.Battle.Result
	2,  // 2: battle.Battle.state:type_name -> battle.Battle.State
	8,  // 3: battle.Battle.actions:type_name -> battle.BattleAction
	11, // 4: battle.BattleAction.units:type_name -> battle.CurrentUnit
	10, // 5: battle.Unit.base:type_name -> battle.BaseUnit
	11, // 6: battle.Unit.current:type_name -> battle.CurrentUnit
	13, // 7: battle.BaseUnit.result_rate1000:type_name -> battle.BaseUnit.ResultRate1000Entry
	14, // 8: battle.BaseUnit.auras:type_name -> battle.BaseUnit.AuraEffectRate
	12, // 9: battle.BaseUnit.enchant_infos:type_name -> battle.EnchantInfo
	4,  // 10: battle.CurrentUnit.state:type_name -> battle.CurrentUnit.State
	15, // 11: battle.CurrentUnit.aura_enabled:type_name -> battle.CurrentUnit.AuraEnabledEntry
	16, // 12: battle.CurrentUnit.state_effect_rate:type_name -> battle.CurrentUnit.StateEffectRateEntry
	9,  // 13: battle.CurrentUnit.last_targets:type_name -> battle.Unit
	17, // 14: battle.CurrentUnit.within_action_value:type_name -> battle.CurrentUnit.WithinActionValueEntry
	12, // 15: battle.CurrentUnit.enchant_infos:type_name -> battle.EnchantInfo
	5,  // 16: battle.EnchantInfo.enchant_type:type_name -> battle.EnchantInfo.Enchant
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_battle_proto_init() }
func file_battle_proto_init() {
	if File_battle_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_battle_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Battle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnchantInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseUnit_AuraEffectRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_battle_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_battle_proto_goTypes,
		DependencyIndexes: file_battle_proto_depIdxs,
		EnumInfos:         file_battle_proto_enumTypes,
		MessageInfos:      file_battle_proto_msgTypes,
	}.Build()
	File_battle_proto = out.File
	file_battle_proto_rawDesc = nil
	file_battle_proto_goTypes = nil
	file_battle_proto_depIdxs = nil
}
