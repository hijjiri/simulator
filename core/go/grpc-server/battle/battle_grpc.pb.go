// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: battle.proto

package battle

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BattleService_GetBattle_FullMethodName = "/battle.BattleService/GetBattle"
)

// BattleServiceClient is the client API for BattleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BattleServiceClient interface {
	GetBattle(ctx context.Context, in *BattleId, opts ...grpc.CallOption) (*Battle, error)
}

type battleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBattleServiceClient(cc grpc.ClientConnInterface) BattleServiceClient {
	return &battleServiceClient{cc}
}

func (c *battleServiceClient) GetBattle(ctx context.Context, in *BattleId, opts ...grpc.CallOption) (*Battle, error) {
	out := new(Battle)
	err := c.cc.Invoke(ctx, BattleService_GetBattle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BattleServiceServer is the server API for BattleService service.
// All implementations must embed UnimplementedBattleServiceServer
// for forward compatibility
type BattleServiceServer interface {
	GetBattle(context.Context, *BattleId) (*Battle, error)
	mustEmbedUnimplementedBattleServiceServer()
}

// UnimplementedBattleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBattleServiceServer struct {
}

func (UnimplementedBattleServiceServer) GetBattle(context.Context, *BattleId) (*Battle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBattle not implemented")
}
func (UnimplementedBattleServiceServer) mustEmbedUnimplementedBattleServiceServer() {}

// UnsafeBattleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BattleServiceServer will
// result in compilation errors.
type UnsafeBattleServiceServer interface {
	mustEmbedUnimplementedBattleServiceServer()
}

func RegisterBattleServiceServer(s grpc.ServiceRegistrar, srv BattleServiceServer) {
	s.RegisterService(&BattleService_ServiceDesc, srv)
}

func _BattleService_GetBattle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BattleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BattleServiceServer).GetBattle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BattleService_GetBattle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BattleServiceServer).GetBattle(ctx, req.(*BattleId))
	}
	return interceptor(ctx, in, info, handler)
}

// BattleService_ServiceDesc is the grpc.ServiceDesc for BattleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BattleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "battle.BattleService",
	HandlerType: (*BattleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBattle",
			Handler:    _BattleService_GetBattle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "battle.proto",
}
