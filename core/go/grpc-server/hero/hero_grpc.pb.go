// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: hero.proto

package hero

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HeroService_SaveIpfsSkillStock_FullMethodName = "/hero.HeroService/SaveIpfsSkillStock"
)

// HeroServiceClient is the client API for HeroService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeroServiceClient interface {
	SaveIpfsSkillStock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HeroTypeMaster, error)
}

type heroServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHeroServiceClient(cc grpc.ClientConnInterface) HeroServiceClient {
	return &heroServiceClient{cc}
}

func (c *heroServiceClient) SaveIpfsSkillStock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HeroTypeMaster, error) {
	out := new(HeroTypeMaster)
	err := c.cc.Invoke(ctx, HeroService_SaveIpfsSkillStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeroServiceServer is the server API for HeroService service.
// All implementations must embed UnimplementedHeroServiceServer
// for forward compatibility
type HeroServiceServer interface {
	SaveIpfsSkillStock(context.Context, *Empty) (*HeroTypeMaster, error)
	mustEmbedUnimplementedHeroServiceServer()
}

// UnimplementedHeroServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHeroServiceServer struct {
}

func (UnimplementedHeroServiceServer) SaveIpfsSkillStock(context.Context, *Empty) (*HeroTypeMaster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveIpfsSkillStock not implemented")
}
func (UnimplementedHeroServiceServer) mustEmbedUnimplementedHeroServiceServer() {}

// UnsafeHeroServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeroServiceServer will
// result in compilation errors.
type UnsafeHeroServiceServer interface {
	mustEmbedUnimplementedHeroServiceServer()
}

func RegisterHeroServiceServer(s grpc.ServiceRegistrar, srv HeroServiceServer) {
	s.RegisterService(&HeroService_ServiceDesc, srv)
}

func _HeroService_SaveIpfsSkillStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeroServiceServer).SaveIpfsSkillStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeroService_SaveIpfsSkillStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeroServiceServer).SaveIpfsSkillStock(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HeroService_ServiceDesc is the grpc.ServiceDesc for HeroService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HeroService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hero.HeroService",
	HandlerType: (*HeroServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveIpfsSkillStock",
			Handler:    _HeroService_SaveIpfsSkillStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hero.proto",
}
