// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: deck.proto

package deck

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeckService_GetDeck_FullMethodName                             = "/deck.DeckService/GetDeck"
	DeckService_GetMyDecks_FullMethodName                          = "/deck.DeckService/GetMyDecks"
	DeckService_SetMyDeck_FullMethodName                           = "/deck.DeckService/SetMyDeck"
	DeckService_RecoveryStamina_FullMethodName                     = "/deck.DeckService/RecoveryStamina"
	DeckService_GetCupDeck_FullMethodName                          = "/deck.DeckService/GetCupDeck"
	DeckService_GetCupDecks_FullMethodName                         = "/deck.DeckService/GetCupDecks"
	DeckService_SetMyCupDeck_FullMethodName                        = "/deck.DeckService/SetMyCupDeck"
	DeckService_BreakupPrimeDeck_FullMethodName                    = "/deck.DeckService/BreakupPrimeDeck"
	DeckService_SetMyKnightDeck_FullMethodName                     = "/deck.DeckService/SetMyKnightDeck"
	DeckService_SetMyWarDeck_FullMethodName                        = "/deck.DeckService/SetMyWarDeck"
	DeckService_GetOurFlagDecks_FullMethodName                     = "/deck.DeckService/GetOurFlagDecks"
	DeckService_SetMyNineDeck_FullMethodName                       = "/deck.DeckService/SetMyNineDeck"
	DeckService_SetMyThreeOnThreeOnThreeDecks_FullMethodName       = "/deck.DeckService/SetMyThreeOnThreeOnThreeDecks"
	DeckService_SwitchThreeOnThreeOnThreeDecksOrder_FullMethodName = "/deck.DeckService/SwitchThreeOnThreeOnThreeDecksOrder"
	DeckService_SetMyArenaDeckV2_FullMethodName                    = "/deck.DeckService/SetMyArenaDeckV2"
	DeckService_SetMyColosseumOffenseDeck_FullMethodName           = "/deck.DeckService/SetMyColosseumOffenseDeck"
	DeckService_SetMyColosseumDefenseDeckV2_FullMethodName         = "/deck.DeckService/SetMyColosseumDefenseDeckV2"
	DeckService_SetMyQuestSixDeck_FullMethodName                   = "/deck.DeckService/SetMyQuestSixDeck"
	DeckService_SetGymDeck_FullMethodName                          = "/deck.DeckService/SetGymDeck"
	DeckService_SetSoulDeck_FullMethodName                         = "/deck.DeckService/SetSoulDeck"
	DeckService_ClearSoulDeck_FullMethodName                       = "/deck.DeckService/ClearSoulDeck"
	DeckService_SetSoulBattleDeck_FullMethodName                   = "/deck.DeckService/SetSoulBattleDeck"
	DeckService_ClearSoulBattleDeck_FullMethodName                 = "/deck.DeckService/ClearSoulBattleDeck"
	DeckService_GetMyDeckTemplates_FullMethodName                  = "/deck.DeckService/GetMyDeckTemplates"
	DeckService_CreateMyDeckTemplate_FullMethodName                = "/deck.DeckService/CreateMyDeckTemplate"
	DeckService_DeleteMyDeckTemplate_FullMethodName                = "/deck.DeckService/DeleteMyDeckTemplate"
	DeckService_SetMyDeckTemplate_FullMethodName                   = "/deck.DeckService/SetMyDeckTemplate"
	DeckService_SwitchMyDeckTemplateOrder_FullMethodName           = "/deck.DeckService/SwitchMyDeckTemplateOrder"
	DeckService_CreateMyQuestDeckTemplate_FullMethodName           = "/deck.DeckService/CreateMyQuestDeckTemplate"
	DeckService_DeleteMyQuestDeckTemplate_FullMethodName           = "/deck.DeckService/DeleteMyQuestDeckTemplate"
	DeckService_SetMyQuestDeckTemplate_FullMethodName              = "/deck.DeckService/SetMyQuestDeckTemplate"
	DeckService_SwitchMyQuestDeckTemplateOrder_FullMethodName      = "/deck.DeckService/SwitchMyQuestDeckTemplateOrder"
	DeckService_GetMyDeckTemplateInfo_FullMethodName               = "/deck.DeckService/GetMyDeckTemplateInfo"
	DeckService_SetMyRatingDuelOffenseDecks_FullMethodName         = "/deck.DeckService/SetMyRatingDuelOffenseDecks"
	DeckService_SetMyRatingDuelDefenseDeck_FullMethodName          = "/deck.DeckService/SetMyRatingDuelDefenseDeck"
	DeckService_SetMyRaidDeck_FullMethodName                       = "/deck.DeckService/SetMyRaidDeck"
)

// DeckServiceClient is the client API for DeckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeckServiceClient interface {
	GetDeck(ctx context.Context, in *Uid, opts ...grpc.CallOption) (*MiniDeck, error)
	GetMyDecks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Decks, error)
	SetMyDeck(ctx context.Context, in *SetMyDeckRequest, opts ...grpc.CallOption) (*Empty, error)
	RecoveryStamina(ctx context.Context, in *StaminaRequest, opts ...grpc.CallOption) (*Empty, error)
	// rpc GetRecoveryStaminaFee(StaminaRequest) returns (Gum) {} // deprecated
	GetCupDeck(ctx context.Context, in *UidCup, opts ...grpc.CallOption) (*MiniDeck, error)
	GetCupDecks(ctx context.Context, in *UidsCup, opts ...grpc.CallOption) (*MiniDecksWithUid, error)
	SetMyCupDeck(ctx context.Context, in *CupDeck, opts ...grpc.CallOption) (*Empty, error)
	BreakupPrimeDeck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SetMyKnightDeck(ctx context.Context, in *Deck, opts ...grpc.CallOption) (*Empty, error)
	SetMyWarDeck(ctx context.Context, in *Deck, opts ...grpc.CallOption) (*Empty, error)
	GetOurFlagDecks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FlagDecks, error)
	// rpc SetMyArenaDeck(Deck) returns (Empty) {}  // deprecated
	// rpc InitMyNineDeck(CupHeroIds) returns (Empty) {}
	SetMyNineDeck(ctx context.Context, in *CupDeck, opts ...grpc.CallOption) (*Empty, error)
	SetMyThreeOnThreeOnThreeDecks(ctx context.Context, in *SetThreeOnThreeOnThreeDeckRequest, opts ...grpc.CallOption) (*Empty, error)
	SwitchThreeOnThreeOnThreeDecksOrder(ctx context.Context, in *DeckNumbers, opts ...grpc.CallOption) (*Empty, error)
	// rpc InitMyArenaNineDeck(HeroIds) returns (Empty) {}  // deprecated
	// rpc SetMyArenaNineDeck(Deck) returns (Empty) {}  // deprecated
	SetMyArenaDeckV2(ctx context.Context, in *SetMyArenaDeckRequest, opts ...grpc.CallOption) (*Empty, error)
	SetMyColosseumOffenseDeck(ctx context.Context, in *Deck, opts ...grpc.CallOption) (*Empty, error)
	SetMyColosseumDefenseDeckV2(ctx context.Context, in *SetMyDeckRequest, opts ...grpc.CallOption) (*Empty, error)
	SetMyQuestSixDeck(ctx context.Context, in *Deck, opts ...grpc.CallOption) (*Empty, error)
	SetGymDeck(ctx context.Context, in *SetGymDeckRequest, opts ...grpc.CallOption) (*Empty, error)
	SetSoulDeck(ctx context.Context, in *SetSoulDeckRequest, opts ...grpc.CallOption) (*Empty, error)
	ClearSoulDeck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SetSoulBattleDeck(ctx context.Context, in *SetSoulDeckRequest, opts ...grpc.CallOption) (*Empty, error)
	ClearSoulBattleDeck(ctx context.Context, in *DeckNo, opts ...grpc.CallOption) (*Empty, error)
	GetMyDeckTemplates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeckTemplates, error)
	CreateMyDeckTemplate(ctx context.Context, in *HeroIds, opts ...grpc.CallOption) (*Empty, error)
	DeleteMyDeckTemplate(ctx context.Context, in *DeckTemplateNo, opts ...grpc.CallOption) (*Empty, error)
	SetMyDeckTemplate(ctx context.Context, in *SetMyTemplateRequest, opts ...grpc.CallOption) (*Empty, error)
	SwitchMyDeckTemplateOrder(ctx context.Context, in *TemplateNumbers, opts ...grpc.CallOption) (*Empty, error)
	CreateMyQuestDeckTemplate(ctx context.Context, in *HeroIds, opts ...grpc.CallOption) (*Empty, error)
	DeleteMyQuestDeckTemplate(ctx context.Context, in *DeckTemplateNo, opts ...grpc.CallOption) (*Empty, error)
	SetMyQuestDeckTemplate(ctx context.Context, in *SetMyTemplateRequest, opts ...grpc.CallOption) (*Empty, error)
	SwitchMyQuestDeckTemplateOrder(ctx context.Context, in *TemplateNumbers, opts ...grpc.CallOption) (*Empty, error)
	GetMyDeckTemplateInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeckTemplateInfo, error)
	// Rating duel
	SetMyRatingDuelOffenseDecks(ctx context.Context, in *SetRatingDuelOffenseDeckRequest, opts ...grpc.CallOption) (*Empty, error)
	SetMyRatingDuelDefenseDeck(ctx context.Context, in *SetRatingDuelDefenseDeckRequest, opts ...grpc.CallOption) (*Empty, error)
	SetMyRaidDeck(ctx context.Context, in *Deck, opts ...grpc.CallOption) (*Empty, error)
}

type deckServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeckServiceClient(cc grpc.ClientConnInterface) DeckServiceClient {
	return &deckServiceClient{cc}
}

func (c *deckServiceClient) GetDeck(ctx context.Context, in *Uid, opts ...grpc.CallOption) (*MiniDeck, error) {
	out := new(MiniDeck)
	err := c.cc.Invoke(ctx, DeckService_GetDeck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) GetMyDecks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Decks, error) {
	out := new(Decks)
	err := c.cc.Invoke(ctx, DeckService_GetMyDecks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SetMyDeck(ctx context.Context, in *SetMyDeckRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_SetMyDeck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) RecoveryStamina(ctx context.Context, in *StaminaRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_RecoveryStamina_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) GetCupDeck(ctx context.Context, in *UidCup, opts ...grpc.CallOption) (*MiniDeck, error) {
	out := new(MiniDeck)
	err := c.cc.Invoke(ctx, DeckService_GetCupDeck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) GetCupDecks(ctx context.Context, in *UidsCup, opts ...grpc.CallOption) (*MiniDecksWithUid, error) {
	out := new(MiniDecksWithUid)
	err := c.cc.Invoke(ctx, DeckService_GetCupDecks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SetMyCupDeck(ctx context.Context, in *CupDeck, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_SetMyCupDeck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) BreakupPrimeDeck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_BreakupPrimeDeck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SetMyKnightDeck(ctx context.Context, in *Deck, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_SetMyKnightDeck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SetMyWarDeck(ctx context.Context, in *Deck, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_SetMyWarDeck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) GetOurFlagDecks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FlagDecks, error) {
	out := new(FlagDecks)
	err := c.cc.Invoke(ctx, DeckService_GetOurFlagDecks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SetMyNineDeck(ctx context.Context, in *CupDeck, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_SetMyNineDeck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SetMyThreeOnThreeOnThreeDecks(ctx context.Context, in *SetThreeOnThreeOnThreeDeckRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_SetMyThreeOnThreeOnThreeDecks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SwitchThreeOnThreeOnThreeDecksOrder(ctx context.Context, in *DeckNumbers, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_SwitchThreeOnThreeOnThreeDecksOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SetMyArenaDeckV2(ctx context.Context, in *SetMyArenaDeckRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_SetMyArenaDeckV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SetMyColosseumOffenseDeck(ctx context.Context, in *Deck, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_SetMyColosseumOffenseDeck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SetMyColosseumDefenseDeckV2(ctx context.Context, in *SetMyDeckRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_SetMyColosseumDefenseDeckV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SetMyQuestSixDeck(ctx context.Context, in *Deck, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_SetMyQuestSixDeck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SetGymDeck(ctx context.Context, in *SetGymDeckRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_SetGymDeck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SetSoulDeck(ctx context.Context, in *SetSoulDeckRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_SetSoulDeck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) ClearSoulDeck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_ClearSoulDeck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SetSoulBattleDeck(ctx context.Context, in *SetSoulDeckRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_SetSoulBattleDeck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) ClearSoulBattleDeck(ctx context.Context, in *DeckNo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_ClearSoulBattleDeck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) GetMyDeckTemplates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeckTemplates, error) {
	out := new(DeckTemplates)
	err := c.cc.Invoke(ctx, DeckService_GetMyDeckTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) CreateMyDeckTemplate(ctx context.Context, in *HeroIds, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_CreateMyDeckTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) DeleteMyDeckTemplate(ctx context.Context, in *DeckTemplateNo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_DeleteMyDeckTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SetMyDeckTemplate(ctx context.Context, in *SetMyTemplateRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_SetMyDeckTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SwitchMyDeckTemplateOrder(ctx context.Context, in *TemplateNumbers, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_SwitchMyDeckTemplateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) CreateMyQuestDeckTemplate(ctx context.Context, in *HeroIds, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_CreateMyQuestDeckTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) DeleteMyQuestDeckTemplate(ctx context.Context, in *DeckTemplateNo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_DeleteMyQuestDeckTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SetMyQuestDeckTemplate(ctx context.Context, in *SetMyTemplateRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_SetMyQuestDeckTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SwitchMyQuestDeckTemplateOrder(ctx context.Context, in *TemplateNumbers, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_SwitchMyQuestDeckTemplateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) GetMyDeckTemplateInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeckTemplateInfo, error) {
	out := new(DeckTemplateInfo)
	err := c.cc.Invoke(ctx, DeckService_GetMyDeckTemplateInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SetMyRatingDuelOffenseDecks(ctx context.Context, in *SetRatingDuelOffenseDeckRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_SetMyRatingDuelOffenseDecks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SetMyRatingDuelDefenseDeck(ctx context.Context, in *SetRatingDuelDefenseDeckRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_SetMyRatingDuelDefenseDeck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SetMyRaidDeck(ctx context.Context, in *Deck, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeckService_SetMyRaidDeck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeckServiceServer is the server API for DeckService service.
// All implementations must embed UnimplementedDeckServiceServer
// for forward compatibility
type DeckServiceServer interface {
	GetDeck(context.Context, *Uid) (*MiniDeck, error)
	GetMyDecks(context.Context, *Empty) (*Decks, error)
	SetMyDeck(context.Context, *SetMyDeckRequest) (*Empty, error)
	RecoveryStamina(context.Context, *StaminaRequest) (*Empty, error)
	// rpc GetRecoveryStaminaFee(StaminaRequest) returns (Gum) {} // deprecated
	GetCupDeck(context.Context, *UidCup) (*MiniDeck, error)
	GetCupDecks(context.Context, *UidsCup) (*MiniDecksWithUid, error)
	SetMyCupDeck(context.Context, *CupDeck) (*Empty, error)
	BreakupPrimeDeck(context.Context, *Empty) (*Empty, error)
	SetMyKnightDeck(context.Context, *Deck) (*Empty, error)
	SetMyWarDeck(context.Context, *Deck) (*Empty, error)
	GetOurFlagDecks(context.Context, *Empty) (*FlagDecks, error)
	// rpc SetMyArenaDeck(Deck) returns (Empty) {}  // deprecated
	// rpc InitMyNineDeck(CupHeroIds) returns (Empty) {}
	SetMyNineDeck(context.Context, *CupDeck) (*Empty, error)
	SetMyThreeOnThreeOnThreeDecks(context.Context, *SetThreeOnThreeOnThreeDeckRequest) (*Empty, error)
	SwitchThreeOnThreeOnThreeDecksOrder(context.Context, *DeckNumbers) (*Empty, error)
	// rpc InitMyArenaNineDeck(HeroIds) returns (Empty) {}  // deprecated
	// rpc SetMyArenaNineDeck(Deck) returns (Empty) {}  // deprecated
	SetMyArenaDeckV2(context.Context, *SetMyArenaDeckRequest) (*Empty, error)
	SetMyColosseumOffenseDeck(context.Context, *Deck) (*Empty, error)
	SetMyColosseumDefenseDeckV2(context.Context, *SetMyDeckRequest) (*Empty, error)
	SetMyQuestSixDeck(context.Context, *Deck) (*Empty, error)
	SetGymDeck(context.Context, *SetGymDeckRequest) (*Empty, error)
	SetSoulDeck(context.Context, *SetSoulDeckRequest) (*Empty, error)
	ClearSoulDeck(context.Context, *Empty) (*Empty, error)
	SetSoulBattleDeck(context.Context, *SetSoulDeckRequest) (*Empty, error)
	ClearSoulBattleDeck(context.Context, *DeckNo) (*Empty, error)
	GetMyDeckTemplates(context.Context, *Empty) (*DeckTemplates, error)
	CreateMyDeckTemplate(context.Context, *HeroIds) (*Empty, error)
	DeleteMyDeckTemplate(context.Context, *DeckTemplateNo) (*Empty, error)
	SetMyDeckTemplate(context.Context, *SetMyTemplateRequest) (*Empty, error)
	SwitchMyDeckTemplateOrder(context.Context, *TemplateNumbers) (*Empty, error)
	CreateMyQuestDeckTemplate(context.Context, *HeroIds) (*Empty, error)
	DeleteMyQuestDeckTemplate(context.Context, *DeckTemplateNo) (*Empty, error)
	SetMyQuestDeckTemplate(context.Context, *SetMyTemplateRequest) (*Empty, error)
	SwitchMyQuestDeckTemplateOrder(context.Context, *TemplateNumbers) (*Empty, error)
	GetMyDeckTemplateInfo(context.Context, *Empty) (*DeckTemplateInfo, error)
	// Rating duel
	SetMyRatingDuelOffenseDecks(context.Context, *SetRatingDuelOffenseDeckRequest) (*Empty, error)
	SetMyRatingDuelDefenseDeck(context.Context, *SetRatingDuelDefenseDeckRequest) (*Empty, error)
	SetMyRaidDeck(context.Context, *Deck) (*Empty, error)
	mustEmbedUnimplementedDeckServiceServer()
}

// UnimplementedDeckServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeckServiceServer struct {
}

func (UnimplementedDeckServiceServer) GetDeck(context.Context, *Uid) (*MiniDeck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeck not implemented")
}
func (UnimplementedDeckServiceServer) GetMyDecks(context.Context, *Empty) (*Decks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyDecks not implemented")
}
func (UnimplementedDeckServiceServer) SetMyDeck(context.Context, *SetMyDeckRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyDeck not implemented")
}
func (UnimplementedDeckServiceServer) RecoveryStamina(context.Context, *StaminaRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoveryStamina not implemented")
}
func (UnimplementedDeckServiceServer) GetCupDeck(context.Context, *UidCup) (*MiniDeck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCupDeck not implemented")
}
func (UnimplementedDeckServiceServer) GetCupDecks(context.Context, *UidsCup) (*MiniDecksWithUid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCupDecks not implemented")
}
func (UnimplementedDeckServiceServer) SetMyCupDeck(context.Context, *CupDeck) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyCupDeck not implemented")
}
func (UnimplementedDeckServiceServer) BreakupPrimeDeck(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BreakupPrimeDeck not implemented")
}
func (UnimplementedDeckServiceServer) SetMyKnightDeck(context.Context, *Deck) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyKnightDeck not implemented")
}
func (UnimplementedDeckServiceServer) SetMyWarDeck(context.Context, *Deck) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyWarDeck not implemented")
}
func (UnimplementedDeckServiceServer) GetOurFlagDecks(context.Context, *Empty) (*FlagDecks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOurFlagDecks not implemented")
}
func (UnimplementedDeckServiceServer) SetMyNineDeck(context.Context, *CupDeck) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyNineDeck not implemented")
}
func (UnimplementedDeckServiceServer) SetMyThreeOnThreeOnThreeDecks(context.Context, *SetThreeOnThreeOnThreeDeckRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyThreeOnThreeOnThreeDecks not implemented")
}
func (UnimplementedDeckServiceServer) SwitchThreeOnThreeOnThreeDecksOrder(context.Context, *DeckNumbers) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchThreeOnThreeOnThreeDecksOrder not implemented")
}
func (UnimplementedDeckServiceServer) SetMyArenaDeckV2(context.Context, *SetMyArenaDeckRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyArenaDeckV2 not implemented")
}
func (UnimplementedDeckServiceServer) SetMyColosseumOffenseDeck(context.Context, *Deck) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyColosseumOffenseDeck not implemented")
}
func (UnimplementedDeckServiceServer) SetMyColosseumDefenseDeckV2(context.Context, *SetMyDeckRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyColosseumDefenseDeckV2 not implemented")
}
func (UnimplementedDeckServiceServer) SetMyQuestSixDeck(context.Context, *Deck) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyQuestSixDeck not implemented")
}
func (UnimplementedDeckServiceServer) SetGymDeck(context.Context, *SetGymDeckRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGymDeck not implemented")
}
func (UnimplementedDeckServiceServer) SetSoulDeck(context.Context, *SetSoulDeckRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSoulDeck not implemented")
}
func (UnimplementedDeckServiceServer) ClearSoulDeck(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearSoulDeck not implemented")
}
func (UnimplementedDeckServiceServer) SetSoulBattleDeck(context.Context, *SetSoulDeckRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSoulBattleDeck not implemented")
}
func (UnimplementedDeckServiceServer) ClearSoulBattleDeck(context.Context, *DeckNo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearSoulBattleDeck not implemented")
}
func (UnimplementedDeckServiceServer) GetMyDeckTemplates(context.Context, *Empty) (*DeckTemplates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyDeckTemplates not implemented")
}
func (UnimplementedDeckServiceServer) CreateMyDeckTemplate(context.Context, *HeroIds) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMyDeckTemplate not implemented")
}
func (UnimplementedDeckServiceServer) DeleteMyDeckTemplate(context.Context, *DeckTemplateNo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMyDeckTemplate not implemented")
}
func (UnimplementedDeckServiceServer) SetMyDeckTemplate(context.Context, *SetMyTemplateRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyDeckTemplate not implemented")
}
func (UnimplementedDeckServiceServer) SwitchMyDeckTemplateOrder(context.Context, *TemplateNumbers) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchMyDeckTemplateOrder not implemented")
}
func (UnimplementedDeckServiceServer) CreateMyQuestDeckTemplate(context.Context, *HeroIds) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMyQuestDeckTemplate not implemented")
}
func (UnimplementedDeckServiceServer) DeleteMyQuestDeckTemplate(context.Context, *DeckTemplateNo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMyQuestDeckTemplate not implemented")
}
func (UnimplementedDeckServiceServer) SetMyQuestDeckTemplate(context.Context, *SetMyTemplateRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyQuestDeckTemplate not implemented")
}
func (UnimplementedDeckServiceServer) SwitchMyQuestDeckTemplateOrder(context.Context, *TemplateNumbers) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchMyQuestDeckTemplateOrder not implemented")
}
func (UnimplementedDeckServiceServer) GetMyDeckTemplateInfo(context.Context, *Empty) (*DeckTemplateInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyDeckTemplateInfo not implemented")
}
func (UnimplementedDeckServiceServer) SetMyRatingDuelOffenseDecks(context.Context, *SetRatingDuelOffenseDeckRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyRatingDuelOffenseDecks not implemented")
}
func (UnimplementedDeckServiceServer) SetMyRatingDuelDefenseDeck(context.Context, *SetRatingDuelDefenseDeckRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyRatingDuelDefenseDeck not implemented")
}
func (UnimplementedDeckServiceServer) SetMyRaidDeck(context.Context, *Deck) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyRaidDeck not implemented")
}
func (UnimplementedDeckServiceServer) mustEmbedUnimplementedDeckServiceServer() {}

// UnsafeDeckServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeckServiceServer will
// result in compilation errors.
type UnsafeDeckServiceServer interface {
	mustEmbedUnimplementedDeckServiceServer()
}

func RegisterDeckServiceServer(s grpc.ServiceRegistrar, srv DeckServiceServer) {
	s.RegisterService(&DeckService_ServiceDesc, srv)
}

func _DeckService_GetDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).GetDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_GetDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).GetDeck(ctx, req.(*Uid))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_GetMyDecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).GetMyDecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_GetMyDecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).GetMyDecks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SetMyDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMyDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SetMyDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SetMyDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SetMyDeck(ctx, req.(*SetMyDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_RecoveryStamina_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaminaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).RecoveryStamina(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_RecoveryStamina_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).RecoveryStamina(ctx, req.(*StaminaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_GetCupDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UidCup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).GetCupDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_GetCupDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).GetCupDeck(ctx, req.(*UidCup))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_GetCupDecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UidsCup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).GetCupDecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_GetCupDecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).GetCupDecks(ctx, req.(*UidsCup))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SetMyCupDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CupDeck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SetMyCupDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SetMyCupDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SetMyCupDeck(ctx, req.(*CupDeck))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_BreakupPrimeDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).BreakupPrimeDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_BreakupPrimeDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).BreakupPrimeDeck(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SetMyKnightDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SetMyKnightDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SetMyKnightDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SetMyKnightDeck(ctx, req.(*Deck))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SetMyWarDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SetMyWarDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SetMyWarDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SetMyWarDeck(ctx, req.(*Deck))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_GetOurFlagDecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).GetOurFlagDecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_GetOurFlagDecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).GetOurFlagDecks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SetMyNineDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CupDeck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SetMyNineDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SetMyNineDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SetMyNineDeck(ctx, req.(*CupDeck))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SetMyThreeOnThreeOnThreeDecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetThreeOnThreeOnThreeDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SetMyThreeOnThreeOnThreeDecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SetMyThreeOnThreeOnThreeDecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SetMyThreeOnThreeOnThreeDecks(ctx, req.(*SetThreeOnThreeOnThreeDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SwitchThreeOnThreeOnThreeDecksOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeckNumbers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SwitchThreeOnThreeOnThreeDecksOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SwitchThreeOnThreeOnThreeDecksOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SwitchThreeOnThreeOnThreeDecksOrder(ctx, req.(*DeckNumbers))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SetMyArenaDeckV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMyArenaDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SetMyArenaDeckV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SetMyArenaDeckV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SetMyArenaDeckV2(ctx, req.(*SetMyArenaDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SetMyColosseumOffenseDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SetMyColosseumOffenseDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SetMyColosseumOffenseDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SetMyColosseumOffenseDeck(ctx, req.(*Deck))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SetMyColosseumDefenseDeckV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMyDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SetMyColosseumDefenseDeckV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SetMyColosseumDefenseDeckV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SetMyColosseumDefenseDeckV2(ctx, req.(*SetMyDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SetMyQuestSixDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SetMyQuestSixDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SetMyQuestSixDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SetMyQuestSixDeck(ctx, req.(*Deck))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SetGymDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGymDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SetGymDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SetGymDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SetGymDeck(ctx, req.(*SetGymDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SetSoulDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSoulDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SetSoulDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SetSoulDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SetSoulDeck(ctx, req.(*SetSoulDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_ClearSoulDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).ClearSoulDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_ClearSoulDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).ClearSoulDeck(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SetSoulBattleDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSoulDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SetSoulBattleDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SetSoulBattleDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SetSoulBattleDeck(ctx, req.(*SetSoulDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_ClearSoulBattleDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeckNo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).ClearSoulBattleDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_ClearSoulBattleDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).ClearSoulBattleDeck(ctx, req.(*DeckNo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_GetMyDeckTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).GetMyDeckTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_GetMyDeckTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).GetMyDeckTemplates(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_CreateMyDeckTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeroIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).CreateMyDeckTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_CreateMyDeckTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).CreateMyDeckTemplate(ctx, req.(*HeroIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_DeleteMyDeckTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeckTemplateNo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).DeleteMyDeckTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_DeleteMyDeckTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).DeleteMyDeckTemplate(ctx, req.(*DeckTemplateNo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SetMyDeckTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMyTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SetMyDeckTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SetMyDeckTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SetMyDeckTemplate(ctx, req.(*SetMyTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SwitchMyDeckTemplateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateNumbers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SwitchMyDeckTemplateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SwitchMyDeckTemplateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SwitchMyDeckTemplateOrder(ctx, req.(*TemplateNumbers))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_CreateMyQuestDeckTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeroIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).CreateMyQuestDeckTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_CreateMyQuestDeckTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).CreateMyQuestDeckTemplate(ctx, req.(*HeroIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_DeleteMyQuestDeckTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeckTemplateNo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).DeleteMyQuestDeckTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_DeleteMyQuestDeckTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).DeleteMyQuestDeckTemplate(ctx, req.(*DeckTemplateNo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SetMyQuestDeckTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMyTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SetMyQuestDeckTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SetMyQuestDeckTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SetMyQuestDeckTemplate(ctx, req.(*SetMyTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SwitchMyQuestDeckTemplateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateNumbers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SwitchMyQuestDeckTemplateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SwitchMyQuestDeckTemplateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SwitchMyQuestDeckTemplateOrder(ctx, req.(*TemplateNumbers))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_GetMyDeckTemplateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).GetMyDeckTemplateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_GetMyDeckTemplateInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).GetMyDeckTemplateInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SetMyRatingDuelOffenseDecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRatingDuelOffenseDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SetMyRatingDuelOffenseDecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SetMyRatingDuelOffenseDecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SetMyRatingDuelOffenseDecks(ctx, req.(*SetRatingDuelOffenseDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SetMyRatingDuelDefenseDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRatingDuelDefenseDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SetMyRatingDuelDefenseDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SetMyRatingDuelDefenseDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SetMyRatingDuelDefenseDeck(ctx, req.(*SetRatingDuelDefenseDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SetMyRaidDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SetMyRaidDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SetMyRaidDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SetMyRaidDeck(ctx, req.(*Deck))
	}
	return interceptor(ctx, in, info, handler)
}

// DeckService_ServiceDesc is the grpc.ServiceDesc for DeckService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeckService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deck.DeckService",
	HandlerType: (*DeckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeck",
			Handler:    _DeckService_GetDeck_Handler,
		},
		{
			MethodName: "GetMyDecks",
			Handler:    _DeckService_GetMyDecks_Handler,
		},
		{
			MethodName: "SetMyDeck",
			Handler:    _DeckService_SetMyDeck_Handler,
		},
		{
			MethodName: "RecoveryStamina",
			Handler:    _DeckService_RecoveryStamina_Handler,
		},
		{
			MethodName: "GetCupDeck",
			Handler:    _DeckService_GetCupDeck_Handler,
		},
		{
			MethodName: "GetCupDecks",
			Handler:    _DeckService_GetCupDecks_Handler,
		},
		{
			MethodName: "SetMyCupDeck",
			Handler:    _DeckService_SetMyCupDeck_Handler,
		},
		{
			MethodName: "BreakupPrimeDeck",
			Handler:    _DeckService_BreakupPrimeDeck_Handler,
		},
		{
			MethodName: "SetMyKnightDeck",
			Handler:    _DeckService_SetMyKnightDeck_Handler,
		},
		{
			MethodName: "SetMyWarDeck",
			Handler:    _DeckService_SetMyWarDeck_Handler,
		},
		{
			MethodName: "GetOurFlagDecks",
			Handler:    _DeckService_GetOurFlagDecks_Handler,
		},
		{
			MethodName: "SetMyNineDeck",
			Handler:    _DeckService_SetMyNineDeck_Handler,
		},
		{
			MethodName: "SetMyThreeOnThreeOnThreeDecks",
			Handler:    _DeckService_SetMyThreeOnThreeOnThreeDecks_Handler,
		},
		{
			MethodName: "SwitchThreeOnThreeOnThreeDecksOrder",
			Handler:    _DeckService_SwitchThreeOnThreeOnThreeDecksOrder_Handler,
		},
		{
			MethodName: "SetMyArenaDeckV2",
			Handler:    _DeckService_SetMyArenaDeckV2_Handler,
		},
		{
			MethodName: "SetMyColosseumOffenseDeck",
			Handler:    _DeckService_SetMyColosseumOffenseDeck_Handler,
		},
		{
			MethodName: "SetMyColosseumDefenseDeckV2",
			Handler:    _DeckService_SetMyColosseumDefenseDeckV2_Handler,
		},
		{
			MethodName: "SetMyQuestSixDeck",
			Handler:    _DeckService_SetMyQuestSixDeck_Handler,
		},
		{
			MethodName: "SetGymDeck",
			Handler:    _DeckService_SetGymDeck_Handler,
		},
		{
			MethodName: "SetSoulDeck",
			Handler:    _DeckService_SetSoulDeck_Handler,
		},
		{
			MethodName: "ClearSoulDeck",
			Handler:    _DeckService_ClearSoulDeck_Handler,
		},
		{
			MethodName: "SetSoulBattleDeck",
			Handler:    _DeckService_SetSoulBattleDeck_Handler,
		},
		{
			MethodName: "ClearSoulBattleDeck",
			Handler:    _DeckService_ClearSoulBattleDeck_Handler,
		},
		{
			MethodName: "GetMyDeckTemplates",
			Handler:    _DeckService_GetMyDeckTemplates_Handler,
		},
		{
			MethodName: "CreateMyDeckTemplate",
			Handler:    _DeckService_CreateMyDeckTemplate_Handler,
		},
		{
			MethodName: "DeleteMyDeckTemplate",
			Handler:    _DeckService_DeleteMyDeckTemplate_Handler,
		},
		{
			MethodName: "SetMyDeckTemplate",
			Handler:    _DeckService_SetMyDeckTemplate_Handler,
		},
		{
			MethodName: "SwitchMyDeckTemplateOrder",
			Handler:    _DeckService_SwitchMyDeckTemplateOrder_Handler,
		},
		{
			MethodName: "CreateMyQuestDeckTemplate",
			Handler:    _DeckService_CreateMyQuestDeckTemplate_Handler,
		},
		{
			MethodName: "DeleteMyQuestDeckTemplate",
			Handler:    _DeckService_DeleteMyQuestDeckTemplate_Handler,
		},
		{
			MethodName: "SetMyQuestDeckTemplate",
			Handler:    _DeckService_SetMyQuestDeckTemplate_Handler,
		},
		{
			MethodName: "SwitchMyQuestDeckTemplateOrder",
			Handler:    _DeckService_SwitchMyQuestDeckTemplateOrder_Handler,
		},
		{
			MethodName: "GetMyDeckTemplateInfo",
			Handler:    _DeckService_GetMyDeckTemplateInfo_Handler,
		},
		{
			MethodName: "SetMyRatingDuelOffenseDecks",
			Handler:    _DeckService_SetMyRatingDuelOffenseDecks_Handler,
		},
		{
			MethodName: "SetMyRatingDuelDefenseDeck",
			Handler:    _DeckService_SetMyRatingDuelDefenseDeck_Handler,
		},
		{
			MethodName: "SetMyRaidDeck",
			Handler:    _DeckService_SetMyRaidDeck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deck.proto",
}
