// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: deck.proto

package deck

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeckTemplateType int32

const (
	DeckTemplateType_NOTYPE              DeckTemplateType = 0
	DeckTemplateType_DUEL_DECK_TEMPLATE  DeckTemplateType = 1
	DeckTemplateType_QUEST_DECK_TEMPLATE DeckTemplateType = 2
)

// Enum value maps for DeckTemplateType.
var (
	DeckTemplateType_name = map[int32]string{
		0: "NOTYPE",
		1: "DUEL_DECK_TEMPLATE",
		2: "QUEST_DECK_TEMPLATE",
	}
	DeckTemplateType_value = map[string]int32{
		"NOTYPE":              0,
		"DUEL_DECK_TEMPLATE":  1,
		"QUEST_DECK_TEMPLATE": 2,
	}
)

func (x DeckTemplateType) Enum() *DeckTemplateType {
	p := new(DeckTemplateType)
	*p = x
	return p
}

func (x DeckTemplateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeckTemplateType) Descriptor() protoreflect.EnumDescriptor {
	return file_deck_proto_enumTypes[0].Descriptor()
}

func (DeckTemplateType) Type() protoreflect.EnumType {
	return &file_deck_proto_enumTypes[0]
}

func (x DeckTemplateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeckTemplateType.Descriptor instead.
func (DeckTemplateType) EnumDescriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{0}
}

type DeckType int32

const (
	DeckType_QUEST DeckType = 0
	DeckType_CUP   DeckType = 1
	DeckType_NINE  DeckType = 2
)

// Enum value maps for DeckType.
var (
	DeckType_name = map[int32]string{
		0: "QUEST",
		1: "CUP",
		2: "NINE",
	}
	DeckType_value = map[string]int32{
		"QUEST": 0,
		"CUP":   1,
		"NINE":  2,
	}
)

func (x DeckType) Enum() *DeckType {
	p := new(DeckType)
	*p = x
	return p
}

func (x DeckType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeckType) Descriptor() protoreflect.EnumDescriptor {
	return file_deck_proto_enumTypes[1].Descriptor()
}

func (DeckType) Type() protoreflect.EnumType {
	return &file_deck_proto_enumTypes[1]
}

func (x DeckType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeckType.Descriptor instead.
func (DeckType) EnumDescriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{1}
}

type Uid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *Uid) Reset() {
	*x = Uid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uid) ProtoMessage() {}

func (x *Uid) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uid.ProtoReflect.Descriptor instead.
func (*Uid) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{0}
}

func (x *Uid) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type DeckTemplateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                        uint32           `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	TemplateTypeExpansionCount map[uint32]int32 `protobuf:"bytes,2,rep,name=template_type_expansion_count,json=templateTypeExpansionCount,proto3" json:"template_type_expansion_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DeckTemplateInfo) Reset() {
	*x = DeckTemplateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeckTemplateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeckTemplateInfo) ProtoMessage() {}

func (x *DeckTemplateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeckTemplateInfo.ProtoReflect.Descriptor instead.
func (*DeckTemplateInfo) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{1}
}

func (x *DeckTemplateInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *DeckTemplateInfo) GetTemplateTypeExpansionCount() map[uint32]int32 {
	if x != nil {
		return x.TemplateTypeExpansionCount
	}
	return nil
}

type Decks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Decks []*Deck `protobuf:"bytes,1,rep,name=decks,proto3" json:"decks,omitempty"` // for quest 初期実装時命名
	// Deprecated: Marked as deprecated in deck.proto.
	CupDeck    *Deck `protobuf:"bytes,2,opt,name=cup_deck,json=cupDeck,proto3" json:"cup_deck,omitempty"`
	KnightDeck *Deck `protobuf:"bytes,3,opt,name=knight_deck,json=knightDeck,proto3" json:"knight_deck,omitempty"`
	// Deprecated: Marked as deprecated in deck.proto.
	ArenaDeck *Deck `protobuf:"bytes,4,opt,name=arena_deck,json=arenaDeck,proto3" json:"arena_deck,omitempty"`
	// Deprecated: Marked as deprecated in deck.proto.
	NineDeck *Deck `protobuf:"bytes,5,opt,name=nine_deck,json=nineDeck,proto3" json:"nine_deck,omitempty"`
	// Deprecated: Marked as deprecated in deck.proto.
	ArenaNineDeck        *Deck            `protobuf:"bytes,6,opt,name=arena_nine_deck,json=arenaNineDeck,proto3" json:"arena_nine_deck,omitempty"`
	ArenaDecks           map[uint32]*Deck `protobuf:"bytes,7,rep,name=arena_decks,json=arenaDecks,proto3" json:"arena_decks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ColosseumOffenseDeck *Deck            `protobuf:"bytes,9,opt,name=colosseum_offense_deck,json=colosseumOffenseDeck,proto3" json:"colosseum_offense_deck,omitempty"`
	// Deprecated: Marked as deprecated in deck.proto.
	ColosseumDefenseDeck     *Deck                             `protobuf:"bytes,10,opt,name=colosseum_defense_deck,json=colosseumDefenseDeck,proto3" json:"colosseum_defense_deck,omitempty"`
	QuestSixDeck             *Deck                             `protobuf:"bytes,11,opt,name=quest_six_deck,json=questSixDeck,proto3" json:"quest_six_deck,omitempty"`
	ColosseumDefenseDecks    []*Deck                           `protobuf:"bytes,12,rep,name=colosseum_defense_decks,json=colosseumDefenseDecks,proto3" json:"colosseum_defense_decks,omitempty"`
	WarDeck                  *Deck                             `protobuf:"bytes,13,opt,name=war_deck,json=warDeck,proto3" json:"war_deck,omitempty"`
	GymDecks                 map[uint32]*DeckList              `protobuf:"bytes,14,rep,name=gym_decks,json=gymDecks,proto3" json:"gym_decks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CupThreeDecks            map[uint32]*Deck                  `protobuf:"bytes,15,rep,name=cup_three_decks,json=cupThreeDecks,proto3" json:"cup_three_decks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CupNineDecks             map[uint32]*Deck                  `protobuf:"bytes,16,rep,name=cup_nine_decks,json=cupNineDecks,proto3" json:"cup_nine_decks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SoulDecks                map[uint32]*Deck                  `protobuf:"bytes,17,rep,name=soul_decks,json=soulDecks,proto3" json:"soul_decks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SoulBattleDecks          map[uint32]*SoulDeck              `protobuf:"bytes,18,rep,name=soul_battle_decks,json=soulBattleDecks,proto3" json:"soul_battle_decks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CupRegimentalDecks       map[uint32]*DeckList              `protobuf:"bytes,19,rep,name=cup_regimental_decks,json=cupRegimentalDecks,proto3" json:"cup_regimental_decks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RatingDuelOffenseDecks   map[uint32]*DeckList              `protobuf:"bytes,20,rep,name=rating_duel_offense_decks,json=ratingDuelOffenseDecks,proto3" json:"rating_duel_offense_decks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RatingDuelDefenseDeck    map[uint32]*RatingDuelDefenseDeck `protobuf:"bytes,21,rep,name=rating_duel_defense_deck,json=ratingDuelDefenseDeck,proto3" json:"rating_duel_defense_deck,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ThreeOnThreeOnThreeDecks map[uint32]*DeckList              `protobuf:"bytes,22,rep,name=three_on_three_on_three_decks,json=threeOnThreeOnThreeDecks,proto3" json:"three_on_three_on_three_decks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RaidDeck                 *Deck                             `protobuf:"bytes,23,opt,name=raid_deck,json=raidDeck,proto3" json:"raid_deck,omitempty"`
	CraftDeck                *CraftDeck                        `protobuf:"bytes,24,opt,name=craft_deck,json=craftDeck,proto3" json:"craft_deck,omitempty"`
}

func (x *Decks) Reset() {
	*x = Decks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decks) ProtoMessage() {}

func (x *Decks) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decks.ProtoReflect.Descriptor instead.
func (*Decks) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{2}
}

func (x *Decks) GetDecks() []*Deck {
	if x != nil {
		return x.Decks
	}
	return nil
}

// Deprecated: Marked as deprecated in deck.proto.
func (x *Decks) GetCupDeck() *Deck {
	if x != nil {
		return x.CupDeck
	}
	return nil
}

func (x *Decks) GetKnightDeck() *Deck {
	if x != nil {
		return x.KnightDeck
	}
	return nil
}

// Deprecated: Marked as deprecated in deck.proto.
func (x *Decks) GetArenaDeck() *Deck {
	if x != nil {
		return x.ArenaDeck
	}
	return nil
}

// Deprecated: Marked as deprecated in deck.proto.
func (x *Decks) GetNineDeck() *Deck {
	if x != nil {
		return x.NineDeck
	}
	return nil
}

// Deprecated: Marked as deprecated in deck.proto.
func (x *Decks) GetArenaNineDeck() *Deck {
	if x != nil {
		return x.ArenaNineDeck
	}
	return nil
}

func (x *Decks) GetArenaDecks() map[uint32]*Deck {
	if x != nil {
		return x.ArenaDecks
	}
	return nil
}

func (x *Decks) GetColosseumOffenseDeck() *Deck {
	if x != nil {
		return x.ColosseumOffenseDeck
	}
	return nil
}

// Deprecated: Marked as deprecated in deck.proto.
func (x *Decks) GetColosseumDefenseDeck() *Deck {
	if x != nil {
		return x.ColosseumDefenseDeck
	}
	return nil
}

func (x *Decks) GetQuestSixDeck() *Deck {
	if x != nil {
		return x.QuestSixDeck
	}
	return nil
}

func (x *Decks) GetColosseumDefenseDecks() []*Deck {
	if x != nil {
		return x.ColosseumDefenseDecks
	}
	return nil
}

func (x *Decks) GetWarDeck() *Deck {
	if x != nil {
		return x.WarDeck
	}
	return nil
}

func (x *Decks) GetGymDecks() map[uint32]*DeckList {
	if x != nil {
		return x.GymDecks
	}
	return nil
}

func (x *Decks) GetCupThreeDecks() map[uint32]*Deck {
	if x != nil {
		return x.CupThreeDecks
	}
	return nil
}

func (x *Decks) GetCupNineDecks() map[uint32]*Deck {
	if x != nil {
		return x.CupNineDecks
	}
	return nil
}

func (x *Decks) GetSoulDecks() map[uint32]*Deck {
	if x != nil {
		return x.SoulDecks
	}
	return nil
}

func (x *Decks) GetSoulBattleDecks() map[uint32]*SoulDeck {
	if x != nil {
		return x.SoulBattleDecks
	}
	return nil
}

func (x *Decks) GetCupRegimentalDecks() map[uint32]*DeckList {
	if x != nil {
		return x.CupRegimentalDecks
	}
	return nil
}

func (x *Decks) GetRatingDuelOffenseDecks() map[uint32]*DeckList {
	if x != nil {
		return x.RatingDuelOffenseDecks
	}
	return nil
}

func (x *Decks) GetRatingDuelDefenseDeck() map[uint32]*RatingDuelDefenseDeck {
	if x != nil {
		return x.RatingDuelDefenseDeck
	}
	return nil
}

func (x *Decks) GetThreeOnThreeOnThreeDecks() map[uint32]*DeckList {
	if x != nil {
		return x.ThreeOnThreeOnThreeDecks
	}
	return nil
}

func (x *Decks) GetRaidDeck() *Deck {
	if x != nil {
		return x.RaidDeck
	}
	return nil
}

func (x *Decks) GetCraftDeck() *CraftDeck {
	if x != nil {
		return x.CraftDeck
	}
	return nil
}

type HeroIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroIds []uint32 `protobuf:"varint,1,rep,packed,name=hero_ids,json=heroIds,proto3" json:"hero_ids,omitempty"`
}

func (x *HeroIds) Reset() {
	*x = HeroIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeroIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeroIds) ProtoMessage() {}

func (x *HeroIds) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeroIds.ProtoReflect.Descriptor instead.
func (*HeroIds) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{3}
}

func (x *HeroIds) GetHeroIds() []uint32 {
	if x != nil {
		return x.HeroIds
	}
	return nil
}

type FlagDecks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uids  []uint32 `protobuf:"varint,1,rep,packed,name=uids,proto3" json:"uids,omitempty"`
	Decks []*Deck  `protobuf:"bytes,2,rep,name=decks,proto3" json:"decks,omitempty"`
}

func (x *FlagDecks) Reset() {
	*x = FlagDecks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagDecks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagDecks) ProtoMessage() {}

func (x *FlagDecks) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagDecks.ProtoReflect.Descriptor instead.
func (*FlagDecks) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{4}
}

func (x *FlagDecks) GetUids() []uint32 {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *FlagDecks) GetDecks() []*Deck {
	if x != nil {
		return x.Decks
	}
	return nil
}

type DeckList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckList []*Deck `protobuf:"bytes,1,rep,name=deck_list,json=deckList,proto3" json:"deck_list,omitempty"`
}

func (x *DeckList) Reset() {
	*x = DeckList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeckList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeckList) ProtoMessage() {}

func (x *DeckList) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeckList.ProtoReflect.Descriptor instead.
func (*DeckList) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{5}
}

func (x *DeckList) GetDeckList() []*Deck {
	if x != nil {
		return x.DeckList
	}
	return nil
}

type Deck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Units []*DeckUnit `protobuf:"bytes,1,rep,name=units,proto3" json:"units,omitempty"`
	// Deprecated: Marked as deprecated in deck.proto.
	JinId  uint32   `protobuf:"varint,2,opt,name=jin_id,json=jinId,proto3" json:"jin_id,omitempty"`
	JinIds []uint32 `protobuf:"varint,3,rep,packed,name=jin_ids,json=jinIds,proto3" json:"jin_ids,omitempty"`
	Name   string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Deck) Reset() {
	*x = Deck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deck) ProtoMessage() {}

func (x *Deck) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deck.ProtoReflect.Descriptor instead.
func (*Deck) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{6}
}

func (x *Deck) GetUnits() []*DeckUnit {
	if x != nil {
		return x.Units
	}
	return nil
}

// Deprecated: Marked as deprecated in deck.proto.
func (x *Deck) GetJinId() uint32 {
	if x != nil {
		return x.JinId
	}
	return 0
}

func (x *Deck) GetJinIds() []uint32 {
	if x != nil {
		return x.JinIds
	}
	return nil
}

func (x *Deck) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CupDeck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deck  *Deck  `protobuf:"bytes,1,opt,name=deck,proto3" json:"deck,omitempty"`
	CupId uint32 `protobuf:"varint,2,opt,name=cup_id,json=cupId,proto3" json:"cup_id,omitempty"`
}

func (x *CupDeck) Reset() {
	*x = CupDeck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CupDeck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CupDeck) ProtoMessage() {}

func (x *CupDeck) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CupDeck.ProtoReflect.Descriptor instead.
func (*CupDeck) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{7}
}

func (x *CupDeck) GetDeck() *Deck {
	if x != nil {
		return x.Deck
	}
	return nil
}

func (x *CupDeck) GetCupId() uint32 {
	if x != nil {
		return x.CupId
	}
	return 0
}

type SoulDeck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deck   *Deck  `protobuf:"bytes,1,opt,name=deck,proto3" json:"deck,omitempty"`
	SoulId uint32 `protobuf:"varint,2,opt,name=soul_id,json=soulId,proto3" json:"soul_id,omitempty"`
}

func (x *SoulDeck) Reset() {
	*x = SoulDeck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoulDeck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoulDeck) ProtoMessage() {}

func (x *SoulDeck) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoulDeck.ProtoReflect.Descriptor instead.
func (*SoulDeck) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{8}
}

func (x *SoulDeck) GetDeck() *Deck {
	if x != nil {
		return x.Deck
	}
	return nil
}

func (x *SoulDeck) GetSoulId() uint32 {
	if x != nil {
		return x.SoulId
	}
	return 0
}

type CraftDeck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroIds []uint32 `protobuf:"varint,1,rep,packed,name=hero_ids,json=heroIds,proto3" json:"hero_ids,omitempty"`
}

func (x *CraftDeck) Reset() {
	*x = CraftDeck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CraftDeck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CraftDeck) ProtoMessage() {}

func (x *CraftDeck) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CraftDeck.ProtoReflect.Descriptor instead.
func (*CraftDeck) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{9}
}

func (x *CraftDeck) GetHeroIds() []uint32 {
	if x != nil {
		return x.HeroIds
	}
	return nil
}

type RatingDuelDefenseDeck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deck              *Deck   `protobuf:"bytes,1,opt,name=deck,proto3" json:"deck,omitempty"`
	HiddenUnitIndexes []int32 `protobuf:"varint,2,rep,packed,name=hidden_unit_indexes,json=hiddenUnitIndexes,proto3" json:"hidden_unit_indexes,omitempty"`
}

func (x *RatingDuelDefenseDeck) Reset() {
	*x = RatingDuelDefenseDeck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingDuelDefenseDeck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingDuelDefenseDeck) ProtoMessage() {}

func (x *RatingDuelDefenseDeck) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingDuelDefenseDeck.ProtoReflect.Descriptor instead.
func (*RatingDuelDefenseDeck) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{10}
}

func (x *RatingDuelDefenseDeck) GetDeck() *Deck {
	if x != nil {
		return x.Deck
	}
	return nil
}

func (x *RatingDuelDefenseDeck) GetHiddenUnitIndexes() []int32 {
	if x != nil {
		return x.HiddenUnitIndexes
	}
	return nil
}

type DeckTemplates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckTemplates      []*DeckTemplate `protobuf:"bytes,1,rep,name=deck_templates,json=deckTemplates,proto3" json:"deck_templates,omitempty"`
	QuestDeckTemplates []*DeckTemplate `protobuf:"bytes,2,rep,name=quest_deck_templates,json=questDeckTemplates,proto3" json:"quest_deck_templates,omitempty"`
}

func (x *DeckTemplates) Reset() {
	*x = DeckTemplates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeckTemplates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeckTemplates) ProtoMessage() {}

func (x *DeckTemplates) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeckTemplates.ProtoReflect.Descriptor instead.
func (*DeckTemplates) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{11}
}

func (x *DeckTemplates) GetDeckTemplates() []*DeckTemplate {
	if x != nil {
		return x.DeckTemplates
	}
	return nil
}

func (x *DeckTemplates) GetQuestDeckTemplates() []*DeckTemplate {
	if x != nil {
		return x.QuestDeckTemplates
	}
	return nil
}

type DeckTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Units []*DeckUnit `protobuf:"bytes,1,rep,name=units,proto3" json:"units,omitempty"`
	// Deprecated: Marked as deprecated in deck.proto.
	JinId  uint32   `protobuf:"varint,2,opt,name=jin_id,json=jinId,proto3" json:"jin_id,omitempty"`
	JinIds []uint32 `protobuf:"varint,3,rep,packed,name=jin_ids,json=jinIds,proto3" json:"jin_ids,omitempty"`
	Name   string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeckTemplate) Reset() {
	*x = DeckTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeckTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeckTemplate) ProtoMessage() {}

func (x *DeckTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeckTemplate.ProtoReflect.Descriptor instead.
func (*DeckTemplate) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{12}
}

func (x *DeckTemplate) GetUnits() []*DeckUnit {
	if x != nil {
		return x.Units
	}
	return nil
}

// Deprecated: Marked as deprecated in deck.proto.
func (x *DeckTemplate) GetJinId() uint32 {
	if x != nil {
		return x.JinId
	}
	return 0
}

func (x *DeckTemplate) GetJinIds() []uint32 {
	if x != nil {
		return x.JinIds
	}
	return nil
}

func (x *DeckTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeckUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId          uint32   `protobuf:"varint,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	ExtensionIds    []uint32 `protobuf:"varint,2,rep,packed,name=extension_ids,json=extensionIds,proto3" json:"extension_ids,omitempty"`
	SkillOrders     []int32  `protobuf:"varint,3,rep,packed,name=skill_orders,json=skillOrders,proto3" json:"skill_orders,omitempty"`
	HeroActiveIndex int32    `protobuf:"varint,4,opt,name=hero_active_index,json=heroActiveIndex,proto3" json:"hero_active_index,omitempty"`
	ActiveAuras     []uint32 `protobuf:"varint,5,rep,packed,name=active_auras,json=activeAuras,proto3" json:"active_auras,omitempty"`
	ActiveSkill     uint32   `protobuf:"varint,6,opt,name=active_skill,json=activeSkill,proto3" json:"active_skill,omitempty"`
}

func (x *DeckUnit) Reset() {
	*x = DeckUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeckUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeckUnit) ProtoMessage() {}

func (x *DeckUnit) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeckUnit.ProtoReflect.Descriptor instead.
func (*DeckUnit) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{13}
}

func (x *DeckUnit) GetHeroId() uint32 {
	if x != nil {
		return x.HeroId
	}
	return 0
}

func (x *DeckUnit) GetExtensionIds() []uint32 {
	if x != nil {
		return x.ExtensionIds
	}
	return nil
}

func (x *DeckUnit) GetSkillOrders() []int32 {
	if x != nil {
		return x.SkillOrders
	}
	return nil
}

func (x *DeckUnit) GetHeroActiveIndex() int32 {
	if x != nil {
		return x.HeroActiveIndex
	}
	return 0
}

func (x *DeckUnit) GetActiveAuras() []uint32 {
	if x != nil {
		return x.ActiveAuras
	}
	return nil
}

func (x *DeckUnit) GetActiveSkill() uint32 {
	if x != nil {
		return x.ActiveSkill
	}
	return 0
}

type MiniDeck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroIds []uint32 `protobuf:"varint,1,rep,packed,name=hero_ids,json=heroIds,proto3" json:"hero_ids,omitempty"`
	// Deprecated: Marked as deprecated in deck.proto.
	JinId  uint32   `protobuf:"varint,2,opt,name=jin_id,json=jinId,proto3" json:"jin_id,omitempty"`
	JinIds []uint32 `protobuf:"varint,3,rep,packed,name=jin_ids,json=jinIds,proto3" json:"jin_ids,omitempty"`
}

func (x *MiniDeck) Reset() {
	*x = MiniDeck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniDeck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniDeck) ProtoMessage() {}

func (x *MiniDeck) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniDeck.ProtoReflect.Descriptor instead.
func (*MiniDeck) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{14}
}

func (x *MiniDeck) GetHeroIds() []uint32 {
	if x != nil {
		return x.HeroIds
	}
	return nil
}

// Deprecated: Marked as deprecated in deck.proto.
func (x *MiniDeck) GetJinId() uint32 {
	if x != nil {
		return x.JinId
	}
	return 0
}

func (x *MiniDeck) GetJinIds() []uint32 {
	if x != nil {
		return x.JinIds
	}
	return nil
}

type MiniDeckWithUid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  uint32    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Deck *MiniDeck `protobuf:"bytes,2,opt,name=deck,proto3" json:"deck,omitempty"`
}

func (x *MiniDeckWithUid) Reset() {
	*x = MiniDeckWithUid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniDeckWithUid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniDeckWithUid) ProtoMessage() {}

func (x *MiniDeckWithUid) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniDeckWithUid.ProtoReflect.Descriptor instead.
func (*MiniDeckWithUid) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{15}
}

func (x *MiniDeckWithUid) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MiniDeckWithUid) GetDeck() *MiniDeck {
	if x != nil {
		return x.Deck
	}
	return nil
}

type MiniDecksWithUid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Decks []*MiniDeckWithUid `protobuf:"bytes,1,rep,name=decks,proto3" json:"decks,omitempty"`
}

func (x *MiniDecksWithUid) Reset() {
	*x = MiniDecksWithUid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniDecksWithUid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniDecksWithUid) ProtoMessage() {}

func (x *MiniDecksWithUid) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniDecksWithUid.ProtoReflect.Descriptor instead.
func (*MiniDecksWithUid) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{16}
}

func (x *MiniDecksWithUid) GetDecks() []*MiniDeckWithUid {
	if x != nil {
		return x.Decks
	}
	return nil
}

type SetMyDeckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckNo int32 `protobuf:"varint,1,opt,name=deck_no,json=deckNo,proto3" json:"deck_no,omitempty"`
	Deck   *Deck `protobuf:"bytes,2,opt,name=deck,proto3" json:"deck,omitempty"`
}

func (x *SetMyDeckRequest) Reset() {
	*x = SetMyDeckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMyDeckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMyDeckRequest) ProtoMessage() {}

func (x *SetMyDeckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMyDeckRequest.ProtoReflect.Descriptor instead.
func (*SetMyDeckRequest) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{17}
}

func (x *SetMyDeckRequest) GetDeckNo() int32 {
	if x != nil {
		return x.DeckNo
	}
	return 0
}

func (x *SetMyDeckRequest) GetDeck() *Deck {
	if x != nil {
		return x.Deck
	}
	return nil
}

type SetGymDeckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GymId  uint32 `protobuf:"varint,1,opt,name=gym_id,json=gymId,proto3" json:"gym_id,omitempty"`
	DeckNo int32  `protobuf:"varint,2,opt,name=deck_no,json=deckNo,proto3" json:"deck_no,omitempty"`
	Deck   *Deck  `protobuf:"bytes,3,opt,name=deck,proto3" json:"deck,omitempty"`
}

func (x *SetGymDeckRequest) Reset() {
	*x = SetGymDeckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGymDeckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGymDeckRequest) ProtoMessage() {}

func (x *SetGymDeckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGymDeckRequest.ProtoReflect.Descriptor instead.
func (*SetGymDeckRequest) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{18}
}

func (x *SetGymDeckRequest) GetGymId() uint32 {
	if x != nil {
		return x.GymId
	}
	return 0
}

func (x *SetGymDeckRequest) GetDeckNo() int32 {
	if x != nil {
		return x.DeckNo
	}
	return 0
}

func (x *SetGymDeckRequest) GetDeck() *Deck {
	if x != nil {
		return x.Deck
	}
	return nil
}

type SetSoulDeckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoulId uint32 `protobuf:"varint,1,opt,name=soul_id,json=soulId,proto3" json:"soul_id,omitempty"`
	Deck   *Deck  `protobuf:"bytes,2,opt,name=deck,proto3" json:"deck,omitempty"`
	DeckNo uint32 `protobuf:"varint,3,opt,name=deck_no,json=deckNo,proto3" json:"deck_no,omitempty"`
}

func (x *SetSoulDeckRequest) Reset() {
	*x = SetSoulDeckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSoulDeckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSoulDeckRequest) ProtoMessage() {}

func (x *SetSoulDeckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSoulDeckRequest.ProtoReflect.Descriptor instead.
func (*SetSoulDeckRequest) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{19}
}

func (x *SetSoulDeckRequest) GetSoulId() uint32 {
	if x != nil {
		return x.SoulId
	}
	return 0
}

func (x *SetSoulDeckRequest) GetDeck() *Deck {
	if x != nil {
		return x.Deck
	}
	return nil
}

func (x *SetSoulDeckRequest) GetDeckNo() uint32 {
	if x != nil {
		return x.DeckNo
	}
	return 0
}

type SetRatingDuelOffenseDeckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CupId  uint32 `protobuf:"varint,1,opt,name=cup_id,json=cupId,proto3" json:"cup_id,omitempty"`
	DeckNo int32  `protobuf:"varint,2,opt,name=deck_no,json=deckNo,proto3" json:"deck_no,omitempty"`
	Deck   *Deck  `protobuf:"bytes,3,opt,name=deck,proto3" json:"deck,omitempty"`
}

func (x *SetRatingDuelOffenseDeckRequest) Reset() {
	*x = SetRatingDuelOffenseDeckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRatingDuelOffenseDeckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRatingDuelOffenseDeckRequest) ProtoMessage() {}

func (x *SetRatingDuelOffenseDeckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRatingDuelOffenseDeckRequest.ProtoReflect.Descriptor instead.
func (*SetRatingDuelOffenseDeckRequest) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{20}
}

func (x *SetRatingDuelOffenseDeckRequest) GetCupId() uint32 {
	if x != nil {
		return x.CupId
	}
	return 0
}

func (x *SetRatingDuelOffenseDeckRequest) GetDeckNo() int32 {
	if x != nil {
		return x.DeckNo
	}
	return 0
}

func (x *SetRatingDuelOffenseDeckRequest) GetDeck() *Deck {
	if x != nil {
		return x.Deck
	}
	return nil
}

type SetRatingDuelDefenseDeckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CupId uint32                 `protobuf:"varint,1,opt,name=cup_id,json=cupId,proto3" json:"cup_id,omitempty"`
	Deck  *RatingDuelDefenseDeck `protobuf:"bytes,2,opt,name=deck,proto3" json:"deck,omitempty"`
}

func (x *SetRatingDuelDefenseDeckRequest) Reset() {
	*x = SetRatingDuelDefenseDeckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRatingDuelDefenseDeckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRatingDuelDefenseDeckRequest) ProtoMessage() {}

func (x *SetRatingDuelDefenseDeckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRatingDuelDefenseDeckRequest.ProtoReflect.Descriptor instead.
func (*SetRatingDuelDefenseDeckRequest) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{21}
}

func (x *SetRatingDuelDefenseDeckRequest) GetCupId() uint32 {
	if x != nil {
		return x.CupId
	}
	return 0
}

func (x *SetRatingDuelDefenseDeckRequest) GetDeck() *RatingDuelDefenseDeck {
	if x != nil {
		return x.Deck
	}
	return nil
}

type SetThreeOnThreeOnThreeDeckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CupId  uint32 `protobuf:"varint,1,opt,name=cup_id,json=cupId,proto3" json:"cup_id,omitempty"`
	DeckNo int32  `protobuf:"varint,2,opt,name=deck_no,json=deckNo,proto3" json:"deck_no,omitempty"`
	Deck   *Deck  `protobuf:"bytes,3,opt,name=deck,proto3" json:"deck,omitempty"`
}

func (x *SetThreeOnThreeOnThreeDeckRequest) Reset() {
	*x = SetThreeOnThreeOnThreeDeckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetThreeOnThreeOnThreeDeckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetThreeOnThreeOnThreeDeckRequest) ProtoMessage() {}

func (x *SetThreeOnThreeOnThreeDeckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetThreeOnThreeOnThreeDeckRequest.ProtoReflect.Descriptor instead.
func (*SetThreeOnThreeOnThreeDeckRequest) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{22}
}

func (x *SetThreeOnThreeOnThreeDeckRequest) GetCupId() uint32 {
	if x != nil {
		return x.CupId
	}
	return 0
}

func (x *SetThreeOnThreeOnThreeDeckRequest) GetDeckNo() int32 {
	if x != nil {
		return x.DeckNo
	}
	return 0
}

func (x *SetThreeOnThreeOnThreeDeckRequest) GetDeck() *Deck {
	if x != nil {
		return x.Deck
	}
	return nil
}

type SetMyArenaDeckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArenaId uint32 `protobuf:"varint,1,opt,name=arena_id,json=arenaId,proto3" json:"arena_id,omitempty"`
	Deck    *Deck  `protobuf:"bytes,2,opt,name=deck,proto3" json:"deck,omitempty"`
}

func (x *SetMyArenaDeckRequest) Reset() {
	*x = SetMyArenaDeckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMyArenaDeckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMyArenaDeckRequest) ProtoMessage() {}

func (x *SetMyArenaDeckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMyArenaDeckRequest.ProtoReflect.Descriptor instead.
func (*SetMyArenaDeckRequest) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{23}
}

func (x *SetMyArenaDeckRequest) GetArenaId() uint32 {
	if x != nil {
		return x.ArenaId
	}
	return 0
}

func (x *SetMyArenaDeckRequest) GetDeck() *Deck {
	if x != nil {
		return x.Deck
	}
	return nil
}

type SetMyTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckTemplateNo int32         `protobuf:"varint,1,opt,name=deck_template_no,json=deckTemplateNo,proto3" json:"deck_template_no,omitempty"`
	DeckTemplate   *DeckTemplate `protobuf:"bytes,2,opt,name=deck_template,json=deckTemplate,proto3" json:"deck_template,omitempty"`
}

func (x *SetMyTemplateRequest) Reset() {
	*x = SetMyTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMyTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMyTemplateRequest) ProtoMessage() {}

func (x *SetMyTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMyTemplateRequest.ProtoReflect.Descriptor instead.
func (*SetMyTemplateRequest) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{24}
}

func (x *SetMyTemplateRequest) GetDeckTemplateNo() int32 {
	if x != nil {
		return x.DeckTemplateNo
	}
	return 0
}

func (x *SetMyTemplateRequest) GetDeckTemplate() *DeckTemplate {
	if x != nil {
		return x.DeckTemplate
	}
	return nil
}

type StaminaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckNo   int32    `protobuf:"varint,1,opt,name=deck_no,json=deckNo,proto3" json:"deck_no,omitempty"`
	Stamina  int32    `protobuf:"varint,2,opt,name=stamina,proto3" json:"stamina,omitempty"`
	DeckType DeckType `protobuf:"varint,3,opt,name=deck_type,json=deckType,proto3,enum=deck.DeckType" json:"deck_type,omitempty"`
}

func (x *StaminaRequest) Reset() {
	*x = StaminaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaminaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaminaRequest) ProtoMessage() {}

func (x *StaminaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaminaRequest.ProtoReflect.Descriptor instead.
func (*StaminaRequest) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{25}
}

func (x *StaminaRequest) GetDeckNo() int32 {
	if x != nil {
		return x.DeckNo
	}
	return 0
}

func (x *StaminaRequest) GetStamina() int32 {
	if x != nil {
		return x.Stamina
	}
	return 0
}

func (x *StaminaRequest) GetDeckType() DeckType {
	if x != nil {
		return x.DeckType
	}
	return DeckType_QUEST
}

type Gum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gum int32 `protobuf:"varint,1,opt,name=gum,proto3" json:"gum,omitempty"`
}

func (x *Gum) Reset() {
	*x = Gum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gum) ProtoMessage() {}

func (x *Gum) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gum.ProtoReflect.Descriptor instead.
func (*Gum) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{26}
}

func (x *Gum) GetGum() int32 {
	if x != nil {
		return x.Gum
	}
	return 0
}

type DeckTemplateNo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckTemplateNo int32 `protobuf:"varint,1,opt,name=deck_template_no,json=deckTemplateNo,proto3" json:"deck_template_no,omitempty"`
}

func (x *DeckTemplateNo) Reset() {
	*x = DeckTemplateNo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeckTemplateNo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeckTemplateNo) ProtoMessage() {}

func (x *DeckTemplateNo) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeckTemplateNo.ProtoReflect.Descriptor instead.
func (*DeckTemplateNo) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{27}
}

func (x *DeckTemplateNo) GetDeckTemplateNo() int32 {
	if x != nil {
		return x.DeckTemplateNo
	}
	return 0
}

type TemplateNumbers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateNumbers []int32 `protobuf:"varint,1,rep,packed,name=template_numbers,json=templateNumbers,proto3" json:"template_numbers,omitempty"`
}

func (x *TemplateNumbers) Reset() {
	*x = TemplateNumbers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateNumbers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateNumbers) ProtoMessage() {}

func (x *TemplateNumbers) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateNumbers.ProtoReflect.Descriptor instead.
func (*TemplateNumbers) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{28}
}

func (x *TemplateNumbers) GetTemplateNumbers() []int32 {
	if x != nil {
		return x.TemplateNumbers
	}
	return nil
}

type DeckNumbers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckNumbers []int32 `protobuf:"varint,1,rep,packed,name=deck_numbers,json=deckNumbers,proto3" json:"deck_numbers,omitempty"`
	CupId       uint32  `protobuf:"varint,2,opt,name=cup_id,json=cupId,proto3" json:"cup_id,omitempty"`
}

func (x *DeckNumbers) Reset() {
	*x = DeckNumbers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeckNumbers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeckNumbers) ProtoMessage() {}

func (x *DeckNumbers) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeckNumbers.ProtoReflect.Descriptor instead.
func (*DeckNumbers) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{29}
}

func (x *DeckNumbers) GetDeckNumbers() []int32 {
	if x != nil {
		return x.DeckNumbers
	}
	return nil
}

func (x *DeckNumbers) GetCupId() uint32 {
	if x != nil {
		return x.CupId
	}
	return 0
}

type UidCup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	CupId uint32 `protobuf:"varint,2,opt,name=cup_id,json=cupId,proto3" json:"cup_id,omitempty"`
}

func (x *UidCup) Reset() {
	*x = UidCup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UidCup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UidCup) ProtoMessage() {}

func (x *UidCup) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UidCup.ProtoReflect.Descriptor instead.
func (*UidCup) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{30}
}

func (x *UidCup) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UidCup) GetCupId() uint32 {
	if x != nil {
		return x.CupId
	}
	return 0
}

type UidsCup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uids  []uint32 `protobuf:"varint,1,rep,packed,name=uids,proto3" json:"uids,omitempty"`
	CupId uint32   `protobuf:"varint,2,opt,name=cup_id,json=cupId,proto3" json:"cup_id,omitempty"`
}

func (x *UidsCup) Reset() {
	*x = UidsCup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UidsCup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UidsCup) ProtoMessage() {}

func (x *UidsCup) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UidsCup.ProtoReflect.Descriptor instead.
func (*UidsCup) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{31}
}

func (x *UidsCup) GetUids() []uint32 {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *UidsCup) GetCupId() uint32 {
	if x != nil {
		return x.CupId
	}
	return 0
}

type DeckNo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckNo uint32 `protobuf:"varint,1,opt,name=deck_no,json=deckNo,proto3" json:"deck_no,omitempty"`
}

func (x *DeckNo) Reset() {
	*x = DeckNo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeckNo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeckNo) ProtoMessage() {}

func (x *DeckNo) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeckNo.ProtoReflect.Descriptor instead.
func (*DeckNo) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{32}
}

func (x *DeckNo) GetDeckNo() uint32 {
	if x != nil {
		return x.DeckNo
	}
	return 0
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deck_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_deck_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_deck_proto_rawDescGZIP(), []int{33}
}

var File_deck_proto protoreflect.FileDescriptor

var file_deck_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x65,
	0x63, 0x6b, 0x22, 0x17, 0x0a, 0x03, 0x55, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x10,
	0x44, 0x65, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x79, 0x0a, 0x1d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64, 0x65, 0x63, 0x6b,
	0x2e, 0x44, 0x65, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x1a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x4d, 0x0a,
	0x1f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xee, 0x11, 0x0a,
	0x05, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x64, 0x65, 0x63, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63,
	0x6b, 0x52, 0x05, 0x64, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x75, 0x70, 0x5f,
	0x64, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x65, 0x63,
	0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x63, 0x75, 0x70, 0x44,
	0x65, 0x63, 0x6b, 0x12, 0x2b, 0x0a, 0x0b, 0x6b, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x65,
	0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e,
	0x44, 0x65, 0x63, 0x6b, 0x52, 0x0a, 0x6b, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x63, 0x6b,
	0x12, 0x2d, 0x0a, 0x0a, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x44, 0x65, 0x63, 0x6b, 0x12,
	0x2b, 0x0a, 0x09, 0x6e, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x08, 0x6e, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x36, 0x0a, 0x0f,
	0x61, 0x72, 0x65, 0x6e, 0x61, 0x5f, 0x6e, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63,
	0x6b, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x4e, 0x69, 0x6e, 0x65,
	0x44, 0x65, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x0b, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x5f, 0x64, 0x65,
	0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x63, 0x6b,
	0x2e, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x44, 0x65, 0x63, 0x6b,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x44, 0x65, 0x63,
	0x6b, 0x73, 0x12, 0x40, 0x0a, 0x16, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x75, 0x6d, 0x5f,
	0x6f, 0x66, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x14,
	0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x75, 0x6d, 0x4f, 0x66, 0x66, 0x65, 0x6e, 0x73, 0x65,
	0x44, 0x65, 0x63, 0x6b, 0x12, 0x44, 0x0a, 0x16, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x75,
	0x6d, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x75, 0x6d, 0x44,
	0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x0e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x78, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x0c,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x78, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x42, 0x0a, 0x17,
	0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x15, 0x63, 0x6f, 0x6c, 0x6f, 0x73,
	0x73, 0x65, 0x75, 0x6d, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x73,
	0x12, 0x25, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x07,
	0x77, 0x61, 0x72, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x36, 0x0a, 0x09, 0x67, 0x79, 0x6d, 0x5f, 0x64,
	0x65, 0x63, 0x6b, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x65, 0x63,
	0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x47, 0x79, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x67, 0x79, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x12,
	0x46, 0x0a, 0x0f, 0x63, 0x75, 0x70, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x64, 0x65, 0x63,
	0x6b, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e,
	0x44, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x43, 0x75, 0x70, 0x54, 0x68, 0x72, 0x65, 0x65, 0x44, 0x65,
	0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x75, 0x70, 0x54, 0x68, 0x72,
	0x65, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x75, 0x70, 0x5f, 0x6e,
	0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x43, 0x75, 0x70,
	0x4e, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x63, 0x75, 0x70, 0x4e, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x53, 0x6f,
	0x75, 0x6c, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x6f,
	0x75, 0x6c, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x4c, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x6c, 0x5f,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x2e,
	0x53, 0x6f, 0x75, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x44, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x55, 0x0a, 0x14, 0x63, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x73,
	0x2e, 0x43, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x44, 0x65,
	0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x63, 0x75, 0x70, 0x52, 0x65, 0x67,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x62, 0x0a, 0x19,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x75, 0x65, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x75, 0x65, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x65,
	0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x75, 0x65, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x73,
	0x12, 0x5f, 0x0a, 0x18, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x75, 0x65, 0x6c, 0x5f,
	0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x2e,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73,
	0x65, 0x44, 0x65, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x44, 0x75, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x63,
	0x6b, 0x12, 0x6a, 0x0a, 0x1d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x64, 0x65, 0x63,
	0x6b, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e,
	0x44, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x4f, 0x6e, 0x54, 0x68, 0x72,
	0x65, 0x65, 0x4f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x18, 0x74, 0x68, 0x72, 0x65, 0x65, 0x4f, 0x6e, 0x54, 0x68, 0x72, 0x65,
	0x65, 0x4f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x27, 0x0a,
	0x09, 0x72, 0x61, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x08, 0x72, 0x61,
	0x69, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x72, 0x61, 0x66, 0x74, 0x5f,
	0x64, 0x65, 0x63, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x65, 0x63,
	0x6b, 0x2e, 0x43, 0x72, 0x61, 0x66, 0x74, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x09, 0x63, 0x72, 0x61,
	0x66, 0x74, 0x44, 0x65, 0x63, 0x6b, 0x1a, 0x49, 0x0a, 0x0f, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x44,
	0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x65, 0x63,
	0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x4b, 0x0a, 0x0d, 0x47, 0x79, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c,
	0x0a, 0x12, 0x43, 0x75, 0x70, 0x54, 0x68, 0x72, 0x65, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63,
	0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x11,
	0x43, 0x75, 0x70, 0x4e, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x0e, 0x53, 0x6f, 0x75,
	0x6c, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64,
	0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x52, 0x0a, 0x14, 0x53, 0x6f, 0x75, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64,
	0x65, 0x63, 0x6b, 0x2e, 0x53, 0x6f, 0x75, 0x6c, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x17, 0x43, 0x75, 0x70, 0x52, 0x65,
	0x67, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59,
	0x0a, 0x1b, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x65, 0x6c, 0x4f, 0x66, 0x66, 0x65,
	0x6e, 0x73, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x65, 0x0a, 0x1a, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x75, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x65,
	0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73,
	0x65, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x5b, 0x0a, 0x1d, 0x54, 0x68, 0x72, 0x65, 0x65, 0x4f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x65,
	0x4f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x24, 0x0a,
	0x07, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x65, 0x72, 0x6f,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x65, 0x72, 0x6f,
	0x49, 0x64, 0x73, 0x22, 0x41, 0x0a, 0x09, 0x46, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x63, 0x6b, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04,
	0x75, 0x69, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x64, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x52,
	0x05, 0x64, 0x65, 0x63, 0x6b, 0x73, 0x22, 0x33, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63,
	0x6b, 0x52, 0x08, 0x64, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x74, 0x0a, 0x04, 0x44,
	0x65, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x06, 0x6a, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x6a,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6a, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x6a, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x40, 0x0a, 0x07, 0x43, 0x75, 0x70, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x04,
	0x64, 0x65, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x65, 0x63,
	0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x04, 0x64, 0x65, 0x63, 0x6b, 0x12, 0x15, 0x0a, 0x06,
	0x63, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x75,
	0x70, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x08, 0x53, 0x6f, 0x75, 0x6c, 0x44, 0x65, 0x63, 0x6b, 0x12,
	0x1e, 0x0a, 0x04, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x04, 0x64, 0x65, 0x63, 0x6b, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x6c, 0x49, 0x64, 0x22, 0x26, 0x0a, 0x09, 0x43, 0x72, 0x61, 0x66,
	0x74, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x73,
	0x22, 0x67, 0x0a, 0x15, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x65, 0x6c, 0x44, 0x65,
	0x66, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x65, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44,
	0x65, 0x63, 0x6b, 0x52, 0x04, 0x64, 0x65, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x44, 0x65,
	0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0e, 0x64,
	0x65, 0x63, 0x6b, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x6b, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x14, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x64, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x12, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x65, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0x7c, 0x0a, 0x0c,
	0x44, 0x65, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x05,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x65,
	0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x12, 0x19, 0x0a, 0x06, 0x6a, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x6a, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x6a, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06,
	0x6a, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x08, 0x44,
	0x65, 0x63, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x65, 0x72, 0x6f,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x68, 0x65, 0x72, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61,
	0x75, 0x72, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x41, 0x75, 0x72, 0x61, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x22, 0x59, 0x0a, 0x08, 0x4d, 0x69,
	0x6e, 0x69, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64,
	0x73, 0x12, 0x19, 0x0a, 0x06, 0x6a, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x6a, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x6a, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x6a,
	0x69, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x47, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x69, 0x44, 0x65, 0x63,
	0x6b, 0x57, 0x69, 0x74, 0x68, 0x55, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x65,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e,
	0x4d, 0x69, 0x6e, 0x69, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x04, 0x64, 0x65, 0x63, 0x6b, 0x22, 0x3f,
	0x0a, 0x10, 0x4d, 0x69, 0x6e, 0x69, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x57, 0x69, 0x74, 0x68, 0x55,
	0x69, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x64, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x44, 0x65, 0x63,
	0x6b, 0x57, 0x69, 0x74, 0x68, 0x55, 0x69, 0x64, 0x52, 0x05, 0x64, 0x65, 0x63, 0x6b, 0x73, 0x22,
	0x4b, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4d, 0x79, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x04,
	0x64, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x65, 0x63,
	0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x04, 0x64, 0x65, 0x63, 0x6b, 0x22, 0x63, 0x0a, 0x11,
	0x53, 0x65, 0x74, 0x47, 0x79, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x79, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x67, 0x79, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6b,
	0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x63, 0x6b, 0x4e,
	0x6f, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x04, 0x64, 0x65, 0x63,
	0x6b, 0x22, 0x66, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x6c, 0x44, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x6c, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x04, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x04, 0x64, 0x65, 0x63, 0x6b,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x64, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x22, 0x71, 0x0a, 0x1f, 0x53, 0x65, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x65, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x6e, 0x73,
	0x65, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x63, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x04,
	0x64, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x65, 0x63,
	0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x04, 0x64, 0x65, 0x63, 0x6b, 0x22, 0x69, 0x0a, 0x1f,
	0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x65, 0x6c, 0x44, 0x65, 0x66,
	0x65, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x63, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x44, 0x75, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x63,
	0x6b, 0x52, 0x04, 0x64, 0x65, 0x63, 0x6b, 0x22, 0x73, 0x0a, 0x21, 0x53, 0x65, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x65, 0x4f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x4f, 0x6e, 0x54, 0x68, 0x72, 0x65,
	0x65, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x63, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x04,
	0x64, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x65, 0x63,
	0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x04, 0x64, 0x65, 0x63, 0x6b, 0x22, 0x52, 0x0a, 0x15,
	0x53, 0x65, 0x74, 0x4d, 0x79, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x04, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x04, 0x64, 0x65, 0x63, 0x6b,
	0x22, 0x79, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x4d, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x63, 0x6b,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x64, 0x65, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x12, 0x37, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x63, 0x6b,
	0x2e, 0x44, 0x65, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x64,
	0x65, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x70, 0x0a, 0x0e, 0x53,
	0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x64, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61,
	0x12, 0x2b, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x17, 0x0a,
	0x03, 0x47, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x67, 0x75, 0x6d, 0x22, 0x3a, 0x0a, 0x0e, 0x44, 0x65, 0x63, 0x6b, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x63, 0x6b,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x64, 0x65, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x22, 0x3c, 0x0a, 0x0f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x22, 0x47, 0x0a, 0x0b, 0x44, 0x65, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x75, 0x70, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x06, 0x55, 0x69, 0x64,
	0x43, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x75, 0x70, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x07,
	0x55, 0x69, 0x64, 0x73, 0x43, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x63,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x75, 0x70,
	0x49, 0x64, 0x22, 0x21, 0x0a, 0x06, 0x44, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x64, 0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64,
	0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x2a, 0x4f,
	0x0a, 0x10, 0x44, 0x65, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x44, 0x55, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x43, 0x4b, 0x5f, 0x54, 0x45, 0x4d, 0x50,
	0x4c, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x44, 0x45, 0x43, 0x4b, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x02, 0x2a,
	0x28, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x55, 0x50, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x32, 0xb6, 0x10, 0x0a, 0x0b, 0x44, 0x65,
	0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x63, 0x6b, 0x12, 0x09, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x55, 0x69, 0x64, 0x1a,
	0x0e, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x44, 0x65, 0x63, 0x6b, 0x22,
	0x00, 0x12, 0x28, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x12,
	0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x64,
	0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x09, 0x53,
	0x65, 0x74, 0x4d, 0x79, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e,
	0x53, 0x65, 0x74, 0x4d, 0x79, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x36, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x6d, 0x69,
	0x6e, 0x61, 0x12, 0x14, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x70, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x0c, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x55, 0x69, 0x64,
	0x43, 0x75, 0x70, 0x1a, 0x0e, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x44,
	0x65, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x75, 0x70, 0x44,
	0x65, 0x63, 0x6b, 0x73, 0x12, 0x0d, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x55, 0x69, 0x64, 0x73,
	0x43, 0x75, 0x70, 0x1a, 0x16, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x44,
	0x65, 0x63, 0x6b, 0x73, 0x57, 0x69, 0x74, 0x68, 0x55, 0x69, 0x64, 0x22, 0x00, 0x12, 0x2c, 0x0a,
	0x0c, 0x53, 0x65, 0x74, 0x4d, 0x79, 0x43, 0x75, 0x70, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x0d, 0x2e,
	0x64, 0x65, 0x63, 0x6b, 0x2e, 0x43, 0x75, 0x70, 0x44, 0x65, 0x63, 0x6b, 0x1a, 0x0b, 0x2e, 0x64,
	0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x10, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x12,
	0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x64,
	0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0f, 0x53,
	0x65, 0x74, 0x4d, 0x79, 0x4b, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x0a,
	0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63,
	0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x0c, 0x53, 0x65, 0x74,
	0x4d, 0x79, 0x57, 0x61, 0x72, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x0a, 0x2e, 0x64, 0x65, 0x63, 0x6b,
	0x2e, 0x44, 0x65, 0x63, 0x6b, 0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x72, 0x46, 0x6c,
	0x61, 0x67, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x44, 0x65, 0x63, 0x6b, 0x73, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x4d, 0x79,
	0x4e, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x0d, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e,
	0x43, 0x75, 0x70, 0x44, 0x65, 0x63, 0x6b, 0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x4d, 0x79, 0x54,
	0x68, 0x72, 0x65, 0x65, 0x4f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x4f, 0x6e, 0x54, 0x68, 0x72,
	0x65, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x27, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x53,
	0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x65, 0x4f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x4f, 0x6e,
	0x54, 0x68, 0x72, 0x65, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x23, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x68, 0x72, 0x65, 0x65, 0x4f, 0x6e,
	0x54, 0x68, 0x72, 0x65, 0x65, 0x4f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x44, 0x65, 0x63, 0x6b,
	0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4d,
	0x79, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x44, 0x65, 0x63, 0x6b, 0x56, 0x32, 0x12, 0x1b, 0x2e, 0x64,
	0x65, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x79, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x44, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x4d,
	0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x75, 0x6d, 0x4f, 0x66, 0x66, 0x65, 0x6e, 0x73,
	0x65, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x0a, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63,
	0x6b, 0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x4d, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x65,
	0x75, 0x6d, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x56, 0x32, 0x12,
	0x16, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x79, 0x44, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4d, 0x79, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x78, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x0a, 0x2e, 0x64, 0x65,
	0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x47, 0x79, 0x6d,
	0x44, 0x65, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x47,
	0x79, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e,
	0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0b,
	0x53, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x6c, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x18, 0x2e, 0x64, 0x65,
	0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x6c, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x0d, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x6f, 0x75,
	0x6c, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x3c, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x6c, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x18, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x53, 0x65,
	0x74, 0x53, 0x6f, 0x75, 0x6c, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x32, 0x0a, 0x13, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x6f, 0x75, 0x6c, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x0c, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65,
	0x63, 0x6b, 0x4e, 0x6f, 0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x44, 0x65, 0x63, 0x6b,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65,
	0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x34, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x79, 0x44, 0x65, 0x63, 0x6b, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x48, 0x65, 0x72,
	0x6f, 0x49, 0x64, 0x73, 0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x79, 0x44,
	0x65, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x64, 0x65,
	0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x3e, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4d, 0x79, 0x44, 0x65, 0x63, 0x6b, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74,
	0x4d, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x19, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4d, 0x79, 0x44, 0x65, 0x63, 0x6b,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x15, 0x2e,
	0x64, 0x65, 0x63, 0x6b, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x79, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x0d, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x73, 0x1a,
	0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x40,
	0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x65, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x64, 0x65,
	0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x43, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x4d, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65,
	0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x64, 0x65, 0x63,
	0x6b, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x1e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4d,
	0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x0b,
	0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x44, 0x65, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x1b, 0x53, 0x65, 0x74, 0x4d, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x65, 0x6c,
	0x4f, 0x66, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x25, 0x2e, 0x64,
	0x65, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x65,
	0x6c, 0x4f, 0x66, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x52, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x4d, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x75, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x63, 0x6b,
	0x12, 0x25, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x75, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x4d, 0x79, 0x52,
	0x61, 0x69, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x0a, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44,
	0x65, 0x63, 0x6b, 0x1a, 0x0b, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x42, 0x1e, 0x5a, 0x1c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x68, 0x69, 0x6a, 0x6a, 0x69, 0x72, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x65,
	0x63, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_deck_proto_rawDescOnce sync.Once
	file_deck_proto_rawDescData = file_deck_proto_rawDesc
)

func file_deck_proto_rawDescGZIP() []byte {
	file_deck_proto_rawDescOnce.Do(func() {
		file_deck_proto_rawDescData = protoimpl.X.CompressGZIP(file_deck_proto_rawDescData)
	})
	return file_deck_proto_rawDescData
}

var file_deck_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_deck_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_deck_proto_goTypes = []interface{}{
	(DeckTemplateType)(0),                     // 0: deck.DeckTemplateType
	(DeckType)(0),                             // 1: deck.DeckType
	(*Uid)(nil),                               // 2: deck.Uid
	(*DeckTemplateInfo)(nil),                  // 3: deck.DeckTemplateInfo
	(*Decks)(nil),                             // 4: deck.Decks
	(*HeroIds)(nil),                           // 5: deck.HeroIds
	(*FlagDecks)(nil),                         // 6: deck.FlagDecks
	(*DeckList)(nil),                          // 7: deck.DeckList
	(*Deck)(nil),                              // 8: deck.Deck
	(*CupDeck)(nil),                           // 9: deck.CupDeck
	(*SoulDeck)(nil),                          // 10: deck.SoulDeck
	(*CraftDeck)(nil),                         // 11: deck.CraftDeck
	(*RatingDuelDefenseDeck)(nil),             // 12: deck.RatingDuelDefenseDeck
	(*DeckTemplates)(nil),                     // 13: deck.DeckTemplates
	(*DeckTemplate)(nil),                      // 14: deck.DeckTemplate
	(*DeckUnit)(nil),                          // 15: deck.DeckUnit
	(*MiniDeck)(nil),                          // 16: deck.MiniDeck
	(*MiniDeckWithUid)(nil),                   // 17: deck.MiniDeckWithUid
	(*MiniDecksWithUid)(nil),                  // 18: deck.MiniDecksWithUid
	(*SetMyDeckRequest)(nil),                  // 19: deck.SetMyDeckRequest
	(*SetGymDeckRequest)(nil),                 // 20: deck.SetGymDeckRequest
	(*SetSoulDeckRequest)(nil),                // 21: deck.SetSoulDeckRequest
	(*SetRatingDuelOffenseDeckRequest)(nil),   // 22: deck.SetRatingDuelOffenseDeckRequest
	(*SetRatingDuelDefenseDeckRequest)(nil),   // 23: deck.SetRatingDuelDefenseDeckRequest
	(*SetThreeOnThreeOnThreeDeckRequest)(nil), // 24: deck.SetThreeOnThreeOnThreeDeckRequest
	(*SetMyArenaDeckRequest)(nil),             // 25: deck.SetMyArenaDeckRequest
	(*SetMyTemplateRequest)(nil),              // 26: deck.SetMyTemplateRequest
	(*StaminaRequest)(nil),                    // 27: deck.StaminaRequest
	(*Gum)(nil),                               // 28: deck.Gum
	(*DeckTemplateNo)(nil),                    // 29: deck.DeckTemplateNo
	(*TemplateNumbers)(nil),                   // 30: deck.TemplateNumbers
	(*DeckNumbers)(nil),                       // 31: deck.DeckNumbers
	(*UidCup)(nil),                            // 32: deck.UidCup
	(*UidsCup)(nil),                           // 33: deck.UidsCup
	(*DeckNo)(nil),                            // 34: deck.DeckNo
	(*Empty)(nil),                             // 35: deck.Empty
	nil,                                       // 36: deck.DeckTemplateInfo.TemplateTypeExpansionCountEntry
	nil,                                       // 37: deck.Decks.ArenaDecksEntry
	nil,                                       // 38: deck.Decks.GymDecksEntry
	nil,                                       // 39: deck.Decks.CupThreeDecksEntry
	nil,                                       // 40: deck.Decks.CupNineDecksEntry
	nil,                                       // 41: deck.Decks.SoulDecksEntry
	nil,                                       // 42: deck.Decks.SoulBattleDecksEntry
	nil,                                       // 43: deck.Decks.CupRegimentalDecksEntry
	nil,                                       // 44: deck.Decks.RatingDuelOffenseDecksEntry
	nil,                                       // 45: deck.Decks.RatingDuelDefenseDeckEntry
	nil,                                       // 46: deck.Decks.ThreeOnThreeOnThreeDecksEntry
}
var file_deck_proto_depIdxs = []int32{
	36, // 0: deck.DeckTemplateInfo.template_type_expansion_count:type_name -> deck.DeckTemplateInfo.TemplateTypeExpansionCountEntry
	8,  // 1: deck.Decks.decks:type_name -> deck.Deck
	8,  // 2: deck.Decks.cup_deck:type_name -> deck.Deck
	8,  // 3: deck.Decks.knight_deck:type_name -> deck.Deck
	8,  // 4: deck.Decks.arena_deck:type_name -> deck.Deck
	8,  // 5: deck.Decks.nine_deck:type_name -> deck.Deck
	8,  // 6: deck.Decks.arena_nine_deck:type_name -> deck.Deck
	37, // 7: deck.Decks.arena_decks:type_name -> deck.Decks.ArenaDecksEntry
	8,  // 8: deck.Decks.colosseum_offense_deck:type_name -> deck.Deck
	8,  // 9: deck.Decks.colosseum_defense_deck:type_name -> deck.Deck
	8,  // 10: deck.Decks.quest_six_deck:type_name -> deck.Deck
	8,  // 11: deck.Decks.colosseum_defense_decks:type_name -> deck.Deck
	8,  // 12: deck.Decks.war_deck:type_name -> deck.Deck
	38, // 13: deck.Decks.gym_decks:type_name -> deck.Decks.GymDecksEntry
	39, // 14: deck.Decks.cup_three_decks:type_name -> deck.Decks.CupThreeDecksEntry
	40, // 15: deck.Decks.cup_nine_decks:type_name -> deck.Decks.CupNineDecksEntry
	41, // 16: deck.Decks.soul_decks:type_name -> deck.Decks.SoulDecksEntry
	42, // 17: deck.Decks.soul_battle_decks:type_name -> deck.Decks.SoulBattleDecksEntry
	43, // 18: deck.Decks.cup_regimental_decks:type_name -> deck.Decks.CupRegimentalDecksEntry
	44, // 19: deck.Decks.rating_duel_offense_decks:type_name -> deck.Decks.RatingDuelOffenseDecksEntry
	45, // 20: deck.Decks.rating_duel_defense_deck:type_name -> deck.Decks.RatingDuelDefenseDeckEntry
	46, // 21: deck.Decks.three_on_three_on_three_decks:type_name -> deck.Decks.ThreeOnThreeOnThreeDecksEntry
	8,  // 22: deck.Decks.raid_deck:type_name -> deck.Deck
	11, // 23: deck.Decks.craft_deck:type_name -> deck.CraftDeck
	8,  // 24: deck.FlagDecks.decks:type_name -> deck.Deck
	8,  // 25: deck.DeckList.deck_list:type_name -> deck.Deck
	15, // 26: deck.Deck.units:type_name -> deck.DeckUnit
	8,  // 27: deck.CupDeck.deck:type_name -> deck.Deck
	8,  // 28: deck.SoulDeck.deck:type_name -> deck.Deck
	8,  // 29: deck.RatingDuelDefenseDeck.deck:type_name -> deck.Deck
	14, // 30: deck.DeckTemplates.deck_templates:type_name -> deck.DeckTemplate
	14, // 31: deck.DeckTemplates.quest_deck_templates:type_name -> deck.DeckTemplate
	15, // 32: deck.DeckTemplate.units:type_name -> deck.DeckUnit
	16, // 33: deck.MiniDeckWithUid.deck:type_name -> deck.MiniDeck
	17, // 34: deck.MiniDecksWithUid.decks:type_name -> deck.MiniDeckWithUid
	8,  // 35: deck.SetMyDeckRequest.deck:type_name -> deck.Deck
	8,  // 36: deck.SetGymDeckRequest.deck:type_name -> deck.Deck
	8,  // 37: deck.SetSoulDeckRequest.deck:type_name -> deck.Deck
	8,  // 38: deck.SetRatingDuelOffenseDeckRequest.deck:type_name -> deck.Deck
	12, // 39: deck.SetRatingDuelDefenseDeckRequest.deck:type_name -> deck.RatingDuelDefenseDeck
	8,  // 40: deck.SetThreeOnThreeOnThreeDeckRequest.deck:type_name -> deck.Deck
	8,  // 41: deck.SetMyArenaDeckRequest.deck:type_name -> deck.Deck
	14, // 42: deck.SetMyTemplateRequest.deck_template:type_name -> deck.DeckTemplate
	1,  // 43: deck.StaminaRequest.deck_type:type_name -> deck.DeckType
	8,  // 44: deck.Decks.ArenaDecksEntry.value:type_name -> deck.Deck
	7,  // 45: deck.Decks.GymDecksEntry.value:type_name -> deck.DeckList
	8,  // 46: deck.Decks.CupThreeDecksEntry.value:type_name -> deck.Deck
	8,  // 47: deck.Decks.CupNineDecksEntry.value:type_name -> deck.Deck
	8,  // 48: deck.Decks.SoulDecksEntry.value:type_name -> deck.Deck
	10, // 49: deck.Decks.SoulBattleDecksEntry.value:type_name -> deck.SoulDeck
	7,  // 50: deck.Decks.CupRegimentalDecksEntry.value:type_name -> deck.DeckList
	7,  // 51: deck.Decks.RatingDuelOffenseDecksEntry.value:type_name -> deck.DeckList
	12, // 52: deck.Decks.RatingDuelDefenseDeckEntry.value:type_name -> deck.RatingDuelDefenseDeck
	7,  // 53: deck.Decks.ThreeOnThreeOnThreeDecksEntry.value:type_name -> deck.DeckList
	2,  // 54: deck.DeckService.GetDeck:input_type -> deck.Uid
	35, // 55: deck.DeckService.GetMyDecks:input_type -> deck.Empty
	19, // 56: deck.DeckService.SetMyDeck:input_type -> deck.SetMyDeckRequest
	27, // 57: deck.DeckService.RecoveryStamina:input_type -> deck.StaminaRequest
	32, // 58: deck.DeckService.GetCupDeck:input_type -> deck.UidCup
	33, // 59: deck.DeckService.GetCupDecks:input_type -> deck.UidsCup
	9,  // 60: deck.DeckService.SetMyCupDeck:input_type -> deck.CupDeck
	35, // 61: deck.DeckService.BreakupPrimeDeck:input_type -> deck.Empty
	8,  // 62: deck.DeckService.SetMyKnightDeck:input_type -> deck.Deck
	8,  // 63: deck.DeckService.SetMyWarDeck:input_type -> deck.Deck
	35, // 64: deck.DeckService.GetOurFlagDecks:input_type -> deck.Empty
	9,  // 65: deck.DeckService.SetMyNineDeck:input_type -> deck.CupDeck
	24, // 66: deck.DeckService.SetMyThreeOnThreeOnThreeDecks:input_type -> deck.SetThreeOnThreeOnThreeDeckRequest
	31, // 67: deck.DeckService.SwitchThreeOnThreeOnThreeDecksOrder:input_type -> deck.DeckNumbers
	25, // 68: deck.DeckService.SetMyArenaDeckV2:input_type -> deck.SetMyArenaDeckRequest
	8,  // 69: deck.DeckService.SetMyColosseumOffenseDeck:input_type -> deck.Deck
	19, // 70: deck.DeckService.SetMyColosseumDefenseDeckV2:input_type -> deck.SetMyDeckRequest
	8,  // 71: deck.DeckService.SetMyQuestSixDeck:input_type -> deck.Deck
	20, // 72: deck.DeckService.SetGymDeck:input_type -> deck.SetGymDeckRequest
	21, // 73: deck.DeckService.SetSoulDeck:input_type -> deck.SetSoulDeckRequest
	35, // 74: deck.DeckService.ClearSoulDeck:input_type -> deck.Empty
	21, // 75: deck.DeckService.SetSoulBattleDeck:input_type -> deck.SetSoulDeckRequest
	34, // 76: deck.DeckService.ClearSoulBattleDeck:input_type -> deck.DeckNo
	35, // 77: deck.DeckService.GetMyDeckTemplates:input_type -> deck.Empty
	5,  // 78: deck.DeckService.CreateMyDeckTemplate:input_type -> deck.HeroIds
	29, // 79: deck.DeckService.DeleteMyDeckTemplate:input_type -> deck.DeckTemplateNo
	26, // 80: deck.DeckService.SetMyDeckTemplate:input_type -> deck.SetMyTemplateRequest
	30, // 81: deck.DeckService.SwitchMyDeckTemplateOrder:input_type -> deck.TemplateNumbers
	5,  // 82: deck.DeckService.CreateMyQuestDeckTemplate:input_type -> deck.HeroIds
	29, // 83: deck.DeckService.DeleteMyQuestDeckTemplate:input_type -> deck.DeckTemplateNo
	26, // 84: deck.DeckService.SetMyQuestDeckTemplate:input_type -> deck.SetMyTemplateRequest
	30, // 85: deck.DeckService.SwitchMyQuestDeckTemplateOrder:input_type -> deck.TemplateNumbers
	35, // 86: deck.DeckService.GetMyDeckTemplateInfo:input_type -> deck.Empty
	22, // 87: deck.DeckService.SetMyRatingDuelOffenseDecks:input_type -> deck.SetRatingDuelOffenseDeckRequest
	23, // 88: deck.DeckService.SetMyRatingDuelDefenseDeck:input_type -> deck.SetRatingDuelDefenseDeckRequest
	8,  // 89: deck.DeckService.SetMyRaidDeck:input_type -> deck.Deck
	16, // 90: deck.DeckService.GetDeck:output_type -> deck.MiniDeck
	4,  // 91: deck.DeckService.GetMyDecks:output_type -> deck.Decks
	35, // 92: deck.DeckService.SetMyDeck:output_type -> deck.Empty
	35, // 93: deck.DeckService.RecoveryStamina:output_type -> deck.Empty
	16, // 94: deck.DeckService.GetCupDeck:output_type -> deck.MiniDeck
	18, // 95: deck.DeckService.GetCupDecks:output_type -> deck.MiniDecksWithUid
	35, // 96: deck.DeckService.SetMyCupDeck:output_type -> deck.Empty
	35, // 97: deck.DeckService.BreakupPrimeDeck:output_type -> deck.Empty
	35, // 98: deck.DeckService.SetMyKnightDeck:output_type -> deck.Empty
	35, // 99: deck.DeckService.SetMyWarDeck:output_type -> deck.Empty
	6,  // 100: deck.DeckService.GetOurFlagDecks:output_type -> deck.FlagDecks
	35, // 101: deck.DeckService.SetMyNineDeck:output_type -> deck.Empty
	35, // 102: deck.DeckService.SetMyThreeOnThreeOnThreeDecks:output_type -> deck.Empty
	35, // 103: deck.DeckService.SwitchThreeOnThreeOnThreeDecksOrder:output_type -> deck.Empty
	35, // 104: deck.DeckService.SetMyArenaDeckV2:output_type -> deck.Empty
	35, // 105: deck.DeckService.SetMyColosseumOffenseDeck:output_type -> deck.Empty
	35, // 106: deck.DeckService.SetMyColosseumDefenseDeckV2:output_type -> deck.Empty
	35, // 107: deck.DeckService.SetMyQuestSixDeck:output_type -> deck.Empty
	35, // 108: deck.DeckService.SetGymDeck:output_type -> deck.Empty
	35, // 109: deck.DeckService.SetSoulDeck:output_type -> deck.Empty
	35, // 110: deck.DeckService.ClearSoulDeck:output_type -> deck.Empty
	35, // 111: deck.DeckService.SetSoulBattleDeck:output_type -> deck.Empty
	35, // 112: deck.DeckService.ClearSoulBattleDeck:output_type -> deck.Empty
	13, // 113: deck.DeckService.GetMyDeckTemplates:output_type -> deck.DeckTemplates
	35, // 114: deck.DeckService.CreateMyDeckTemplate:output_type -> deck.Empty
	35, // 115: deck.DeckService.DeleteMyDeckTemplate:output_type -> deck.Empty
	35, // 116: deck.DeckService.SetMyDeckTemplate:output_type -> deck.Empty
	35, // 117: deck.DeckService.SwitchMyDeckTemplateOrder:output_type -> deck.Empty
	35, // 118: deck.DeckService.CreateMyQuestDeckTemplate:output_type -> deck.Empty
	35, // 119: deck.DeckService.DeleteMyQuestDeckTemplate:output_type -> deck.Empty
	35, // 120: deck.DeckService.SetMyQuestDeckTemplate:output_type -> deck.Empty
	35, // 121: deck.DeckService.SwitchMyQuestDeckTemplateOrder:output_type -> deck.Empty
	3,  // 122: deck.DeckService.GetMyDeckTemplateInfo:output_type -> deck.DeckTemplateInfo
	35, // 123: deck.DeckService.SetMyRatingDuelOffenseDecks:output_type -> deck.Empty
	35, // 124: deck.DeckService.SetMyRatingDuelDefenseDeck:output_type -> deck.Empty
	35, // 125: deck.DeckService.SetMyRaidDeck:output_type -> deck.Empty
	90, // [90:126] is the sub-list for method output_type
	54, // [54:90] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_deck_proto_init() }
func file_deck_proto_init() {
	if File_deck_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_deck_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeckTemplateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeroIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagDecks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeckList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CupDeck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoulDeck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CraftDeck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingDuelDefenseDeck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeckTemplates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeckTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeckUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniDeck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniDeckWithUid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniDecksWithUid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMyDeckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGymDeckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSoulDeckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRatingDuelOffenseDeckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRatingDuelDefenseDeckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetThreeOnThreeOnThreeDeckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMyArenaDeckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMyTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaminaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeckTemplateNo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateNumbers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeckNumbers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UidCup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UidsCup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeckNo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deck_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_deck_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_deck_proto_goTypes,
		DependencyIndexes: file_deck_proto_depIdxs,
		EnumInfos:         file_deck_proto_enumTypes,
		MessageInfos:      file_deck_proto_msgTypes,
	}.Build()
	File_deck_proto = out.File
	file_deck_proto_rawDesc = nil
	file_deck_proto_goTypes = nil
	file_deck_proto_depIdxs = nil
}
