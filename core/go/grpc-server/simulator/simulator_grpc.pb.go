// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: simulator.proto

package simulator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SimulatorService_SimulateBattle_FullMethodName = "/simulator.SimulatorService/SimulateBattle"
)

// SimulatorServiceClient is the client API for SimulatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimulatorServiceClient interface {
	SimulateBattle(ctx context.Context, in *SimulateRequest, opts ...grpc.CallOption) (*SimulateResponse, error)
}

type simulatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimulatorServiceClient(cc grpc.ClientConnInterface) SimulatorServiceClient {
	return &simulatorServiceClient{cc}
}

func (c *simulatorServiceClient) SimulateBattle(ctx context.Context, in *SimulateRequest, opts ...grpc.CallOption) (*SimulateResponse, error) {
	out := new(SimulateResponse)
	err := c.cc.Invoke(ctx, SimulatorService_SimulateBattle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimulatorServiceServer is the server API for SimulatorService service.
// All implementations must embed UnimplementedSimulatorServiceServer
// for forward compatibility
type SimulatorServiceServer interface {
	SimulateBattle(context.Context, *SimulateRequest) (*SimulateResponse, error)
	mustEmbedUnimplementedSimulatorServiceServer()
}

// UnimplementedSimulatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSimulatorServiceServer struct {
}

func (UnimplementedSimulatorServiceServer) SimulateBattle(context.Context, *SimulateRequest) (*SimulateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateBattle not implemented")
}
func (UnimplementedSimulatorServiceServer) mustEmbedUnimplementedSimulatorServiceServer() {}

// UnsafeSimulatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimulatorServiceServer will
// result in compilation errors.
type UnsafeSimulatorServiceServer interface {
	mustEmbedUnimplementedSimulatorServiceServer()
}

func RegisterSimulatorServiceServer(s grpc.ServiceRegistrar, srv SimulatorServiceServer) {
	s.RegisterService(&SimulatorService_ServiceDesc, srv)
}

func _SimulatorService_SimulateBattle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServiceServer).SimulateBattle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimulatorService_SimulateBattle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServiceServer).SimulateBattle(ctx, req.(*SimulateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SimulatorService_ServiceDesc is the grpc.ServiceDesc for SimulatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimulatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simulator.SimulatorService",
	HandlerType: (*SimulatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimulateBattle",
			Handler:    _SimulatorService_SimulateBattle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simulator.proto",
}
