// source: battle.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.battle.Aura', null, global);
goog.exportSymbol('proto.battle.Aura.Condition', null, global);
goog.exportSymbol('proto.battle.Aura.Effect', null, global);
goog.exportSymbol('proto.battle.Aura.Effect.Calc', null, global);
goog.exportSymbol('proto.battle.Aura.Effect.Param', null, global);
goog.exportSymbol('proto.battle.Aura.Effect.Target', null, global);
goog.exportSymbol('proto.battle.Aura.Type', null, global);
goog.exportSymbol('proto.battle.BaseUnit', null, global);
goog.exportSymbol('proto.battle.BaseUnit.AuraEffectRate', null, global);
goog.exportSymbol('proto.battle.BaseUnit.Result', null, global);
goog.exportSymbol('proto.battle.Battle', null, global);
goog.exportSymbol('proto.battle.Battle.Result', null, global);
goog.exportSymbol('proto.battle.Battle.State', null, global);
goog.exportSymbol('proto.battle.BattleAction', null, global);
goog.exportSymbol('proto.battle.BattleId', null, global);
goog.exportSymbol('proto.battle.BattleType', null, global);
goog.exportSymbol('proto.battle.CurrentUnit', null, global);
goog.exportSymbol('proto.battle.CurrentUnit.State', null, global);
goog.exportSymbol('proto.battle.EnchantInfo', null, global);
goog.exportSymbol('proto.battle.EnchantInfo.Enchant', null, global);
goog.exportSymbol('proto.battle.Skill', null, global);
goog.exportSymbol('proto.battle.Skill.Condition', null, global);
goog.exportSymbol('proto.battle.Skill.Effect', null, global);
goog.exportSymbol('proto.battle.Skill.Effect.AdditionalCalc', null, global);
goog.exportSymbol('proto.battle.Skill.Effect.Calc', null, global);
goog.exportSymbol('proto.battle.Skill.Effect.Param', null, global);
goog.exportSymbol('proto.battle.Skill.Effect.Target', null, global);
goog.exportSymbol('proto.battle.Unit', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.BattleId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.BattleId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.BattleId.displayName = 'proto.battle.BattleId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.Battle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.battle.Battle.repeatedFields_, null);
};
goog.inherits(proto.battle.Battle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.Battle.displayName = 'proto.battle.Battle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.BattleAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.battle.BattleAction.repeatedFields_, null);
};
goog.inherits(proto.battle.BattleAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.BattleAction.displayName = 'proto.battle.BattleAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.Unit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.Unit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.Unit.displayName = 'proto.battle.Unit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.BaseUnit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.battle.BaseUnit.repeatedFields_, null);
};
goog.inherits(proto.battle.BaseUnit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.BaseUnit.displayName = 'proto.battle.BaseUnit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.BaseUnit.AuraEffectRate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.BaseUnit.AuraEffectRate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.BaseUnit.AuraEffectRate.displayName = 'proto.battle.BaseUnit.AuraEffectRate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.CurrentUnit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.battle.CurrentUnit.repeatedFields_, null);
};
goog.inherits(proto.battle.CurrentUnit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.CurrentUnit.displayName = 'proto.battle.CurrentUnit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.EnchantInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.EnchantInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.EnchantInfo.displayName = 'proto.battle.EnchantInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.Skill = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.battle.Skill.repeatedFields_, null);
};
goog.inherits(proto.battle.Skill, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.Skill.displayName = 'proto.battle.Skill';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.Skill.Effect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.Skill.Effect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.Skill.Effect.displayName = 'proto.battle.Skill.Effect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.Aura = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.battle.Aura.repeatedFields_, null);
};
goog.inherits(proto.battle.Aura, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.Aura.displayName = 'proto.battle.Aura';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.Aura.Effect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.Aura.Effect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.Aura.Effect.displayName = 'proto.battle.Aura.Effect';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.BattleId.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.BattleId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.BattleId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.BattleId.toObject = function(includeInstance, msg) {
  var f, obj = {
    battleId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.BattleId}
 */
proto.battle.BattleId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.BattleId;
  return proto.battle.BattleId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.BattleId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.BattleId}
 */
proto.battle.BattleId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBattleId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.BattleId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.BattleId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.BattleId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.BattleId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBattleId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 battle_id = 1;
 * @return {number}
 */
proto.battle.BattleId.prototype.getBattleId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BattleId} returns this
 */
proto.battle.BattleId.prototype.setBattleId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.battle.Battle.repeatedFields_ = [2,8,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.Battle.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.Battle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.Battle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.Battle.toObject = function(includeInstance, msg) {
  var f, obj = {
    unitsList: jspb.Message.toObjectList(msg.getUnitsList(),
    proto.battle.Unit.toObject, includeInstance),
    actionCounts: jspb.Message.getFieldWithDefault(msg, 3, 0),
    result: jspb.Message.getFieldWithDefault(msg, 4, 0),
    state: jspb.Message.getFieldWithDefault(msg, 5, 0),
    randomSeed: jspb.Message.getFieldWithDefault(msg, 6, 0),
    randomCounts: jspb.Message.getFieldWithDefault(msg, 7, 0),
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.battle.BattleAction.toObject, includeInstance),
    lastActivePosition: jspb.Message.getFieldWithDefault(msg, 9, 0),
    uidsList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    attackerTakenDamage: jspb.Message.getFieldWithDefault(msg, 12, 0),
    defenderTakenDamage: jspb.Message.getFieldWithDefault(msg, 13, 0),
    battleType: jspb.Message.getFieldWithDefault(msg, 14, 0),
    actionLimit: jspb.Message.getFieldWithDefault(msg, 15, 0),
    attackerChangeCounts: jspb.Message.getFieldWithDefault(msg, 17, 0),
    defenderChangeCounts: jspb.Message.getFieldWithDefault(msg, 18, 0),
    lastChangeActionCounts: jspb.Message.getFieldWithDefault(msg, 19, 0),
    activeActionCounts: jspb.Message.getFieldWithDefault(msg, 23, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.Battle}
 */
proto.battle.Battle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.Battle;
  return proto.battle.Battle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.Battle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.Battle}
 */
proto.battle.Battle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.battle.Unit;
      reader.readMessage(value,proto.battle.Unit.deserializeBinaryFromReader);
      msg.addUnits(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActionCounts(value);
      break;
    case 4:
      var value = /** @type {!proto.battle.Battle.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 5:
      var value = /** @type {!proto.battle.Battle.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRandomSeed(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRandomCounts(value);
      break;
    case 8:
      var value = new proto.battle.BattleAction;
      reader.readMessage(value,proto.battle.BattleAction.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLastActivePosition(value);
      break;
    case 10:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setUidsList(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttackerTakenDamage(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDefenderTakenDamage(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBattleType(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActionLimit(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttackerChangeCounts(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDefenderChangeCounts(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLastChangeActionCounts(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActiveActionCounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.Battle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.Battle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.Battle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.Battle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.battle.Unit.serializeBinaryToWriter
    );
  }
  f = message.getActionCounts();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getRandomSeed();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getRandomCounts();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.battle.BattleAction.serializeBinaryToWriter
    );
  }
  f = message.getLastActivePosition();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getUidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      10,
      f
    );
  }
  f = message.getAttackerTakenDamage();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getDefenderTakenDamage();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getBattleType();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = message.getActionLimit();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getAttackerChangeCounts();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getDefenderChangeCounts();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getLastChangeActionCounts();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getActiveActionCounts();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.battle.Battle.Result = {
  PROGRESS: 0,
  WIN: 1,
  LOSE: 2,
  TIME_UP: 3,
  DRAW: 4
};

/**
 * @enum {number}
 */
proto.battle.Battle.State = {
  ACTIVE: 0,
  FIRST_PASSIVE: 1,
  SECOND_PASSIVE: 2,
  OPENING: 3
};

/**
 * repeated Unit units = 2;
 * @return {!Array<!proto.battle.Unit>}
 */
proto.battle.Battle.prototype.getUnitsList = function() {
  return /** @type{!Array<!proto.battle.Unit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.battle.Unit, 2));
};


/**
 * @param {!Array<!proto.battle.Unit>} value
 * @return {!proto.battle.Battle} returns this
*/
proto.battle.Battle.prototype.setUnitsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.battle.Unit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.battle.Unit}
 */
proto.battle.Battle.prototype.addUnits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.battle.Unit, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.battle.Battle} returns this
 */
proto.battle.Battle.prototype.clearUnitsList = function() {
  return this.setUnitsList([]);
};


/**
 * optional int32 action_counts = 3;
 * @return {number}
 */
proto.battle.Battle.prototype.getActionCounts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Battle} returns this
 */
proto.battle.Battle.prototype.setActionCounts = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Result result = 4;
 * @return {!proto.battle.Battle.Result}
 */
proto.battle.Battle.prototype.getResult = function() {
  return /** @type {!proto.battle.Battle.Result} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.battle.Battle.Result} value
 * @return {!proto.battle.Battle} returns this
 */
proto.battle.Battle.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional State state = 5;
 * @return {!proto.battle.Battle.State}
 */
proto.battle.Battle.prototype.getState = function() {
  return /** @type {!proto.battle.Battle.State} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.battle.Battle.State} value
 * @return {!proto.battle.Battle} returns this
 */
proto.battle.Battle.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional int64 random_seed = 6;
 * @return {number}
 */
proto.battle.Battle.prototype.getRandomSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Battle} returns this
 */
proto.battle.Battle.prototype.setRandomSeed = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 random_counts = 7;
 * @return {number}
 */
proto.battle.Battle.prototype.getRandomCounts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Battle} returns this
 */
proto.battle.Battle.prototype.setRandomCounts = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated BattleAction actions = 8;
 * @return {!Array<!proto.battle.BattleAction>}
 */
proto.battle.Battle.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.battle.BattleAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.battle.BattleAction, 8));
};


/**
 * @param {!Array<!proto.battle.BattleAction>} value
 * @return {!proto.battle.Battle} returns this
*/
proto.battle.Battle.prototype.setActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.battle.BattleAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.battle.BattleAction}
 */
proto.battle.Battle.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.battle.BattleAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.battle.Battle} returns this
 */
proto.battle.Battle.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};


/**
 * optional int32 last_active_position = 9;
 * @return {number}
 */
proto.battle.Battle.prototype.getLastActivePosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Battle} returns this
 */
proto.battle.Battle.prototype.setLastActivePosition = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * repeated uint32 uids = 10;
 * @return {!Array<number>}
 */
proto.battle.Battle.prototype.getUidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.battle.Battle} returns this
 */
proto.battle.Battle.prototype.setUidsList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.battle.Battle} returns this
 */
proto.battle.Battle.prototype.addUids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.battle.Battle} returns this
 */
proto.battle.Battle.prototype.clearUidsList = function() {
  return this.setUidsList([]);
};


/**
 * optional int32 attacker_taken_damage = 12;
 * @return {number}
 */
proto.battle.Battle.prototype.getAttackerTakenDamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Battle} returns this
 */
proto.battle.Battle.prototype.setAttackerTakenDamage = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 defender_taken_damage = 13;
 * @return {number}
 */
proto.battle.Battle.prototype.getDefenderTakenDamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Battle} returns this
 */
proto.battle.Battle.prototype.setDefenderTakenDamage = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional uint32 battle_type = 14;
 * @return {number}
 */
proto.battle.Battle.prototype.getBattleType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Battle} returns this
 */
proto.battle.Battle.prototype.setBattleType = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 action_limit = 15;
 * @return {number}
 */
proto.battle.Battle.prototype.getActionLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Battle} returns this
 */
proto.battle.Battle.prototype.setActionLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 attacker_change_counts = 17;
 * @return {number}
 */
proto.battle.Battle.prototype.getAttackerChangeCounts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Battle} returns this
 */
proto.battle.Battle.prototype.setAttackerChangeCounts = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int32 defender_change_counts = 18;
 * @return {number}
 */
proto.battle.Battle.prototype.getDefenderChangeCounts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Battle} returns this
 */
proto.battle.Battle.prototype.setDefenderChangeCounts = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 last_change_action_counts = 19;
 * @return {number}
 */
proto.battle.Battle.prototype.getLastChangeActionCounts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Battle} returns this
 */
proto.battle.Battle.prototype.setLastChangeActionCounts = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int32 active_action_counts = 23;
 * @return {number}
 */
proto.battle.Battle.prototype.getActiveActionCounts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Battle} returns this
 */
proto.battle.Battle.prototype.setActiveActionCounts = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.battle.BattleAction.repeatedFields_ = [2,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.BattleAction.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.BattleAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.BattleAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.BattleAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0),
    unitsList: jspb.Message.toObjectList(msg.getUnitsList(),
    proto.battle.CurrentUnit.toObject, includeInstance),
    skill: jspb.Message.getFieldWithDefault(msg, 3, 0),
    actionPosition: jspb.Message.getFieldWithDefault(msg, 4, 0),
    effectPositionsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    poison: jspb.Message.getFieldWithDefault(msg, 6, 0),
    bleed: jspb.Message.getFieldWithDefault(msg, 7, 0),
    activeActionCount: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.BattleAction}
 */
proto.battle.BattleAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.BattleAction;
  return proto.battle.BattleAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.BattleAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.BattleAction}
 */
proto.battle.BattleAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 2:
      var value = new proto.battle.CurrentUnit;
      reader.readMessage(value,proto.battle.CurrentUnit.deserializeBinaryFromReader);
      msg.addUnits(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSkill(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActionPosition(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setEffectPositionsList(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPoison(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBleed(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActiveActionCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.BattleAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.BattleAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.BattleAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.BattleAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUnitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.battle.CurrentUnit.serializeBinaryToWriter
    );
  }
  f = message.getSkill();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getActionPosition();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getEffectPositionsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      5,
      f
    );
  }
  f = message.getPoison();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getBleed();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getActiveActionCount();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
};


/**
 * optional int32 count = 1;
 * @return {number}
 */
proto.battle.BattleAction.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BattleAction} returns this
 */
proto.battle.BattleAction.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated CurrentUnit units = 2;
 * @return {!Array<!proto.battle.CurrentUnit>}
 */
proto.battle.BattleAction.prototype.getUnitsList = function() {
  return /** @type{!Array<!proto.battle.CurrentUnit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.battle.CurrentUnit, 2));
};


/**
 * @param {!Array<!proto.battle.CurrentUnit>} value
 * @return {!proto.battle.BattleAction} returns this
*/
proto.battle.BattleAction.prototype.setUnitsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.battle.CurrentUnit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.battle.CurrentUnit}
 */
proto.battle.BattleAction.prototype.addUnits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.battle.CurrentUnit, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.battle.BattleAction} returns this
 */
proto.battle.BattleAction.prototype.clearUnitsList = function() {
  return this.setUnitsList([]);
};


/**
 * optional uint32 skill = 3;
 * @return {number}
 */
proto.battle.BattleAction.prototype.getSkill = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BattleAction} returns this
 */
proto.battle.BattleAction.prototype.setSkill = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 action_position = 4;
 * @return {number}
 */
proto.battle.BattleAction.prototype.getActionPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BattleAction} returns this
 */
proto.battle.BattleAction.prototype.setActionPosition = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated int32 effect_positions = 5;
 * @return {!Array<number>}
 */
proto.battle.BattleAction.prototype.getEffectPositionsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.battle.BattleAction} returns this
 */
proto.battle.BattleAction.prototype.setEffectPositionsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.battle.BattleAction} returns this
 */
proto.battle.BattleAction.prototype.addEffectPositions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.battle.BattleAction} returns this
 */
proto.battle.BattleAction.prototype.clearEffectPositionsList = function() {
  return this.setEffectPositionsList([]);
};


/**
 * optional int32 poison = 6;
 * @return {number}
 */
proto.battle.BattleAction.prototype.getPoison = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BattleAction} returns this
 */
proto.battle.BattleAction.prototype.setPoison = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 bleed = 7;
 * @return {number}
 */
proto.battle.BattleAction.prototype.getBleed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BattleAction} returns this
 */
proto.battle.BattleAction.prototype.setBleed = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 active_action_count = 12;
 * @return {number}
 */
proto.battle.BattleAction.prototype.getActiveActionCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BattleAction} returns this
 */
proto.battle.BattleAction.prototype.setActiveActionCount = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.Unit.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.Unit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.Unit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.Unit.toObject = function(includeInstance, msg) {
  var f, obj = {
    base: (f = msg.getBase()) && proto.battle.BaseUnit.toObject(includeInstance, f),
    current: (f = msg.getCurrent()) && proto.battle.CurrentUnit.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.Unit}
 */
proto.battle.Unit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.Unit;
  return proto.battle.Unit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.Unit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.Unit}
 */
proto.battle.Unit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.battle.BaseUnit;
      reader.readMessage(value,proto.battle.BaseUnit.deserializeBinaryFromReader);
      msg.setBase(value);
      break;
    case 2:
      var value = new proto.battle.CurrentUnit;
      reader.readMessage(value,proto.battle.CurrentUnit.deserializeBinaryFromReader);
      msg.setCurrent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.Unit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.Unit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.Unit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.Unit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBase();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.battle.BaseUnit.serializeBinaryToWriter
    );
  }
  f = message.getCurrent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.battle.CurrentUnit.serializeBinaryToWriter
    );
  }
};


/**
 * optional BaseUnit base = 1;
 * @return {?proto.battle.BaseUnit}
 */
proto.battle.Unit.prototype.getBase = function() {
  return /** @type{?proto.battle.BaseUnit} */ (
    jspb.Message.getWrapperField(this, proto.battle.BaseUnit, 1));
};


/**
 * @param {?proto.battle.BaseUnit|undefined} value
 * @return {!proto.battle.Unit} returns this
*/
proto.battle.Unit.prototype.setBase = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.Unit} returns this
 */
proto.battle.Unit.prototype.clearBase = function() {
  return this.setBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.Unit.prototype.hasBase = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CurrentUnit current = 2;
 * @return {?proto.battle.CurrentUnit}
 */
proto.battle.Unit.prototype.getCurrent = function() {
  return /** @type{?proto.battle.CurrentUnit} */ (
    jspb.Message.getWrapperField(this, proto.battle.CurrentUnit, 2));
};


/**
 * @param {?proto.battle.CurrentUnit|undefined} value
 * @return {!proto.battle.Unit} returns this
*/
proto.battle.Unit.prototype.setCurrent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.Unit} returns this
 */
proto.battle.Unit.prototype.clearCurrent = function() {
  return this.setCurrent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.Unit.prototype.hasCurrent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.battle.BaseUnit.repeatedFields_ = [7,15,17,21];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.BaseUnit.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.BaseUnit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.BaseUnit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.BaseUnit.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    position: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    phy: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pb_int: jspb.Message.getFieldWithDefault(msg, 5, 0),
    agi: jspb.Message.getFieldWithDefault(msg, 6, 0),
    activesList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    passive: jspb.Message.getFieldWithDefault(msg, 8, 0),
    character: jspb.Message.getFieldWithDefault(msg, 9, 0),
    extension1: jspb.Message.getFieldWithDefault(msg, 10, 0),
    extension2: jspb.Message.getFieldWithDefault(msg, 11, 0),
    ipfs: jspb.Message.getFieldWithDefault(msg, 12, ""),
    isEnemy: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    resultRate1000Map: (f = msg.getResultRate1000Map()) ? f.toObject(includeInstance, undefined) : [],
    attributeTypesList: (f = jspb.Message.getRepeatedField(msg, 15)) == null ? undefined : f,
    heroType: jspb.Message.getFieldWithDefault(msg, 16, 0),
    aurasList: jspb.Message.toObjectList(msg.getAurasList(),
    proto.battle.BaseUnit.AuraEffectRate.toObject, includeInstance),
    criticalPhyRate: jspb.Message.getFieldWithDefault(msg, 18, 0),
    criticalIntRate: jspb.Message.getFieldWithDefault(msg, 19, 0),
    increaseDamageCut: jspb.Message.getFieldWithDefault(msg, 20, 0),
    enchantInfosList: jspb.Message.toObjectList(msg.getEnchantInfosList(),
    proto.battle.EnchantInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.BaseUnit}
 */
proto.battle.BaseUnit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.BaseUnit;
  return proto.battle.BaseUnit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.BaseUnit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.BaseUnit}
 */
proto.battle.BaseUnit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosition(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPhy(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInt(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAgi(value);
      break;
    case 7:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setActivesList(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPassive(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCharacter(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExtension1(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExtension2(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpfs(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsEnemy(value);
      break;
    case 14:
      var value = msg.getResultRate1000Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt32, null, 0, 0);
         });
      break;
    case 15:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setAttributeTypesList(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeroType(value);
      break;
    case 17:
      var value = new proto.battle.BaseUnit.AuraEffectRate;
      reader.readMessage(value,proto.battle.BaseUnit.AuraEffectRate.deserializeBinaryFromReader);
      msg.addAuras(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCriticalPhyRate(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCriticalIntRate(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIncreaseDamageCut(value);
      break;
    case 21:
      var value = new proto.battle.EnchantInfo;
      reader.readMessage(value,proto.battle.EnchantInfo.deserializeBinaryFromReader);
      msg.addEnchantInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.BaseUnit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.BaseUnit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.BaseUnit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.BaseUnit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getHp();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getPhy();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getInt();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getAgi();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getActivesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      7,
      f
    );
  }
  f = message.getPassive();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getCharacter();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getExtension1();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getExtension2();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getIpfs();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getIsEnemy();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getResultRate1000Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(14, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getAttributeTypesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      15,
      f
    );
  }
  f = message.getHeroType();
  if (f !== 0) {
    writer.writeUint32(
      16,
      f
    );
  }
  f = message.getAurasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.battle.BaseUnit.AuraEffectRate.serializeBinaryToWriter
    );
  }
  f = message.getCriticalPhyRate();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getCriticalIntRate();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getIncreaseDamageCut();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getEnchantInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      21,
      f,
      proto.battle.EnchantInfo.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.battle.BaseUnit.Result = {
  NONE: 0,
  POISON: 1,
  SLEEP: 2,
  CONFUSION: 3,
  RECOVERY: 4,
  MY_DAMAGE: 5,
  YOUR_PHY_DAMAGE: 7,
  YOUR_INT_DAMAGE: 8,
  FEAR: 9,
  BARRIER: 10,
  BLEED: 11,
  STUN: 12,
  DAMAGE_CUT: 13,
  AGI_CHARGE: 14,
  PROSTRATION: 15,
  DECOY: 16,
  CURSE: 17,
  CHARM: 18,
  AURA_ADD_PHY_DAMAGE: 19,
  AURA_ADD_INT_DAMAGE: 20,
  AURA_RECEIVE_PHY_DAMAGE: 21,
  AURA_RECEIVE_INT_DAMAGE: 22
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.BaseUnit.AuraEffectRate.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.BaseUnit.AuraEffectRate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.BaseUnit.AuraEffectRate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.BaseUnit.AuraEffectRate.toObject = function(includeInstance, msg) {
  var f, obj = {
    auraType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    effectValue: jspb.Message.getFieldWithDefault(msg, 2, 0),
    secondaryValue: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.BaseUnit.AuraEffectRate}
 */
proto.battle.BaseUnit.AuraEffectRate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.BaseUnit.AuraEffectRate;
  return proto.battle.BaseUnit.AuraEffectRate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.BaseUnit.AuraEffectRate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.BaseUnit.AuraEffectRate}
 */
proto.battle.BaseUnit.AuraEffectRate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAuraType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEffectValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSecondaryValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.BaseUnit.AuraEffectRate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.BaseUnit.AuraEffectRate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.BaseUnit.AuraEffectRate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.BaseUnit.AuraEffectRate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuraType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEffectValue();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSecondaryValue();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional uint32 aura_type = 1;
 * @return {number}
 */
proto.battle.BaseUnit.AuraEffectRate.prototype.getAuraType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BaseUnit.AuraEffectRate} returns this
 */
proto.battle.BaseUnit.AuraEffectRate.prototype.setAuraType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 effect_value = 2;
 * @return {number}
 */
proto.battle.BaseUnit.AuraEffectRate.prototype.getEffectValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BaseUnit.AuraEffectRate} returns this
 */
proto.battle.BaseUnit.AuraEffectRate.prototype.setEffectValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 secondary_value = 3;
 * @return {number}
 */
proto.battle.BaseUnit.AuraEffectRate.prototype.getSecondaryValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BaseUnit.AuraEffectRate} returns this
 */
proto.battle.BaseUnit.AuraEffectRate.prototype.setSecondaryValue = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 index = 1;
 * @return {number}
 */
proto.battle.BaseUnit.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 position = 2;
 * @return {number}
 */
proto.battle.BaseUnit.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.setPosition = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 hp = 3;
 * @return {number}
 */
proto.battle.BaseUnit.prototype.getHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.setHp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 phy = 4;
 * @return {number}
 */
proto.battle.BaseUnit.prototype.getPhy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.setPhy = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 int = 5;
 * @return {number}
 */
proto.battle.BaseUnit.prototype.getInt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.setInt = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 agi = 6;
 * @return {number}
 */
proto.battle.BaseUnit.prototype.getAgi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.setAgi = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated uint32 actives = 7;
 * @return {!Array<number>}
 */
proto.battle.BaseUnit.prototype.getActivesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.setActivesList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.addActives = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.clearActivesList = function() {
  return this.setActivesList([]);
};


/**
 * optional uint32 passive = 8;
 * @return {number}
 */
proto.battle.BaseUnit.prototype.getPassive = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.setPassive = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 character = 9;
 * @return {number}
 */
proto.battle.BaseUnit.prototype.getCharacter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.setCharacter = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 extension1 = 10;
 * @return {number}
 */
proto.battle.BaseUnit.prototype.getExtension1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.setExtension1 = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint32 extension2 = 11;
 * @return {number}
 */
proto.battle.BaseUnit.prototype.getExtension2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.setExtension2 = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string ipfs = 12;
 * @return {string}
 */
proto.battle.BaseUnit.prototype.getIpfs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.setIpfs = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional bool is_enemy = 13;
 * @return {boolean}
 */
proto.battle.BaseUnit.prototype.getIsEnemy = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.setIsEnemy = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * map<int32, int32> result_rate1000 = 14;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.battle.BaseUnit.prototype.getResultRate1000Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 14, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.clearResultRate1000Map = function() {
  this.getResultRate1000Map().clear();
  return this;};


/**
 * repeated uint32 attribute_types = 15;
 * @return {!Array<number>}
 */
proto.battle.BaseUnit.prototype.getAttributeTypesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 15));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.setAttributeTypesList = function(value) {
  return jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.addAttributeTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.clearAttributeTypesList = function() {
  return this.setAttributeTypesList([]);
};


/**
 * optional uint32 hero_type = 16;
 * @return {number}
 */
proto.battle.BaseUnit.prototype.getHeroType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.setHeroType = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * repeated AuraEffectRate auras = 17;
 * @return {!Array<!proto.battle.BaseUnit.AuraEffectRate>}
 */
proto.battle.BaseUnit.prototype.getAurasList = function() {
  return /** @type{!Array<!proto.battle.BaseUnit.AuraEffectRate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.battle.BaseUnit.AuraEffectRate, 17));
};


/**
 * @param {!Array<!proto.battle.BaseUnit.AuraEffectRate>} value
 * @return {!proto.battle.BaseUnit} returns this
*/
proto.battle.BaseUnit.prototype.setAurasList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.battle.BaseUnit.AuraEffectRate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.battle.BaseUnit.AuraEffectRate}
 */
proto.battle.BaseUnit.prototype.addAuras = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.battle.BaseUnit.AuraEffectRate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.clearAurasList = function() {
  return this.setAurasList([]);
};


/**
 * optional int32 critical_phy_rate = 18;
 * @return {number}
 */
proto.battle.BaseUnit.prototype.getCriticalPhyRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.setCriticalPhyRate = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 critical_int_rate = 19;
 * @return {number}
 */
proto.battle.BaseUnit.prototype.getCriticalIntRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.setCriticalIntRate = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int32 increase_damage_cut = 20;
 * @return {number}
 */
proto.battle.BaseUnit.prototype.getIncreaseDamageCut = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.setIncreaseDamageCut = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * repeated EnchantInfo enchant_infos = 21;
 * @return {!Array<!proto.battle.EnchantInfo>}
 */
proto.battle.BaseUnit.prototype.getEnchantInfosList = function() {
  return /** @type{!Array<!proto.battle.EnchantInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.battle.EnchantInfo, 21));
};


/**
 * @param {!Array<!proto.battle.EnchantInfo>} value
 * @return {!proto.battle.BaseUnit} returns this
*/
proto.battle.BaseUnit.prototype.setEnchantInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 21, value);
};


/**
 * @param {!proto.battle.EnchantInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.battle.EnchantInfo}
 */
proto.battle.BaseUnit.prototype.addEnchantInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 21, opt_value, proto.battle.EnchantInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.battle.BaseUnit} returns this
 */
proto.battle.BaseUnit.prototype.clearEnchantInfosList = function() {
  return this.setEnchantInfosList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.battle.CurrentUnit.repeatedFields_ = [30,32,36];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.CurrentUnit.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.CurrentUnit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.CurrentUnit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.CurrentUnit.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    position: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    phy: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pb_int: jspb.Message.getFieldWithDefault(msg, 5, 0),
    agi: jspb.Message.getFieldWithDefault(msg, 6, 0),
    charge: jspb.Message.getFieldWithDefault(msg, 7, 0),
    activeCounts: jspb.Message.getFieldWithDefault(msg, 8, 0),
    passiveEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    addedDamage: jspb.Message.getFieldWithDefault(msg, 10, 0),
    takenDamage: jspb.Message.getFieldWithDefault(msg, 11, 0),
    state: jspb.Message.getFieldWithDefault(msg, 12, 0),
    positionChanged: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    barrierInAction: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    bleedCount: jspb.Message.getFieldWithDefault(msg, 15, 0),
    resurrectionEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
    decoyEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 17, false),
    decoyInAction: jspb.Message.getBooleanFieldWithDefault(msg, 18, false),
    bonusCharge: jspb.Message.getFieldWithDefault(msg, 19, 0),
    curseCount: jspb.Message.getFieldWithDefault(msg, 20, 0),
    skillDeathEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 21, false),
    duplicateDecoyEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 22, false),
    criticalPhyRate: jspb.Message.getFieldWithDefault(msg, 23, 0),
    criticalIntRate: jspb.Message.getFieldWithDefault(msg, 24, 0),
    criticalJudg: jspb.Message.getBooleanFieldWithDefault(msg, 25, false),
    shield: jspb.Message.getFieldWithDefault(msg, 26, 0),
    auraEnabledMap: (f = msg.getAuraEnabledMap()) ? f.toObject(includeInstance, undefined) : [],
    auraDeathEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 28, false),
    stateEffectRateMap: (f = msg.getStateEffectRateMap()) ? f.toObject(includeInstance, undefined) : [],
    activeAurasList: (f = jspb.Message.getRepeatedField(msg, 30)) == null ? undefined : f,
    increaseDamageCut: jspb.Message.getFieldWithDefault(msg, 31, 0),
    lastTargetsList: jspb.Message.toObjectList(msg.getLastTargetsList(),
    proto.battle.Unit.toObject, includeInstance),
    withinActionValueMap: (f = msg.getWithinActionValueMap()) ? f.toObject(includeInstance, undefined) : [],
    passiveAddedDamage: jspb.Message.getFieldWithDefault(msg, 34, 0),
    passiveTakenDamage: jspb.Message.getFieldWithDefault(msg, 35, 0),
    enchantInfosList: jspb.Message.toObjectList(msg.getEnchantInfosList(),
    proto.battle.EnchantInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.CurrentUnit}
 */
proto.battle.CurrentUnit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.CurrentUnit;
  return proto.battle.CurrentUnit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.CurrentUnit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.CurrentUnit}
 */
proto.battle.CurrentUnit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosition(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPhy(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInt(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAgi(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCharge(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActiveCounts(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPassiveEnabled(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAddedDamage(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTakenDamage(value);
      break;
    case 12:
      var value = /** @type {!proto.battle.CurrentUnit.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPositionChanged(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBarrierInAction(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBleedCount(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResurrectionEnabled(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDecoyEnabled(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDecoyInAction(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBonusCharge(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurseCount(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSkillDeathEnabled(value);
      break;
    case 22:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDuplicateDecoyEnabled(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCriticalPhyRate(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCriticalIntRate(value);
      break;
    case 25:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCriticalJudg(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShield(value);
      break;
    case 27:
      var value = msg.getAuraEnabledMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readBool, null, 0, false);
         });
      break;
    case 28:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAuraDeathEnabled(value);
      break;
    case 29:
      var value = msg.getStateEffectRateMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt32, null, 0, 0);
         });
      break;
    case 30:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setActiveAurasList(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIncreaseDamageCut(value);
      break;
    case 32:
      var value = new proto.battle.Unit;
      reader.readMessage(value,proto.battle.Unit.deserializeBinaryFromReader);
      msg.addLastTargets(value);
      break;
    case 33:
      var value = msg.getWithinActionValueMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readInt32, null, 0, 0);
         });
      break;
    case 34:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPassiveAddedDamage(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPassiveTakenDamage(value);
      break;
    case 36:
      var value = new proto.battle.EnchantInfo;
      reader.readMessage(value,proto.battle.EnchantInfo.deserializeBinaryFromReader);
      msg.addEnchantInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.CurrentUnit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.CurrentUnit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.CurrentUnit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.CurrentUnit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getHp();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getPhy();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getInt();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getAgi();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getCharge();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getActiveCounts();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getPassiveEnabled();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getAddedDamage();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getTakenDamage();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getPositionChanged();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getBarrierInAction();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getBleedCount();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getResurrectionEnabled();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getDecoyEnabled();
  if (f) {
    writer.writeBool(
      17,
      f
    );
  }
  f = message.getDecoyInAction();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = message.getBonusCharge();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getCurseCount();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getSkillDeathEnabled();
  if (f) {
    writer.writeBool(
      21,
      f
    );
  }
  f = message.getDuplicateDecoyEnabled();
  if (f) {
    writer.writeBool(
      22,
      f
    );
  }
  f = message.getCriticalPhyRate();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
  f = message.getCriticalIntRate();
  if (f !== 0) {
    writer.writeInt32(
      24,
      f
    );
  }
  f = message.getCriticalJudg();
  if (f) {
    writer.writeBool(
      25,
      f
    );
  }
  f = message.getShield();
  if (f !== 0) {
    writer.writeInt32(
      26,
      f
    );
  }
  f = message.getAuraEnabledMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(27, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeBool);
  }
  f = message.getAuraDeathEnabled();
  if (f) {
    writer.writeBool(
      28,
      f
    );
  }
  f = message.getStateEffectRateMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(29, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getActiveAurasList();
  if (f.length > 0) {
    writer.writePackedUint32(
      30,
      f
    );
  }
  f = message.getIncreaseDamageCut();
  if (f !== 0) {
    writer.writeInt32(
      31,
      f
    );
  }
  f = message.getLastTargetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      32,
      f,
      proto.battle.Unit.serializeBinaryToWriter
    );
  }
  f = message.getWithinActionValueMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(33, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getPassiveAddedDamage();
  if (f !== 0) {
    writer.writeInt32(
      34,
      f
    );
  }
  f = message.getPassiveTakenDamage();
  if (f !== 0) {
    writer.writeInt32(
      35,
      f
    );
  }
  f = message.getEnchantInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      36,
      f,
      proto.battle.EnchantInfo.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.battle.CurrentUnit.State = {
  NORMAL: 0,
  POISON: 1,
  SLEEP: 2,
  CONFUSION: 3,
  FEAR: 4,
  BARRIER: 5,
  BLEED: 6,
  STUN: 7,
  PROSTRATION: 8,
  CURSE: 9,
  CHARM: 10
};

/**
 * optional int32 index = 1;
 * @return {number}
 */
proto.battle.CurrentUnit.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 position = 2;
 * @return {number}
 */
proto.battle.CurrentUnit.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setPosition = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 hp = 3;
 * @return {number}
 */
proto.battle.CurrentUnit.prototype.getHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setHp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 phy = 4;
 * @return {number}
 */
proto.battle.CurrentUnit.prototype.getPhy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setPhy = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 int = 5;
 * @return {number}
 */
proto.battle.CurrentUnit.prototype.getInt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setInt = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 agi = 6;
 * @return {number}
 */
proto.battle.CurrentUnit.prototype.getAgi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setAgi = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 charge = 7;
 * @return {number}
 */
proto.battle.CurrentUnit.prototype.getCharge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setCharge = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 active_counts = 8;
 * @return {number}
 */
proto.battle.CurrentUnit.prototype.getActiveCounts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setActiveCounts = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool passive_enabled = 9;
 * @return {boolean}
 */
proto.battle.CurrentUnit.prototype.getPassiveEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setPassiveEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional int32 added_damage = 10;
 * @return {number}
 */
proto.battle.CurrentUnit.prototype.getAddedDamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setAddedDamage = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 taken_damage = 11;
 * @return {number}
 */
proto.battle.CurrentUnit.prototype.getTakenDamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setTakenDamage = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional State state = 12;
 * @return {!proto.battle.CurrentUnit.State}
 */
proto.battle.CurrentUnit.prototype.getState = function() {
  return /** @type {!proto.battle.CurrentUnit.State} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.battle.CurrentUnit.State} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional bool position_changed = 13;
 * @return {boolean}
 */
proto.battle.CurrentUnit.prototype.getPositionChanged = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setPositionChanged = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool barrier_in_action = 14;
 * @return {boolean}
 */
proto.battle.CurrentUnit.prototype.getBarrierInAction = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setBarrierInAction = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional int32 bleed_count = 15;
 * @return {number}
 */
proto.battle.CurrentUnit.prototype.getBleedCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setBleedCount = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional bool resurrection_enabled = 16;
 * @return {boolean}
 */
proto.battle.CurrentUnit.prototype.getResurrectionEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setResurrectionEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};


/**
 * optional bool decoy_enabled = 17;
 * @return {boolean}
 */
proto.battle.CurrentUnit.prototype.getDecoyEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false));
};


/**
 * @param {boolean} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setDecoyEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 17, value);
};


/**
 * optional bool decoy_in_action = 18;
 * @return {boolean}
 */
proto.battle.CurrentUnit.prototype.getDecoyInAction = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setDecoyInAction = function(value) {
  return jspb.Message.setProto3BooleanField(this, 18, value);
};


/**
 * optional int32 bonus_charge = 19;
 * @return {number}
 */
proto.battle.CurrentUnit.prototype.getBonusCharge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setBonusCharge = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int32 curse_count = 20;
 * @return {number}
 */
proto.battle.CurrentUnit.prototype.getCurseCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setCurseCount = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional bool skill_death_enabled = 21;
 * @return {boolean}
 */
proto.battle.CurrentUnit.prototype.getSkillDeathEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 21, false));
};


/**
 * @param {boolean} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setSkillDeathEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 21, value);
};


/**
 * optional bool duplicate_decoy_enabled = 22;
 * @return {boolean}
 */
proto.battle.CurrentUnit.prototype.getDuplicateDecoyEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 22, false));
};


/**
 * @param {boolean} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setDuplicateDecoyEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 22, value);
};


/**
 * optional int32 critical_phy_rate = 23;
 * @return {number}
 */
proto.battle.CurrentUnit.prototype.getCriticalPhyRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setCriticalPhyRate = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional int32 critical_int_rate = 24;
 * @return {number}
 */
proto.battle.CurrentUnit.prototype.getCriticalIntRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setCriticalIntRate = function(value) {
  return jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional bool critical_judg = 25;
 * @return {boolean}
 */
proto.battle.CurrentUnit.prototype.getCriticalJudg = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 25, false));
};


/**
 * @param {boolean} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setCriticalJudg = function(value) {
  return jspb.Message.setProto3BooleanField(this, 25, value);
};


/**
 * optional int32 shield = 26;
 * @return {number}
 */
proto.battle.CurrentUnit.prototype.getShield = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setShield = function(value) {
  return jspb.Message.setProto3IntField(this, 26, value);
};


/**
 * map<uint32, bool> aura_enabled = 27;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,boolean>}
 */
proto.battle.CurrentUnit.prototype.getAuraEnabledMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,boolean>} */ (
      jspb.Message.getMapField(this, 27, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.clearAuraEnabledMap = function() {
  this.getAuraEnabledMap().clear();
  return this;};


/**
 * optional bool aura_death_enabled = 28;
 * @return {boolean}
 */
proto.battle.CurrentUnit.prototype.getAuraDeathEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 28, false));
};


/**
 * @param {boolean} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setAuraDeathEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 28, value);
};


/**
 * map<int32, int32> state_effect_rate = 29;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.battle.CurrentUnit.prototype.getStateEffectRateMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 29, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.clearStateEffectRateMap = function() {
  this.getStateEffectRateMap().clear();
  return this;};


/**
 * repeated uint32 active_auras = 30;
 * @return {!Array<number>}
 */
proto.battle.CurrentUnit.prototype.getActiveAurasList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 30));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setActiveAurasList = function(value) {
  return jspb.Message.setField(this, 30, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.addActiveAuras = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 30, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.clearActiveAurasList = function() {
  return this.setActiveAurasList([]);
};


/**
 * optional int32 increase_damage_cut = 31;
 * @return {number}
 */
proto.battle.CurrentUnit.prototype.getIncreaseDamageCut = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setIncreaseDamageCut = function(value) {
  return jspb.Message.setProto3IntField(this, 31, value);
};


/**
 * repeated Unit last_targets = 32;
 * @return {!Array<!proto.battle.Unit>}
 */
proto.battle.CurrentUnit.prototype.getLastTargetsList = function() {
  return /** @type{!Array<!proto.battle.Unit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.battle.Unit, 32));
};


/**
 * @param {!Array<!proto.battle.Unit>} value
 * @return {!proto.battle.CurrentUnit} returns this
*/
proto.battle.CurrentUnit.prototype.setLastTargetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 32, value);
};


/**
 * @param {!proto.battle.Unit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.battle.Unit}
 */
proto.battle.CurrentUnit.prototype.addLastTargets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 32, opt_value, proto.battle.Unit, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.clearLastTargetsList = function() {
  return this.setLastTargetsList([]);
};


/**
 * map<uint32, int32> within_action_value = 33;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.battle.CurrentUnit.prototype.getWithinActionValueMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 33, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.clearWithinActionValueMap = function() {
  this.getWithinActionValueMap().clear();
  return this;};


/**
 * optional int32 passive_added_damage = 34;
 * @return {number}
 */
proto.battle.CurrentUnit.prototype.getPassiveAddedDamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 34, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setPassiveAddedDamage = function(value) {
  return jspb.Message.setProto3IntField(this, 34, value);
};


/**
 * optional int32 passive_taken_damage = 35;
 * @return {number}
 */
proto.battle.CurrentUnit.prototype.getPassiveTakenDamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 35, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.setPassiveTakenDamage = function(value) {
  return jspb.Message.setProto3IntField(this, 35, value);
};


/**
 * repeated EnchantInfo enchant_infos = 36;
 * @return {!Array<!proto.battle.EnchantInfo>}
 */
proto.battle.CurrentUnit.prototype.getEnchantInfosList = function() {
  return /** @type{!Array<!proto.battle.EnchantInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.battle.EnchantInfo, 36));
};


/**
 * @param {!Array<!proto.battle.EnchantInfo>} value
 * @return {!proto.battle.CurrentUnit} returns this
*/
proto.battle.CurrentUnit.prototype.setEnchantInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 36, value);
};


/**
 * @param {!proto.battle.EnchantInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.battle.EnchantInfo}
 */
proto.battle.CurrentUnit.prototype.addEnchantInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 36, opt_value, proto.battle.EnchantInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.battle.CurrentUnit} returns this
 */
proto.battle.CurrentUnit.prototype.clearEnchantInfosList = function() {
  return this.setEnchantInfosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.EnchantInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.EnchantInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.EnchantInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.EnchantInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    enchantType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rate: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.EnchantInfo}
 */
proto.battle.EnchantInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.EnchantInfo;
  return proto.battle.EnchantInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.EnchantInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.EnchantInfo}
 */
proto.battle.EnchantInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.battle.EnchantInfo.Enchant} */ (reader.readEnum());
      msg.setEnchantType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.EnchantInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.EnchantInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.EnchantInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.EnchantInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnchantType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRate();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.battle.EnchantInfo.Enchant = {
  NO_ENCHANT: 0,
  REDUCTION: 1
};

/**
 * optional Enchant enchant_type = 1;
 * @return {!proto.battle.EnchantInfo.Enchant}
 */
proto.battle.EnchantInfo.prototype.getEnchantType = function() {
  return /** @type {!proto.battle.EnchantInfo.Enchant} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.battle.EnchantInfo.Enchant} value
 * @return {!proto.battle.EnchantInfo} returns this
 */
proto.battle.EnchantInfo.prototype.setEnchantType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 rate = 2;
 * @return {number}
 */
proto.battle.EnchantInfo.prototype.getRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.EnchantInfo} returns this
 */
proto.battle.EnchantInfo.prototype.setRate = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.battle.Skill.repeatedFields_ = [4,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.Skill.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.Skill.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.Skill} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.Skill.toObject = function(includeInstance, msg) {
  var f, obj = {
    skillId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    condition: jspb.Message.getFieldWithDefault(msg, 2, 0),
    conditionRate: jspb.Message.getFieldWithDefault(msg, 3, 0),
    effectsList: jspb.Message.toObjectList(msg.getEffectsList(),
    proto.battle.Skill.Effect.toObject, includeInstance),
    secondaryRate: jspb.Message.getFieldWithDefault(msg, 5, 0),
    enchantInfosList: jspb.Message.toObjectList(msg.getEnchantInfosList(),
    proto.battle.EnchantInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.Skill}
 */
proto.battle.Skill.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.Skill;
  return proto.battle.Skill.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.Skill} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.Skill}
 */
proto.battle.Skill.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSkillId(value);
      break;
    case 2:
      var value = /** @type {!proto.battle.Skill.Condition} */ (reader.readEnum());
      msg.setCondition(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConditionRate(value);
      break;
    case 4:
      var value = new proto.battle.Skill.Effect;
      reader.readMessage(value,proto.battle.Skill.Effect.deserializeBinaryFromReader);
      msg.addEffects(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSecondaryRate(value);
      break;
    case 6:
      var value = new proto.battle.EnchantInfo;
      reader.readMessage(value,proto.battle.EnchantInfo.deserializeBinaryFromReader);
      msg.addEnchantInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.Skill.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.Skill.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.Skill} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.Skill.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSkillId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCondition();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getConditionRate();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getEffectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.battle.Skill.Effect.serializeBinaryToWriter
    );
  }
  f = message.getSecondaryRate();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getEnchantInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.battle.EnchantInfo.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.battle.Skill.Condition = {
  NONE: 0,
  ACTIVE: 1,
  OPENING: 2,
  COUNTER: 3,
  SELF_HP: 4
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.Skill.Effect.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.Skill.Effect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.Skill.Effect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.Skill.Effect.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: jspb.Message.getFieldWithDefault(msg, 1, 0),
    param: jspb.Message.getFieldWithDefault(msg, 2, 0),
    calc: jspb.Message.getFieldWithDefault(msg, 3, 0),
    additionalCalc: jspb.Message.getFieldWithDefault(msg, 4, 0),
    minRate: jspb.Message.getFieldWithDefault(msg, 5, 0),
    maxRate: jspb.Message.getFieldWithDefault(msg, 6, 0),
    isDamage: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    additionalRate: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.Skill.Effect}
 */
proto.battle.Skill.Effect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.Skill.Effect;
  return proto.battle.Skill.Effect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.Skill.Effect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.Skill.Effect}
 */
proto.battle.Skill.Effect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.battle.Skill.Effect.Target} */ (reader.readEnum());
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {!proto.battle.Skill.Effect.Param} */ (reader.readEnum());
      msg.setParam(value);
      break;
    case 3:
      var value = /** @type {!proto.battle.Skill.Effect.Calc} */ (reader.readEnum());
      msg.setCalc(value);
      break;
    case 4:
      var value = /** @type {!proto.battle.Skill.Effect.AdditionalCalc} */ (reader.readEnum());
      msg.setAdditionalCalc(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinRate(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxRate(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDamage(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAdditionalRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.Skill.Effect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.Skill.Effect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.Skill.Effect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.Skill.Effect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getParam();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCalc();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getAdditionalCalc();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getMinRate();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getMaxRate();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getIsDamage();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getAdditionalRate();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.battle.Skill.Effect.Target = {
  SELF: 0,
  ENEMY_FIRST: 1,
  ENEMY_ALL: 2,
  ALLY_FIRST: 3,
  ALLY_ALL: 4
};

/**
 * @enum {number}
 */
proto.battle.Skill.Effect.Param = {
  NONE: 0,
  HP: 1,
  PHY: 2,
  INT: 3,
  AGI: 4
};

/**
 * @enum {number}
 */
proto.battle.Skill.Effect.Calc = {
  MY_PHY: 0,
  MY_INT: 1,
  MY_AGI: 2,
  MY_INT_YOUR_PHY: 3,
  MY_DAMAGED_IN_ACTION: 4
};

/**
 * @enum {number}
 */
proto.battle.Skill.Effect.AdditionalCalc = {
  NO_ADDITIONAL: 0,
  POISON_UNIT: 1,
  SLEEP_UNIT: 2,
  CONFUSION_UNIT: 3,
  FEAR_UNIT: 4
};

/**
 * optional Target target = 1;
 * @return {!proto.battle.Skill.Effect.Target}
 */
proto.battle.Skill.Effect.prototype.getTarget = function() {
  return /** @type {!proto.battle.Skill.Effect.Target} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.battle.Skill.Effect.Target} value
 * @return {!proto.battle.Skill.Effect} returns this
 */
proto.battle.Skill.Effect.prototype.setTarget = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Param param = 2;
 * @return {!proto.battle.Skill.Effect.Param}
 */
proto.battle.Skill.Effect.prototype.getParam = function() {
  return /** @type {!proto.battle.Skill.Effect.Param} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.battle.Skill.Effect.Param} value
 * @return {!proto.battle.Skill.Effect} returns this
 */
proto.battle.Skill.Effect.prototype.setParam = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Calc calc = 3;
 * @return {!proto.battle.Skill.Effect.Calc}
 */
proto.battle.Skill.Effect.prototype.getCalc = function() {
  return /** @type {!proto.battle.Skill.Effect.Calc} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.battle.Skill.Effect.Calc} value
 * @return {!proto.battle.Skill.Effect} returns this
 */
proto.battle.Skill.Effect.prototype.setCalc = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional AdditionalCalc additional_calc = 4;
 * @return {!proto.battle.Skill.Effect.AdditionalCalc}
 */
proto.battle.Skill.Effect.prototype.getAdditionalCalc = function() {
  return /** @type {!proto.battle.Skill.Effect.AdditionalCalc} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.battle.Skill.Effect.AdditionalCalc} value
 * @return {!proto.battle.Skill.Effect} returns this
 */
proto.battle.Skill.Effect.prototype.setAdditionalCalc = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int32 min_rate = 5;
 * @return {number}
 */
proto.battle.Skill.Effect.prototype.getMinRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Skill.Effect} returns this
 */
proto.battle.Skill.Effect.prototype.setMinRate = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 max_rate = 6;
 * @return {number}
 */
proto.battle.Skill.Effect.prototype.getMaxRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Skill.Effect} returns this
 */
proto.battle.Skill.Effect.prototype.setMaxRate = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool is_damage = 7;
 * @return {boolean}
 */
proto.battle.Skill.Effect.prototype.getIsDamage = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.battle.Skill.Effect} returns this
 */
proto.battle.Skill.Effect.prototype.setIsDamage = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional int32 additional_rate = 8;
 * @return {number}
 */
proto.battle.Skill.Effect.prototype.getAdditionalRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Skill.Effect} returns this
 */
proto.battle.Skill.Effect.prototype.setAdditionalRate = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 skill_id = 1;
 * @return {number}
 */
proto.battle.Skill.prototype.getSkillId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Skill} returns this
 */
proto.battle.Skill.prototype.setSkillId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Condition condition = 2;
 * @return {!proto.battle.Skill.Condition}
 */
proto.battle.Skill.prototype.getCondition = function() {
  return /** @type {!proto.battle.Skill.Condition} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.battle.Skill.Condition} value
 * @return {!proto.battle.Skill} returns this
 */
proto.battle.Skill.prototype.setCondition = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 condition_rate = 3;
 * @return {number}
 */
proto.battle.Skill.prototype.getConditionRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Skill} returns this
 */
proto.battle.Skill.prototype.setConditionRate = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated Effect effects = 4;
 * @return {!Array<!proto.battle.Skill.Effect>}
 */
proto.battle.Skill.prototype.getEffectsList = function() {
  return /** @type{!Array<!proto.battle.Skill.Effect>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.battle.Skill.Effect, 4));
};


/**
 * @param {!Array<!proto.battle.Skill.Effect>} value
 * @return {!proto.battle.Skill} returns this
*/
proto.battle.Skill.prototype.setEffectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.battle.Skill.Effect=} opt_value
 * @param {number=} opt_index
 * @return {!proto.battle.Skill.Effect}
 */
proto.battle.Skill.prototype.addEffects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.battle.Skill.Effect, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.battle.Skill} returns this
 */
proto.battle.Skill.prototype.clearEffectsList = function() {
  return this.setEffectsList([]);
};


/**
 * optional int32 secondary_rate = 5;
 * @return {number}
 */
proto.battle.Skill.prototype.getSecondaryRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Skill} returns this
 */
proto.battle.Skill.prototype.setSecondaryRate = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated EnchantInfo enchant_infos = 6;
 * @return {!Array<!proto.battle.EnchantInfo>}
 */
proto.battle.Skill.prototype.getEnchantInfosList = function() {
  return /** @type{!Array<!proto.battle.EnchantInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.battle.EnchantInfo, 6));
};


/**
 * @param {!Array<!proto.battle.EnchantInfo>} value
 * @return {!proto.battle.Skill} returns this
*/
proto.battle.Skill.prototype.setEnchantInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.battle.EnchantInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.battle.EnchantInfo}
 */
proto.battle.Skill.prototype.addEnchantInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.battle.EnchantInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.battle.Skill} returns this
 */
proto.battle.Skill.prototype.clearEnchantInfosList = function() {
  return this.setEnchantInfosList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.battle.Aura.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.Aura.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.Aura.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.Aura} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.Aura.toObject = function(includeInstance, msg) {
  var f, obj = {
    auraId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    condition: jspb.Message.getFieldWithDefault(msg, 2, 0),
    conditionType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    conditionValue: jspb.Message.getFieldWithDefault(msg, 4, 0),
    conditionRate: jspb.Message.getFieldWithDefault(msg, 5, 0),
    isWithinAction: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    effectsList: jspb.Message.toObjectList(msg.getEffectsList(),
    proto.battle.Aura.Effect.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.Aura}
 */
proto.battle.Aura.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.Aura;
  return proto.battle.Aura.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.Aura} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.Aura}
 */
proto.battle.Aura.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAuraId(value);
      break;
    case 2:
      var value = /** @type {!proto.battle.Aura.Condition} */ (reader.readEnum());
      msg.setCondition(value);
      break;
    case 3:
      var value = /** @type {!proto.battle.Aura.Type} */ (reader.readEnum());
      msg.setConditionType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConditionValue(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConditionRate(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsWithinAction(value);
      break;
    case 7:
      var value = new proto.battle.Aura.Effect;
      reader.readMessage(value,proto.battle.Aura.Effect.deserializeBinaryFromReader);
      msg.addEffects(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.Aura.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.Aura.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.Aura} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.Aura.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuraId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCondition();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getConditionType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getConditionValue();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getConditionRate();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getIsWithinAction();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getEffectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.battle.Aura.Effect.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.battle.Aura.Condition = {
  NONE: 0,
  ACTIVE: 1,
  OPENING: 2,
  COUNTER: 3,
  SELF_HP: 4
};

/**
 * @enum {number}
 */
proto.battle.Aura.Type = {
  NORMAL: 0,
  EFFECT: 1,
  SECONDARY: 2,
  SECONDARY_EFFECT: 3,
  CONDITION: 4
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.Aura.Effect.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.Aura.Effect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.Aura.Effect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.Aura.Effect.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: jspb.Message.getFieldWithDefault(msg, 1, 0),
    param: jspb.Message.getFieldWithDefault(msg, 2, 0),
    calc: jspb.Message.getFieldWithDefault(msg, 3, 0),
    minRate: jspb.Message.getFieldWithDefault(msg, 4, 0),
    effectRate: jspb.Message.getFieldWithDefault(msg, 5, 0),
    additionalRate: jspb.Message.getFieldWithDefault(msg, 6, 0),
    isDamage: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.Aura.Effect}
 */
proto.battle.Aura.Effect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.Aura.Effect;
  return proto.battle.Aura.Effect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.Aura.Effect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.Aura.Effect}
 */
proto.battle.Aura.Effect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.battle.Aura.Effect.Target} */ (reader.readEnum());
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {!proto.battle.Aura.Effect.Param} */ (reader.readEnum());
      msg.setParam(value);
      break;
    case 3:
      var value = /** @type {!proto.battle.Aura.Effect.Calc} */ (reader.readEnum());
      msg.setCalc(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinRate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEffectRate(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAdditionalRate(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDamage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.Aura.Effect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.Aura.Effect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.Aura.Effect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.Aura.Effect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getParam();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCalc();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMinRate();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getEffectRate();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getAdditionalRate();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getIsDamage();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.battle.Aura.Effect.Target = {
  SELF: 0,
  ENEMY_FIRST: 1,
  ENEMY_ALL: 2,
  ALLY_FIRST: 3,
  ALLY_ALL: 4
};

/**
 * @enum {number}
 */
proto.battle.Aura.Effect.Param = {
  NONE: 0,
  HP: 1,
  PHY: 2,
  INT: 3,
  AGI: 4,
  INITIAL_HP: 5,
  INITIAL_PHY: 6,
  INITIAL_INT: 7,
  INITIAL_AGI: 8
};

/**
 * @enum {number}
 */
proto.battle.Aura.Effect.Calc = {
  MY_PHY: 0,
  MY_INT: 1,
  MY_AGI: 2,
  MY_INT_YOUR_PHY: 3,
  MY_DAMAGED_IN_ACTION: 4
};

/**
 * optional Target target = 1;
 * @return {!proto.battle.Aura.Effect.Target}
 */
proto.battle.Aura.Effect.prototype.getTarget = function() {
  return /** @type {!proto.battle.Aura.Effect.Target} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.battle.Aura.Effect.Target} value
 * @return {!proto.battle.Aura.Effect} returns this
 */
proto.battle.Aura.Effect.prototype.setTarget = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Param param = 2;
 * @return {!proto.battle.Aura.Effect.Param}
 */
proto.battle.Aura.Effect.prototype.getParam = function() {
  return /** @type {!proto.battle.Aura.Effect.Param} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.battle.Aura.Effect.Param} value
 * @return {!proto.battle.Aura.Effect} returns this
 */
proto.battle.Aura.Effect.prototype.setParam = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Calc calc = 3;
 * @return {!proto.battle.Aura.Effect.Calc}
 */
proto.battle.Aura.Effect.prototype.getCalc = function() {
  return /** @type {!proto.battle.Aura.Effect.Calc} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.battle.Aura.Effect.Calc} value
 * @return {!proto.battle.Aura.Effect} returns this
 */
proto.battle.Aura.Effect.prototype.setCalc = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int32 min_rate = 4;
 * @return {number}
 */
proto.battle.Aura.Effect.prototype.getMinRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Aura.Effect} returns this
 */
proto.battle.Aura.Effect.prototype.setMinRate = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 effect_rate = 5;
 * @return {number}
 */
proto.battle.Aura.Effect.prototype.getEffectRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Aura.Effect} returns this
 */
proto.battle.Aura.Effect.prototype.setEffectRate = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 additional_rate = 6;
 * @return {number}
 */
proto.battle.Aura.Effect.prototype.getAdditionalRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Aura.Effect} returns this
 */
proto.battle.Aura.Effect.prototype.setAdditionalRate = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool is_damage = 7;
 * @return {boolean}
 */
proto.battle.Aura.Effect.prototype.getIsDamage = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.battle.Aura.Effect} returns this
 */
proto.battle.Aura.Effect.prototype.setIsDamage = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional uint32 aura_id = 1;
 * @return {number}
 */
proto.battle.Aura.prototype.getAuraId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Aura} returns this
 */
proto.battle.Aura.prototype.setAuraId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Condition condition = 2;
 * @return {!proto.battle.Aura.Condition}
 */
proto.battle.Aura.prototype.getCondition = function() {
  return /** @type {!proto.battle.Aura.Condition} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.battle.Aura.Condition} value
 * @return {!proto.battle.Aura} returns this
 */
proto.battle.Aura.prototype.setCondition = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Type condition_type = 3;
 * @return {!proto.battle.Aura.Type}
 */
proto.battle.Aura.prototype.getConditionType = function() {
  return /** @type {!proto.battle.Aura.Type} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.battle.Aura.Type} value
 * @return {!proto.battle.Aura} returns this
 */
proto.battle.Aura.prototype.setConditionType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int32 condition_value = 4;
 * @return {number}
 */
proto.battle.Aura.prototype.getConditionValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Aura} returns this
 */
proto.battle.Aura.prototype.setConditionValue = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 condition_rate = 5;
 * @return {number}
 */
proto.battle.Aura.prototype.getConditionRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Aura} returns this
 */
proto.battle.Aura.prototype.setConditionRate = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool is_within_action = 6;
 * @return {boolean}
 */
proto.battle.Aura.prototype.getIsWithinAction = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.battle.Aura} returns this
 */
proto.battle.Aura.prototype.setIsWithinAction = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * repeated Effect effects = 7;
 * @return {!Array<!proto.battle.Aura.Effect>}
 */
proto.battle.Aura.prototype.getEffectsList = function() {
  return /** @type{!Array<!proto.battle.Aura.Effect>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.battle.Aura.Effect, 7));
};


/**
 * @param {!Array<!proto.battle.Aura.Effect>} value
 * @return {!proto.battle.Aura} returns this
*/
proto.battle.Aura.prototype.setEffectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.battle.Aura.Effect=} opt_value
 * @param {number=} opt_index
 * @return {!proto.battle.Aura.Effect}
 */
proto.battle.Aura.prototype.addEffects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.battle.Aura.Effect, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.battle.Aura} returns this
 */
proto.battle.Aura.prototype.clearEffectsList = function() {
  return this.setEffectsList([]);
};


/**
 * @enum {number}
 */
proto.battle.BattleType = {
  UNDEFINED_BATTLE: 0,
  SIMULATE_BATTLE: 1
};

goog.object.extend(exports, proto.battle);
