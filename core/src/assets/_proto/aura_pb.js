// source: aura.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.aura.AuraEffect', null, global);
goog.exportSymbol('proto.aura.AuraEffects', null, global);
goog.exportSymbol('proto.aura.AuraTypeMaster', null, global);
goog.exportSymbol('proto.aura.CalculationMethod', null, global);
goog.exportSymbol('proto.aura.CalculationType', null, global);
goog.exportSymbol('proto.aura.Occasions', null, global);
goog.exportSymbol('proto.aura.Param', null, global);
goog.exportSymbol('proto.aura.Parameter', null, global);
goog.exportSymbol('proto.aura.Trigger', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aura.AuraEffect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aura.AuraEffect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aura.AuraEffect.displayName = 'proto.aura.AuraEffect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aura.AuraTypeMaster = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.aura.AuraTypeMaster.repeatedFields_, null);
};
goog.inherits(proto.aura.AuraTypeMaster, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aura.AuraTypeMaster.displayName = 'proto.aura.AuraTypeMaster';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aura.Param = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aura.Param, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aura.Param.displayName = 'proto.aura.Param';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aura.CalculationMethod = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aura.CalculationMethod, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aura.CalculationMethod.displayName = 'proto.aura.CalculationMethod';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aura.AuraEffects = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.aura.AuraEffects.repeatedFields_, null);
};
goog.inherits(proto.aura.AuraEffects, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aura.AuraEffects.displayName = 'proto.aura.AuraEffects';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aura.AuraEffect.prototype.toObject = function(opt_includeInstance) {
  return proto.aura.AuraEffect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aura.AuraEffect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aura.AuraEffect.toObject = function(includeInstance, msg) {
  var f, obj = {
    auraType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    effectValue: jspb.Message.getFieldWithDefault(msg, 2, 0),
    secondaryValue: jspb.Message.getFieldWithDefault(msg, 3, 0),
    shortage: jspb.Message.getFieldWithDefault(msg, 4, 0),
    isActive: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aura.AuraEffect}
 */
proto.aura.AuraEffect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aura.AuraEffect;
  return proto.aura.AuraEffect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aura.AuraEffect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aura.AuraEffect}
 */
proto.aura.AuraEffect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAuraType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEffectValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSecondaryValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShortage(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aura.AuraEffect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aura.AuraEffect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aura.AuraEffect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aura.AuraEffect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuraType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEffectValue();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSecondaryValue();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getShortage();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getIsActive();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional uint32 aura_type = 1;
 * @return {number}
 */
proto.aura.AuraEffect.prototype.getAuraType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.aura.AuraEffect} returns this
 */
proto.aura.AuraEffect.prototype.setAuraType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 effect_value = 2;
 * @return {number}
 */
proto.aura.AuraEffect.prototype.getEffectValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.aura.AuraEffect} returns this
 */
proto.aura.AuraEffect.prototype.setEffectValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 secondary_value = 3;
 * @return {number}
 */
proto.aura.AuraEffect.prototype.getSecondaryValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.aura.AuraEffect} returns this
 */
proto.aura.AuraEffect.prototype.setSecondaryValue = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 shortage = 4;
 * @return {number}
 */
proto.aura.AuraEffect.prototype.getShortage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.aura.AuraEffect} returns this
 */
proto.aura.AuraEffect.prototype.setShortage = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool is_active = 5;
 * @return {boolean}
 */
proto.aura.AuraEffect.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.aura.AuraEffect} returns this
 */
proto.aura.AuraEffect.prototype.setIsActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.aura.AuraTypeMaster.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aura.AuraTypeMaster.prototype.toObject = function(opt_includeInstance) {
  return proto.aura.AuraTypeMaster.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aura.AuraTypeMaster} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aura.AuraTypeMaster.toObject = function(includeInstance, msg) {
  var f, obj = {
    auraType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    attributeTypesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    color: jspb.Message.getFieldWithDefault(msg, 3, 0),
    heroType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    required: jspb.Message.getFieldWithDefault(msg, 5, 0),
    numericCondition: (f = msg.getNumericCondition()) && proto.aura.Param.toObject(includeInstance, f),
    effect: (f = msg.getEffect()) && proto.aura.CalculationMethod.toObject(includeInstance, f),
    secondary: (f = msg.getSecondary()) && proto.aura.CalculationMethod.toObject(includeInstance, f),
    occasions: jspb.Message.getFieldWithDefault(msg, 9, 0),
    trigger: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aura.AuraTypeMaster}
 */
proto.aura.AuraTypeMaster.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aura.AuraTypeMaster;
  return proto.aura.AuraTypeMaster.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aura.AuraTypeMaster} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aura.AuraTypeMaster}
 */
proto.aura.AuraTypeMaster.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAuraType(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setAttributeTypesList(value);
      break;
    case 3:
      var value = /** @type {!proto.aura.Parameter} */ (reader.readEnum());
      msg.setColor(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeroType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequired(value);
      break;
    case 6:
      var value = new proto.aura.Param;
      reader.readMessage(value,proto.aura.Param.deserializeBinaryFromReader);
      msg.setNumericCondition(value);
      break;
    case 7:
      var value = new proto.aura.CalculationMethod;
      reader.readMessage(value,proto.aura.CalculationMethod.deserializeBinaryFromReader);
      msg.setEffect(value);
      break;
    case 8:
      var value = new proto.aura.CalculationMethod;
      reader.readMessage(value,proto.aura.CalculationMethod.deserializeBinaryFromReader);
      msg.setSecondary(value);
      break;
    case 9:
      var value = /** @type {!proto.aura.Occasions} */ (reader.readEnum());
      msg.setOccasions(value);
      break;
    case 10:
      var value = /** @type {!proto.aura.Trigger} */ (reader.readEnum());
      msg.setTrigger(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aura.AuraTypeMaster.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aura.AuraTypeMaster.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aura.AuraTypeMaster} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aura.AuraTypeMaster.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuraType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAttributeTypesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getColor();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getHeroType();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getRequired();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getNumericCondition();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.aura.Param.serializeBinaryToWriter
    );
  }
  f = message.getEffect();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.aura.CalculationMethod.serializeBinaryToWriter
    );
  }
  f = message.getSecondary();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.aura.CalculationMethod.serializeBinaryToWriter
    );
  }
  f = message.getOccasions();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getTrigger();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
};


/**
 * optional uint32 aura_type = 1;
 * @return {number}
 */
proto.aura.AuraTypeMaster.prototype.getAuraType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.aura.AuraTypeMaster} returns this
 */
proto.aura.AuraTypeMaster.prototype.setAuraType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated uint32 attribute_types = 2;
 * @return {!Array<number>}
 */
proto.aura.AuraTypeMaster.prototype.getAttributeTypesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.aura.AuraTypeMaster} returns this
 */
proto.aura.AuraTypeMaster.prototype.setAttributeTypesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.aura.AuraTypeMaster} returns this
 */
proto.aura.AuraTypeMaster.prototype.addAttributeTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.aura.AuraTypeMaster} returns this
 */
proto.aura.AuraTypeMaster.prototype.clearAttributeTypesList = function() {
  return this.setAttributeTypesList([]);
};


/**
 * optional Parameter color = 3;
 * @return {!proto.aura.Parameter}
 */
proto.aura.AuraTypeMaster.prototype.getColor = function() {
  return /** @type {!proto.aura.Parameter} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.aura.Parameter} value
 * @return {!proto.aura.AuraTypeMaster} returns this
 */
proto.aura.AuraTypeMaster.prototype.setColor = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint32 hero_type = 4;
 * @return {number}
 */
proto.aura.AuraTypeMaster.prototype.getHeroType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.aura.AuraTypeMaster} returns this
 */
proto.aura.AuraTypeMaster.prototype.setHeroType = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 required = 5;
 * @return {number}
 */
proto.aura.AuraTypeMaster.prototype.getRequired = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.aura.AuraTypeMaster} returns this
 */
proto.aura.AuraTypeMaster.prototype.setRequired = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Param numeric_condition = 6;
 * @return {?proto.aura.Param}
 */
proto.aura.AuraTypeMaster.prototype.getNumericCondition = function() {
  return /** @type{?proto.aura.Param} */ (
    jspb.Message.getWrapperField(this, proto.aura.Param, 6));
};


/**
 * @param {?proto.aura.Param|undefined} value
 * @return {!proto.aura.AuraTypeMaster} returns this
*/
proto.aura.AuraTypeMaster.prototype.setNumericCondition = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aura.AuraTypeMaster} returns this
 */
proto.aura.AuraTypeMaster.prototype.clearNumericCondition = function() {
  return this.setNumericCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aura.AuraTypeMaster.prototype.hasNumericCondition = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional CalculationMethod effect = 7;
 * @return {?proto.aura.CalculationMethod}
 */
proto.aura.AuraTypeMaster.prototype.getEffect = function() {
  return /** @type{?proto.aura.CalculationMethod} */ (
    jspb.Message.getWrapperField(this, proto.aura.CalculationMethod, 7));
};


/**
 * @param {?proto.aura.CalculationMethod|undefined} value
 * @return {!proto.aura.AuraTypeMaster} returns this
*/
proto.aura.AuraTypeMaster.prototype.setEffect = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aura.AuraTypeMaster} returns this
 */
proto.aura.AuraTypeMaster.prototype.clearEffect = function() {
  return this.setEffect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aura.AuraTypeMaster.prototype.hasEffect = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional CalculationMethod secondary = 8;
 * @return {?proto.aura.CalculationMethod}
 */
proto.aura.AuraTypeMaster.prototype.getSecondary = function() {
  return /** @type{?proto.aura.CalculationMethod} */ (
    jspb.Message.getWrapperField(this, proto.aura.CalculationMethod, 8));
};


/**
 * @param {?proto.aura.CalculationMethod|undefined} value
 * @return {!proto.aura.AuraTypeMaster} returns this
*/
proto.aura.AuraTypeMaster.prototype.setSecondary = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aura.AuraTypeMaster} returns this
 */
proto.aura.AuraTypeMaster.prototype.clearSecondary = function() {
  return this.setSecondary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aura.AuraTypeMaster.prototype.hasSecondary = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Occasions occasions = 9;
 * @return {!proto.aura.Occasions}
 */
proto.aura.AuraTypeMaster.prototype.getOccasions = function() {
  return /** @type {!proto.aura.Occasions} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.aura.Occasions} value
 * @return {!proto.aura.AuraTypeMaster} returns this
 */
proto.aura.AuraTypeMaster.prototype.setOccasions = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional Trigger trigger = 10;
 * @return {!proto.aura.Trigger}
 */
proto.aura.AuraTypeMaster.prototype.getTrigger = function() {
  return /** @type {!proto.aura.Trigger} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.aura.Trigger} value
 * @return {!proto.aura.AuraTypeMaster} returns this
 */
proto.aura.AuraTypeMaster.prototype.setTrigger = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aura.Param.prototype.toObject = function(opt_includeInstance) {
  return proto.aura.Param.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aura.Param} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aura.Param.toObject = function(includeInstance, msg) {
  var f, obj = {
    hp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    phy: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pb_int: jspb.Message.getFieldWithDefault(msg, 3, 0),
    agi: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aura.Param}
 */
proto.aura.Param.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aura.Param;
  return proto.aura.Param.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aura.Param} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aura.Param}
 */
proto.aura.Param.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPhy(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInt(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAgi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aura.Param.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aura.Param.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aura.Param} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aura.Param.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHp();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPhy();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getInt();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getAgi();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 hp = 1;
 * @return {number}
 */
proto.aura.Param.prototype.getHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.aura.Param} returns this
 */
proto.aura.Param.prototype.setHp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 phy = 2;
 * @return {number}
 */
proto.aura.Param.prototype.getPhy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.aura.Param} returns this
 */
proto.aura.Param.prototype.setPhy = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 int = 3;
 * @return {number}
 */
proto.aura.Param.prototype.getInt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.aura.Param} returns this
 */
proto.aura.Param.prototype.setInt = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 agi = 4;
 * @return {number}
 */
proto.aura.Param.prototype.getAgi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.aura.Param} returns this
 */
proto.aura.Param.prototype.setAgi = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aura.CalculationMethod.prototype.toObject = function(opt_includeInstance) {
  return proto.aura.CalculationMethod.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aura.CalculationMethod} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aura.CalculationMethod.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, 0),
    parameter: jspb.Message.getFieldWithDefault(msg, 2, 0),
    coefficient: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    intercept: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aura.CalculationMethod}
 */
proto.aura.CalculationMethod.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aura.CalculationMethod;
  return proto.aura.CalculationMethod.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aura.CalculationMethod} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aura.CalculationMethod}
 */
proto.aura.CalculationMethod.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.aura.CalculationType} */ (reader.readEnum());
      msg.setMethod(value);
      break;
    case 2:
      var value = /** @type {!proto.aura.Parameter} */ (reader.readEnum());
      msg.setParameter(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCoefficient(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIntercept(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aura.CalculationMethod.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aura.CalculationMethod.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aura.CalculationMethod} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aura.CalculationMethod.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getParameter();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCoefficient();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getIntercept();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional CalculationType method = 1;
 * @return {!proto.aura.CalculationType}
 */
proto.aura.CalculationMethod.prototype.getMethod = function() {
  return /** @type {!proto.aura.CalculationType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.aura.CalculationType} value
 * @return {!proto.aura.CalculationMethod} returns this
 */
proto.aura.CalculationMethod.prototype.setMethod = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Parameter parameter = 2;
 * @return {!proto.aura.Parameter}
 */
proto.aura.CalculationMethod.prototype.getParameter = function() {
  return /** @type {!proto.aura.Parameter} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.aura.Parameter} value
 * @return {!proto.aura.CalculationMethod} returns this
 */
proto.aura.CalculationMethod.prototype.setParameter = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional float coefficient = 3;
 * @return {number}
 */
proto.aura.CalculationMethod.prototype.getCoefficient = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.aura.CalculationMethod} returns this
 */
proto.aura.CalculationMethod.prototype.setCoefficient = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional int32 intercept = 4;
 * @return {number}
 */
proto.aura.CalculationMethod.prototype.getIntercept = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.aura.CalculationMethod} returns this
 */
proto.aura.CalculationMethod.prototype.setIntercept = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.aura.AuraEffects.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aura.AuraEffects.prototype.toObject = function(opt_includeInstance) {
  return proto.aura.AuraEffects.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aura.AuraEffects} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aura.AuraEffects.toObject = function(includeInstance, msg) {
  var f, obj = {
    auraEffectsList: jspb.Message.toObjectList(msg.getAuraEffectsList(),
    proto.aura.AuraEffect.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aura.AuraEffects}
 */
proto.aura.AuraEffects.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aura.AuraEffects;
  return proto.aura.AuraEffects.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aura.AuraEffects} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aura.AuraEffects}
 */
proto.aura.AuraEffects.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.aura.AuraEffect;
      reader.readMessage(value,proto.aura.AuraEffect.deserializeBinaryFromReader);
      msg.addAuraEffects(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aura.AuraEffects.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aura.AuraEffects.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aura.AuraEffects} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aura.AuraEffects.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuraEffectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.aura.AuraEffect.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AuraEffect aura_effects = 1;
 * @return {!Array<!proto.aura.AuraEffect>}
 */
proto.aura.AuraEffects.prototype.getAuraEffectsList = function() {
  return /** @type{!Array<!proto.aura.AuraEffect>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.aura.AuraEffect, 1));
};


/**
 * @param {!Array<!proto.aura.AuraEffect>} value
 * @return {!proto.aura.AuraEffects} returns this
*/
proto.aura.AuraEffects.prototype.setAuraEffectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.aura.AuraEffect=} opt_value
 * @param {number=} opt_index
 * @return {!proto.aura.AuraEffect}
 */
proto.aura.AuraEffects.prototype.addAuraEffects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.aura.AuraEffect, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.aura.AuraEffects} returns this
 */
proto.aura.AuraEffects.prototype.clearAuraEffectsList = function() {
  return this.setAuraEffectsList([]);
};


/**
 * @enum {number}
 */
proto.aura.CalculationType = {
  NONE: 0,
  LINEAR: 1,
  QUADRATIC: 2
};

/**
 * @enum {number}
 */
proto.aura.Parameter = {
  NOTHING: 0,
  HP: 1,
  PHY: 2,
  INT: 3,
  AGI: 4
};

/**
 * @enum {number}
 */
proto.aura.Occasions = {
  BATTLE: 0,
  QUEST: 1,
  CP_MINING: 2
};

/**
 * @enum {number}
 */
proto.aura.Trigger = {
  DURING: 0,
  BEFORE: 1
};

goog.object.extend(exports, proto.aura);
